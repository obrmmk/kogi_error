,date,line,emsg
0,2022-04-30 08:25:52,1/0,ZeroDivisionError: division by zero
1,2022-04-30 08:42:10,"get_ipython().run_cell_magic('kogi', '', '')","UsageError: %%kogi is a cell magic, but the cell body is empty."
2,2022-04-30 15:16:33,print(a),NameError: name 'a' is not defined
3,2022-05-02 03:56:39,"kogi_login(ai_key='1fnp38_4EYzTU39qtvj7QWbWZ1c5XFw_m', class_name='大学院得論')",NameError: name 'kogi_login' is not defined
4,2022-05-02 04:14:03,type(datetime),NameError: name 'datetime' is not defined
5,2022-05-02 04:14:20,type(datetime[0]),NameError: name 'datetime' is not defined
6,2022-05-02 04:54:39,"plt.boxplot([df['教育内容'], df['通いやすさ'], df['評判の良さ']])",KeyError: '教育内容'
7,2022-05-02 04:56:35,plt.hist(df['教育内容']),KeyError: '教育内容'
8,2022-05-02 05:03:01,"df_2[""dateint""] = df_2[""datetime""].dt.strftime('%Y%m%d')",AttributeError: Can only use .dt accessor with datetimelike values
9,2022-05-02 05:09:17,"df_2[""datetime""].strftime('%Y%m%d')",AttributeError: 'Series' object has no attribute 'strftime'
10,2022-05-02 05:27:07,df.groupby('兄弟姉妹')[G3].describe(),NameError: name 'G3' is not defined
11,2022-05-02 05:43:39,"sns.pairplot(df['母学歴', '父学歴', '母職業', '父職業'])","KeyError: ('母学歴', '父学歴', '母職業', '父職業')"
12,2022-05-02 07:13:37,"model.fit(X_train,y_train) ",NameError: name 'X_train' is not defined
13,2022-05-02 07:33:06,a = input().sprit(),AttributeError: 'str' object has no attribute 'sprit'
14,2022-05-02 09:58:30,print(a),NameError: name 'a' is not defined
15,2022-05-02 10:18:28,print(a),NameError: name 'a' is not defined
16,2022-05-02 11:00:38,sin(1),NameError: name 'sin' is not defined
17,2022-05-02 11:10:55,1/0,ZeroDivisionError: division by zero
18,2022-05-02 11:40:24,1/0,ZeroDivisionError: division by zero
19,2022-05-02 15:26:11,range('a'),TypeError: 'str' object cannot be interpreted as an integer
20,2022-05-02 15:40:26,'9' in 99,TypeError: argument of type 'int' is not iterable
21,2022-05-02 16:18:36,"model.fit(X, y)",ValueError: could not convert string to float: '快晴'
22,2022-05-03 04:29:10,X = int(input()),ValueError: invalid literal for int() with base 10: 'dIfFiCuLt'
23,2022-05-03 06:56:53,"a,b,c,d,x,y = map(int, input().split())","ValueError: not enough values to unpack (expected 6, got 4)"
24,2022-05-04 23:51:10,"os.chdir(""C:\\PyTest"") # 作業用ディレクトリを変更",FileNotFoundError: [Errno 2] No such file or directory: 'C:\\PyTest'
25,2022-05-05 11:53:55,  if i>n:,KeyboardInterrupt: 
26,2022-05-05 12:39:18,  ykn=(d*1.01),NameError: name 'd' is not defined
27,2022-05-05 13:28:07,"sns.countplot(x='自由時間', data='G3')",AttributeError: 'str' object has no attribute 'get'
28,2022-05-05 13:33:02,"sns.countplot(x='自由時間', y='G3')",ValueError: Cannot pass values for both `x` and `y`
29,2022-05-05 13:33:09,"sns.countplot(x='自由時間', y='G3')",ValueError: Cannot pass values for both `x` and `y`
30,2022-05-05 13:43:19,"sns.plot(df, x='外出', y='G3')",AttributeError: module 'seaborn' has no attribute 'plot'
31,2022-05-05 16:21:06,"    plt.subplot(4,4,i+1)","ValueError: num must be 1 <= num <= 16, not 17"
32,2022-05-06 00:28:46,for i in range(n):,TypeError: 'tuple' object cannot be interpreted as an integer
33,2022-05-06 00:53:02,  if moji.index(x[i]+1)!=x[i+1]:,"TypeError: can only concatenate str (not ""int"") to str"
34,2022-05-06 01:01:53,  if moji.index(str(int(x[i])+1))!=x[i+1]:,ValueError: substring not found
35,2022-05-06 01:13:11,x=input(),KeyboardInterrupt: 
36,2022-05-06 01:35:53,"  s=s+[list(map(int,input().split()))]",ValueError: invalid literal for int() with base 10: '##..'
37,2022-05-06 01:36:39,  s=s+[list(map(input().split()))],TypeError: map() must have at least two arguments.
38,2022-05-06 01:48:38,  if s[y][i]=='.':,IndexError: list index out of range
39,2022-05-06 01:49:07,  if s[y][i]=='.':,IndexError: list index out of range
40,2022-05-06 02:05:27,  if s[y][i]=='.':,IndexError: list index out of range
41,2022-05-06 03:42:14,      if (a[i][0]-a[k][0])*(s[j][1]-s[k][1])!=(a[j][0]-a[k][0])*(a[i][1]-a[k][1]):,TypeError: unsupported operand type(s) for -: 'str' and 'str'
42,2022-05-06 03:42:58,      if (a[i][0]-a[k][0])*(s[j][1]-s[k][1])!=(a[j][0]-a[k][0])*(a[i][1]-a[k][1]):,TypeError: unsupported operand type(s) for -: 'str' and 'str'
43,2022-05-06 04:13:30,if sum(set(l))!=0:,TypeError: unsupported operand type(s) for +: 'int' and 'str'
44,2022-05-06 04:18:07,"a=list(map(int,input().split()))",KeyboardInterrupt: 
45,2022-05-06 04:26:56,  t=t+int([st[1]]),"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
46,2022-05-06 04:46:33,b=a.sorted,AttributeError: 'list' object has no attribute 'sorted'
47,2022-05-06 04:50:08,,KeyboardInterrupt: 
48,2022-05-06 05:50:05,    ss[i]=ss[i]+[s[i+j]],"TypeError: can only concatenate str (not ""list"") to str"
49,2022-05-06 06:10:32,  ss[i]=ss[i]+[kari],"TypeError: can only concatenate str (not ""list"") to str"
50,2022-05-06 06:54:09,  i=a.indet(max(a)),AttributeError: 'list' object has no attribute 'indet'
51,2022-05-06 07:09:06,while ma<w:,TypeError: '<' not supported between instances of 'list' and 'int'
52,2022-05-06 07:30:13,    1[i][1]=w-g,TypeError: 'int' object is not subscriptable
53,2022-05-06 08:45:11,"sns.kdeplot(df.groupby('アルコール').get_group('1')['G3'], shade = True, label = '1')",KeyError: 'アルコール'
54,2022-05-06 08:45:48,"sns.pairplot(df, hue='アルコール')",KeyError: 'アルコール'
55,2022-05-06 09:08:15,"df[['アルコール','パリピ']],value_counts()",NameError: name 'value_counts' is not defined
56,2022-05-06 14:44:31,"    rho = corr(df[column], df['G3'])",NameError: name 'corr' is not defined
57,2022-05-07 11:43:19,n=N[-1],TypeError: 'int' object is not subscriptable
58,2022-05-08 00:55:10,max(x*y),TypeError: 'int' object is not iterable
59,2022-05-08 00:56:27,print(max(x*y)),TypeError: 'int' object is not iterable
60,2022-05-08 05:15:47,"sns.histplot(x='G3', hue='性別', data=df, binwidth=1, palette={'1':'red', '2':'green', '3':'blue', '4':'yellow', '5':'purple'})","ValueError: The palette dictionary is missing keys: {'女性', '男性'}"
61,2022-05-08 05:16:08,"sns.histplot(x='G3', hue='外出', data=df, binwidth=1, palette={'1':'red', '2':'green', '3':'blue', '4':'yellow', '5':'purple'})","ValueError: The palette dictionary is missing keys: {1, 2, 3, 4, 5}"
62,2022-05-08 06:41:19,"sns.boxplot(x=df['性別'], y=df['G3'],color=['red','blue'])","ValueError: Invalid RGBA argument: ['red', 'blue']"
63,2022-05-08 14:58:09,"sns.distplot(df, x='アルコール', row='G3')",TypeError: distplot() got an unexpected keyword argument 'row'
64,2022-05-08 16:07:07,df.groupby('兄弟姉妹')['G3'].describe(),"ValueError: index must be a MultiIndex to unstack, <class 'pandas.core.indexes.base.Index'> was passed"
65,2022-05-09 00:59:52,"sns.countplot(x='欠席',hue='G3', data=df)",ValueError: Could not interpret input '欠席'
66,2022-05-09 02:10:25,"plt.hist(df['性別'],df[g3])",NameError: name 'g3' is not defined
67,2022-05-09 02:10:32,"plt.hist(df['性別'],df[G3])",NameError: name 'G3' is not defined
68,2022-05-09 02:13:51,plt.hist(df['女性']),KeyError: '女性'
69,2022-05-09 03:08:01,"print(corr(df['女性'], df['G3']))",KeyError: '女性'
70,2022-05-09 03:08:08,,"TypeError: ufunc 'true_divide' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''"
71,2022-05-09 04:11:41,math.floor,NameError: name 'math' is not defined
72,2022-05-09 04:33:38,"plt.scatter(df['部屋数'], df['住宅価格'])",NameError: name 'plt' is not defined
73,2022-05-09 04:33:52,"plt.figure(figure=(6,6))",TypeError: __init__() got an unexpected keyword argument 'figure'
74,2022-05-09 04:33:57,df = pd.read_csv('boston.csv'),NameError: name 'pd' is not defined
75,2022-05-09 04:34:01,"plt.figure(figuresize=(6,6))",TypeError: __init__() got an unexpected keyword argument 'figuresize'
76,2022-05-09 04:34:20,"plt.figure(figusize=(6,6))",TypeError: __init__() got an unexpected keyword argument 'figusize'
77,2022-05-09 04:34:40,"plt.figure(figsize[7,7])",NameError: name 'figsize' is not defined
78,2022-05-09 04:34:42,"plt.scatter(df['部屋数'], df['住宅価格'],alpa=0.5)",AttributeError: 'PathCollection' object has no property 'alpa'
79,2022-05-09 04:34:51,"plt.scatter(df['部屋数'], df['住宅価格'],alph=0.5)",AttributeError: 'PathCollection' object has no property 'alph'
80,2022-05-09 04:35:21,"plt.scatter(df['部屋数'], df['住宅価格'])",NameError: name 'df' is not defined
81,2022-05-09 04:35:46,"plt.figure(figureSize=(6,6))",TypeError: __init__() got an unexpected keyword argument 'figureSize'
82,2022-05-09 04:36:32,"plt.scater(df['部屋数'],df['住宅価格'], alpha=0.3)",AttributeError: module 'matplotlib.pyplot' has no attribute 'scater'
83,2022-05-09 04:39:04,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
84,2022-05-09 04:39:46,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
85,2022-05-09 04:40:40,"plt.figure(figuresize=(6, 6))",TypeError: __init__() got an unexpected keyword argument 'figuresize'
86,2022-05-09 04:40:50,"plt.scatter(df['年齢'],df['G3'])",KeyError: '年齢'
87,2022-05-09 04:41:38,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
88,2022-05-09 04:41:38,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
89,2022-05-09 04:41:38,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
90,2022-05-09 04:41:45,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
91,2022-05-09 04:41:45,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
92,2022-05-09 04:41:46,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
93,2022-05-09 04:41:46,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
94,2022-05-09 04:41:50,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
95,2022-05-09 04:41:50,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
96,2022-05-09 04:41:55,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
97,2022-05-09 04:41:55,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
98,2022-05-09 04:41:56,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
99,2022-05-09 04:41:57,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
100,2022-05-09 04:41:57,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
101,2022-05-09 04:41:58,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
102,2022-05-09 04:41:59,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
103,2022-05-09 04:42:02,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
104,2022-05-09 04:42:07,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
105,2022-05-09 04:42:10,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
106,2022-05-09 04:42:16,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
107,2022-05-09 04:42:17,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
108,2022-05-09 04:42:17,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
109,2022-05-09 04:42:18,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
110,2022-05-09 04:42:19,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
111,2022-05-09 04:42:19,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
112,2022-05-09 04:42:21,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
113,2022-05-09 04:42:22,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
114,2022-05-09 04:42:23,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
115,2022-05-09 04:42:23,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
116,2022-05-09 04:42:23,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
117,2022-05-09 04:42:24,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
118,2022-05-09 04:42:24,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
119,2022-05-09 04:42:24,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
120,2022-05-09 04:42:25,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
121,2022-05-09 04:42:27,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
122,2022-05-09 04:42:29,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
123,2022-05-09 04:42:29,array([19.94203311]),NameError: name 'array' is not defined
124,2022-05-09 04:42:30,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
125,2022-05-09 04:42:32,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
126,2022-05-09 04:42:32,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
127,2022-05-09 04:42:32,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
128,2022-05-09 04:42:34,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
129,2022-05-09 04:42:35,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
130,2022-05-09 04:42:35,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
131,2022-05-09 04:42:36,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
132,2022-05-09 04:42:37,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
133,2022-05-09 04:42:41,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
134,2022-05-09 04:42:48,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
135,2022-05-09 04:42:49,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
136,2022-05-09 04:42:49,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
137,2022-05-09 04:42:51,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
138,2022-05-09 04:42:54,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
139,2022-05-09 04:42:56,"x =np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
140,2022-05-09 04:43:00,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
141,2022-05-09 04:43:03,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
142,2022-05-09 04:43:04,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
143,2022-05-09 04:43:07,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
144,2022-05-09 04:43:09,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
145,2022-05-09 04:43:11,"a, b = reg1dim(x, y)",NameError: name 'reg1dim' is not defined
146,2022-05-09 04:43:11,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
147,2022-05-09 04:43:11,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
148,2022-05-09 04:43:14,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
149,2022-05-09 04:43:17,x = np.x,AttributeError: module 'numpy' has no attribute 'x'
150,2022-05-09 04:43:25,"x = np.array[1,2,2,4,6,7]",TypeError: 'builtin_function_or_method' object is not subscriptable
151,2022-05-09 04:43:39,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
152,2022-05-09 04:45:16,"plt.plot(X,Y)",NameError: name 'X' is not defined
153,2022-05-09 04:45:29,"model.fit(x, y)","ValueError: Expected 2D array, got 1D array instead:
array=[-1].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
154,2022-05-09 04:45:52,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
155,2022-05-09 04:46:23,"print(model.coef_, model.intercept_)",AttributeError: 'LinearRegression' object has no attribute 'coef_'
156,2022-05-09 04:46:33,"print(model.coef, model.intercept_)",AttributeError: 'LinearRegression' object has no attribute 'coef'
157,2022-05-09 04:50:15,array([19.94203311]),NameError: name 'array' is not defined
158,2022-05-09 04:50:19,X,NameError: name 'X' is not defined
159,2022-05-09 04:50:26,array([19.94203311]),NameError: name 'array' is not defined
160,2022-05-09 04:50:36,print(X.shape),NameError: name 'X' is not defined
161,2022-05-09 04:52:32,prrint(X.shape),NameError: name 'prrint' is not defined
162,2022-05-09 04:55:50,y = df['じゅうたく価格'],KeyError: 'じゅうたく価格'
163,2022-05-09 04:56:08,"model.fit(x, y)","ValueError: Expected 2D array, got 1D array instead:
array=[1 2 2 4 6 7].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
164,2022-05-09 04:56:28,"print('a=', model.coef_, 'b=', model.intercepy_)",AttributeError: 'LinearRegression' object has no attribute 'intercepy_'
165,2022-05-09 04:57:05,model.predict([(4.00)]),"ValueError: Expected 2D array, got 1D array instead:
array=[4.].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
166,2022-05-09 04:57:15,"model.fit(X,y)",ValueError: Unable to convert array of bytes/strings into decimal numbers with dtype='numeric'
167,2022-05-09 04:57:37,model.predict([(4.00)]),"ValueError: Expected 2D array, got 1D array instead:
array=[4.].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
168,2022-05-09 04:57:39,model.predict([(4.00)]),"ValueError: Expected 2D array, got 1D array instead:
array=[4.].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
169,2022-05-09 04:57:44,"model.predict([(4.00,0)])","ValueError: X has 2 features, but LinearRegression is expecting 1 features as input."
170,2022-05-09 04:58:05,model.predict(),TypeError: predict() missing 1 required positional argument: 'X'
171,2022-05-09 04:58:33,model.predict(),TypeError: predict() missing 1 required positional argument: 'X'
172,2022-05-09 04:58:35,print(_pred),NameError: name '_pred' is not defined
173,2022-05-09 04:58:35,print(y_pred),NameError: name 'y_pred' is not defined
174,2022-05-09 04:58:36,print(y_pred),NameError: name 'y_pred' is not defined
175,2022-05-09 04:58:39,y_pred = model.predict(X),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
176,2022-05-09 04:58:43,print(y_pred),NameError: name 'y_pred' is not defined
177,2022-05-09 04:58:47,y_pred = model.predict(X),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
178,2022-05-09 04:58:52,print(y_pred),NameError: name 'y_pred' is not defined
179,2022-05-09 04:59:12,"model.fit(X, y)",ValueError: Unable to convert array of bytes/strings into decimal numbers with dtype='numeric'
180,2022-05-09 04:59:16,print(y_pred),NameError: name 'y_pred' is not defined
181,2022-05-09 04:59:19,print(y_pred),NameError: name 'y_pred' is not defined
182,2022-05-09 04:59:21,array([19.94203311]),NameError: name 'array' is not defined
183,2022-05-09 04:59:38,print(y_pred),NameError: name 'y_pred' is not defined
184,2022-05-09 04:59:44,array([19.94203311]),NameError: name 'array' is not defined
185,2022-05-09 04:59:44,y_pred = model.predict(X),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
186,2022-05-09 05:00:00,print(Y),NameError: name 'Y' is not defined
187,2022-05-09 05:00:13,y_pred = model.predict(X),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
188,2022-05-09 05:00:15,print(y_pred),NameError: name 'y_pred' is not defined
189,2022-05-09 05:00:33,y_pred = model.predict(X),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
190,2022-05-09 05:01:10,y_pred = model.predict(X),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
191,2022-05-09 05:01:17,y_pred = model.predict(X),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
192,2022-05-09 05:01:23,"print('a=', model.coef_, ', b=', model.intercept_)",AttributeError: 'LinearRegression' object has no attribute 'coef_'
193,2022-05-09 05:01:31,"plt.figure(figsize(7,7))",NameError: name 'figsize' is not defined
194,2022-05-09 05:01:45,"plt.figure(figuresize(6,6))",NameError: name 'figuresize' is not defined
195,2022-05-09 05:01:54,"model.predict([(4.00,)])",NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
196,2022-05-09 05:02:26,"plt.scatter(y, y_pred, coloer = 'red', alpa = 0.3)",AttributeError: 'PathCollection' object has no property 'coloer'
197,2022-05-09 05:02:35,print(Y),NameError: name 'Y' is not defined
198,2022-05-09 05:03:15,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
199,2022-05-09 05:03:44,"corr = pearsonr(df[工場], df[住宅価格])",NameError: name 'pearsonr' is not defined
200,2022-05-09 05:04:22,"corr = pearsonr(df[""工場""], df[""住宅価格""])",NameError: name 'pearsonr' is not defined
201,2022-05-09 05:04:28,"plt.fighre(figsize=(6,6))",AttributeError: module 'matplotlib.pyplot' has no attribute 'fighre'
202,2022-05-09 05:04:51,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
203,2022-05-09 05:05:11,"X = df['通勤', '教員']  # 説明変数","KeyError: ('通勤', '教員')"
204,2022-05-09 05:05:24,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
205,2022-05-09 05:05:24,from slearn.metrics import r2_score,ModuleNotFoundError: No module named 'slearn'
206,2022-05-09 05:05:43,"X = df[[""通勤"", ""教員""]]  # 説明変数","KeyError: ""['教員'] not in index"""
207,2022-05-09 05:06:53,"corr = pearsonr(df[""工場""], df[""住宅価格""])",NameError: name 'pearsonr' is not defined
208,2022-05-09 05:07:09,"plt.figure(figsiza = (6,6))",TypeError: __init__() got an unexpected keyword argument 'figsiza'
209,2022-05-09 05:07:41,df(head),NameError: name 'head' is not defined
210,2022-05-09 05:07:55,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
211,2022-05-09 05:09:01,X = df[['通勤時間']],"KeyError: ""None of [Index(['通勤時間'], dtype='object')] are in the [columns]"""
212,2022-05-09 05:09:10,X = df['通勤時間'],KeyError: '通勤時間'
213,2022-05-09 05:09:10,X = df[['通勤時間']],"KeyError: ""None of [Index(['通勤時間'], dtype='object')] are in the [columns]"""
214,2022-05-09 05:09:12,X = df[['通勤時間']]  # ひとつ選ぶ,"KeyError: ""None of [Index(['通勤時間'], dtype='object')] are in the [columns]"""
215,2022-05-09 05:09:20,"X = df[['通勤時間', '教員']]  # 説明変数","KeyError: ""None of [Index(['通勤時間', '教員'], dtype='object')] are in the [columns]"""
216,2022-05-09 05:09:26,X = df['通勤時間'],KeyError: '通勤時間'
217,2022-05-09 05:09:27,X = df['通勤時間']  # ひとつ選ぶ,KeyError: '通勤時間'
218,2022-05-09 05:09:39,X = df[['通勤時間']],"KeyError: ""None of [Index(['通勤時間'], dtype='object')] are in the [columns]"""
219,2022-05-09 05:09:52,X = df[['通勤時間']],"KeyError: ""None of [Index(['通勤時間'], dtype='object')] are in the [columns]"""
220,2022-05-09 05:10:02,X = df[['築年数']],"KeyError: ""None of [Index(['築年数'], dtype='object')] are in the [columns]"""
221,2022-05-09 05:10:30,X = df[['通勤時間']]  # ひとつ選ぶ,"KeyError: ""None of [Index(['通勤時間'], dtype='object')] are in the [columns]"""
222,2022-05-09 05:10:36,"plt.figure(fitsize=(6,6))",TypeError: __init__() got an unexpected keyword argument 'fitsize'
223,2022-05-09 05:10:40,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
224,2022-05-09 05:10:45,X = df[['価格']]  # ひとつ選ぶ,"KeyError: ""None of [Index(['価格'], dtype='object')] are in the [columns]"""
225,2022-05-09 05:10:49,X = df[['教員']]  # 説明変数,"KeyError: ""None of [Index(['教員'], dtype='object')] are in the [columns]"""
226,2022-05-09 05:10:51,X = df[['犯罪']]  # ひとつ選ぶ,"KeyError: ""None of [Index(['犯罪'], dtype='object')] are in the [columns]"""
227,2022-05-09 05:10:59,"plt.figure(figsize(6,6))",NameError: name 'figsize' is not defined
228,2022-05-09 05:11:01,X = df['犯罪']  # ひとつ選ぶ,KeyError: '犯罪'
229,2022-05-09 05:11:14,"plt.figure(figsize=(6, 6))",NameError: name 'plt' is not defined
230,2022-05-09 05:11:16,X = df[['通勤時間']],"KeyError: ""None of [Index(['通勤時間'], dtype='object')] are in the [columns]"""
231,2022-05-09 05:11:16,"plt.figure(figsize=(6, 6))",NameError: name 'plt' is not defined
232,2022-05-09 05:11:18,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
233,2022-05-09 05:11:25,y_pred = model.predect(X),AttributeError: 'LinearRegression' object has no attribute 'predect'
234,2022-05-09 05:11:35,"plt.scatter(df['部屋数'], df['住宅価格'], alpha=0.3)",NameError: name 'df' is not defined
235,2022-05-09 05:11:38,"plt.scatter(df['部屋数'], df['住宅価格'], alpha=0.3)",NameError: name 'df' is not defined
236,2022-05-09 05:11:46,"r2 = r2_scpre(y, y_pred)",NameError: name 'r2_scpre' is not defined
237,2022-05-09 05:11:50,"plt.scatter(df['部屋数'], df['住宅価格'], alpha=0.3)",NameError: name 'df' is not defined
238,2022-05-09 05:11:52,"plt.scatter(df['部屋数'], df['住宅価格'], alpha=0.3)",NameError: name 'df' is not defined
239,2022-05-09 05:11:56,"plt.scatter(df['部屋数'], df['住宅価格'], alpha=0.3)",NameError: name 'df' is not defined
240,2022-05-09 05:11:57,"plt.scatter(df['部屋数'], df['住宅価格'], alpha=0.3)",NameError: name 'df' is not defined
241,2022-05-09 05:11:59,y_pred = model.predect(X),AttributeError: 'LinearRegression' object has no attribute 'predect'
242,2022-05-09 05:12:27,X = df[['通勤時間']],"KeyError: ""None of [Index(['通勤時間'], dtype='object')] are in the [columns]"""
243,2022-05-09 05:12:27,y_pred = model.predect(X),AttributeError: 'LinearRegression' object has no attribute 'predect'
244,2022-05-09 05:12:28,,KeyboardInterrupt: 
245,2022-05-09 05:12:29,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[ 4.98  9.14  4.03  2.94  5.33  5.21 12.43 19.15 29.93 17.1  20.45 13.27
 15.71  8.26 10.26  8.47  6.58 14.67 11.69 11.28 21.02 13.83 18.72 19.88
 16.3  16.51 14.81 17.28 12.8  11.98 22.6  13.04 27.71 18.35 20.34  9.68
 11.41  8.77 10.13  4.32  1.98  4.84  5.81  7.44  9.55 10.21 14.15 18.8
 30.81 16.2  13.45  9.43  5.28  8.43 14.8   4.81  5.77  3.95  6.86  9.22
 13.15 14.44  6.73  9.5   8.05  4.67 10.24  8.1  13.09  8.79  6.72  9.88
  5.52  7.54  6.78  8.94 11.97 10.27 12.34  9.1   5.29  7.22  6.72  7.51
  9.62  6.53 12.86  8.44  5.5   5.7   8.81  8.2   8.16  6.21 10.59  6.65
 11.34  4.21  3.57  6.19  9.42  7.67 10.63 13.44 12.33 16.47 18.66 14.09
 12.27 15.55 13.   10.16 16.21 17.09 10.45 15.76 12.04 10.3  15.37 13.61
 14.37 14.27 17.93 25.41 17.58 14.81 27.26 17.19 15.39 18.34 12.6  12.26
 11.12 15.03 17.31 16.96 16.9  14.59 21.32 18.46 24.16 34.41 26.82 26.42
 29.29 27.8  16.65 29.53 28.32 21.45 14.1  13.28 12.12 15.79 15.12 15.02
 16.14  4.59  6.43  7.39  5.5   1.73  1.92  3.32 11.64  9.81  3.7  12.14
 11.1  11.32 14.43 12.03 14.69  9.04  9.64  5.33 10.11  6.29  6.92  5.04
  7.56  9.45  4.82  5.68 13.98 13.15  4.45  6.68  4.56  5.39  5.1   4.69
  2.87  5.03  4.38  2.97  4.08  8.61  6.62  4.56  4.45  7.43  3.11  3.81
  2.88 10.87 10.97 18.06 14.66 23.09 17.27 23.98 16.03  9.38 29.55  9.47
 13.51  9.69 17.92 10.5   9.71 21.46  9.93  7.6   4.14  4.63  3.13  6.36
  3.92  3.76 11.65  5.25  2.47  3.95  8.05 10.88  9.54  4.73  6.36  7.37
 11.38 12.4  11.22  5.19 12.5  18.46  9.16 10.15  9.52  6.56  5.9   3.59
  3.53  3.54  6.57  9.25  3.11  5.12  7.79  6.9   9.59  7.26  5.91 11.25
  8.1  10.45 14.79  7.44  3.16 13.65 13.    6.59  7.73  6.58  3.53  2.98
  6.05  4.16  7.19  4.85  3.76  4.59  3.01  3.16  7.85  8.23 12.93  7.14
  7.6   9.51  3.33  3.56  4.7   8.58 10.4   6.27  7.39 15.84  4.97  4.74
  6.07  9.5   8.67  4.86  6.93  8.93  6.47  7.53  4.54  9.97 12.64  5.98
 11.72  7.9   9.28 11.5  18.33 15.94 10.36 12.73  7.2   6.87  7.7  11.74
  6.12  5.08  6.15 12.79  9.97  7.34  9.09 12.43  7.83  5.68  6.75  8.01
  9.8  10.56  8.51  9.74  9.29  5.49  8.65  7.18  4.61 10.53 12.67  6.36
  5.99  5.89  5.98  5.49  7.79  4.5   8.05  5.57 17.6  13.27 11.48 12.67
  7.79 14.19 10.19 14.64  5.29  7.12 14.   13.33  3.26  3.73  2.96  9.53
  8.88 34.77 37.97 13.44 23.24 21.24 23.69 21.78 17.21 21.08 23.6  24.56
 30.63 30.81 28.28 31.99 30.62 20.85 17.11 18.76 25.68 15.17 16.35 17.12
 19.37 19.92 30.59 29.97 26.77 20.32 20.31 19.77 27.38 22.98 23.34 12.13
 26.4  19.78 10.11 21.22 34.37 20.08 36.98 29.05 25.79 26.64 20.62 22.74
 15.02 15.7  14.1  23.29 17.16 24.39 15.69 14.52 21.52 24.08 17.64 19.69
 12.03 16.22 15.17 23.27 18.05 26.45 34.02 22.88 22.11 19.52 16.59 18.85
 23.79 23.98 17.79 16.44 18.13 19.31 17.44 17.73 17.27 16.74 18.71 18.13
 19.01 16.94 16.23 14.7  16.42 14.65 13.99 10.29 13.22 14.13 17.15 21.32
 18.13 14.76 16.29 12.87 14.36 11.66 18.14 24.1  18.68 24.91 18.03 13.11
 10.74  7.74  7.01 10.42 13.34 10.58 14.98 11.45 18.06 23.97 29.68 18.07
 13.35 12.01 13.59 17.6  21.14 14.1  12.92 15.1  14.33  9.67  9.08  5.64
  6.48  7.88].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
246,2022-05-09 05:12:53,"X = df[['築年'],['通勤']]","TypeError: '(['築年'], ['通勤'])' is an invalid key"
247,2022-05-09 05:12:59,X = df[['川辺']] #一つ選ぶ,"KeyError: ""None of [Index(['川辺'], dtype='object')] are in the [columns]"""
248,2022-05-09 05:13:03,"plt.scatter(y,y_predf, color='red',alpha=0.3)",NameError: name 'y_predf' is not defined
249,2022-05-09 05:13:10,X = df[['低所得']],"KeyError: ""None of [Index(['低所得'], dtype='object')] are in the [columns]"""
250,2022-05-09 05:13:20,X = df[['通勤時間']],"KeyError: ""None of [Index(['通勤時間'], dtype='object')] are in the [columns]"""
251,2022-05-09 05:13:36,model=Lineararegression(),NameError: name 'Lineararegression' is not defined
252,2022-05-09 05:13:51,X = df[['黒人']],"KeyError: ""None of [Index(['黒人'], dtype='object')] are in the [columns]"""
253,2022-05-09 05:13:51,X = df['通勤時間'],KeyError: '通勤時間'
254,2022-05-09 05:14:13,X = df[['川辺']],"KeyError: ""None of [Index(['川辺'], dtype='object')] are in the [columns]"""
255,2022-05-09 05:14:52,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
256,2022-05-09 05:15:01,model = LinearRegression(x),TypeError: __init__() takes 1 positional argument but 2 were given
257,2022-05-09 05:15:17,X = df[['教員']]  # 説明変数,"KeyError: ""None of [Index(['教員'], dtype='object')] are in the [columns]"""
258,2022-05-09 05:15:20,X=df[['学校']],"KeyError: ""None of [Index(['学校'], dtype='object')] are in the [columns]"""
259,2022-05-09 05:15:24,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
260,2022-05-09 05:15:47,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
261,2022-05-09 05:16:18,y_pred=model.preddict(X),AttributeError: 'LinearRegression' object has no attribute 'preddict'
262,2022-05-09 05:16:28,y_pred=model.preddict(X),AttributeError: 'LinearRegression' object has no attribute 'preddict'
263,2022-05-09 05:16:48,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
264,2022-05-09 05:17:07,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[ 4.09    4.9671  4.9671  6.0622  6.0622  6.0622  5.5605  5.9505  6.0821
  6.5921  6.3467  6.2267  5.4509  4.7075  4.4619  4.4986  4.4986  4.2579
  3.7965  3.7965  3.7979  4.0123  3.9769  4.0952  4.3996  4.4546  4.682
  4.4534  4.4547  4.239   4.233   4.175   3.99    3.7872  3.7598  3.3603
  3.3779  3.9342  3.8473  5.4011  5.4011  5.7209  5.7209  5.7209  5.7209
  5.1004  5.1004  5.6894  5.87    6.0877  6.8147  6.8147  6.8147  6.8147
  7.3197  8.6966  9.1876  8.3248  7.8148  6.932   7.2254  6.8185  7.2255
  7.9809  9.2229  6.6115  6.6115  6.498   6.498   6.498   5.2873  5.2873
  5.2873  5.2873  4.2515  4.5026  4.0522  4.0905  5.0141  4.5026  5.4007
  5.4007  5.4007  5.4007  4.7794  4.4377  4.4272  3.7476  3.4217  3.4145
  3.0923  3.0921  3.6659  3.6659  3.615   3.4952  3.4952  3.4952  3.4952
  3.4952  2.7778  2.8561  2.7147  2.7147  2.421   2.1069  2.211   2.1224
  2.4329  2.5451  2.7778  2.6775  2.3534  2.548   2.2565  2.4631  2.7301
  2.7474  2.4775  2.7592  2.2577  2.1974  2.0869  1.9444  2.0063  1.9929
  1.7572  1.7883  1.8125  1.9799  2.1185  2.271   2.3274  2.4699  2.346
  2.1107  1.9669  1.8498  1.6686  1.6687  1.6119  1.4394  1.3216  1.4118
  1.3459  1.4191  1.5166  1.4608  1.5296  1.5257  1.618   1.5916  1.6102
  1.6232  1.7494  1.7455  1.7364  1.8773  1.7573  1.7659  1.7984  1.9709
  2.0407  2.162   2.422   2.2834  2.0459  2.4259  2.1     2.2625  2.4259
  2.3887  2.5961  2.6463  2.7019  3.1323  3.5549  3.3175  2.9153  2.829
  2.741   2.5979  2.7006  2.847   2.9879  3.2797  3.1992  3.7886  4.5667
  4.5667  6.4798  6.4798  6.4798  6.2196  6.2196  5.6484  7.309   7.309
  7.309   7.6534  7.6534  6.27    6.27    5.118   5.118   3.9454  4.3549
  4.3549  4.2392  3.875   3.8771  3.665   3.6526  3.9454  3.5875  3.9454
  3.1121  3.4211  2.8893  3.3633  2.8617  3.048   3.2721  3.2721  2.8944
  2.8944  3.2157  3.2157  3.3751  3.3751  3.6715  3.6715  3.8384  3.6519
  3.6519  3.6519  4.148   4.148   6.1899  6.1899  6.3361  6.3361  7.0355
  7.0355  7.9549  7.9549  8.0555  8.0555  7.8265  7.8265  7.3967  7.3967
  8.9067  8.9067  9.2203  9.2203  6.3361  1.801   1.8946  2.0107  2.1121
  2.1398  2.2885  2.0788  1.9301  1.9865  2.1329  2.4216  2.872   3.9175
  4.429   4.429   3.9175  4.3665  4.0776  4.2673  4.7872  4.8628  4.1403
  4.1007  4.6947  5.2447  5.2119  5.885   7.3073  7.3073  9.0892  7.3172
  7.3172  7.3172  5.1167  5.1167  5.1167  5.5027  5.5027  5.9604  5.9604
  6.32    7.8278  7.8278  7.8278  5.4917  5.4917  5.4917  4.022   3.37
  3.0992  3.1827  3.3175  3.1025  2.5194  2.6403  2.834   3.2628  3.6023
  3.945   3.9986  4.0317  3.5325  4.0019  4.5404  4.5404  4.7211  4.7211
  4.7211  5.4159  5.4159  5.4159  5.2146  5.2146  5.8736  6.6407  6.6407
  6.4584  6.4584  5.9853  5.2311  5.615   4.8122  4.8122  4.8122  7.0379
  6.2669  5.7321  6.4654  8.0136  8.0136  8.5353  8.344   8.7921  8.7921
 10.7103 10.7103 12.1265 10.5857 10.5857  2.1222  2.5052  2.7227  2.5091
  2.5182  2.2955  2.1036  1.9047  1.9047  1.6132  1.7523  1.5106  1.3325
  1.3567  1.2024  1.1691  1.1296  1.1742  1.137   1.3163  1.3449  1.358
  1.3861  1.3861  1.4165  1.5192  1.5804  1.5331  1.4395  1.4261  1.4672
  1.5184  1.5895  1.7281  1.9265  2.1678  1.77    1.7912  1.7821  1.7257
  1.6768  1.6334  1.4896  1.5004  1.5888  1.5741  1.639   1.7028  1.6074
  1.4254  1.1781  1.2852  1.4547  1.4655  1.413   1.5275  1.5539  1.5894
  1.6582  1.8347  1.8195  1.6475  1.8026  1.794   1.8589  1.8746  1.9512
  2.0218  2.0635  1.9096  1.9976  1.8629  1.9356  1.9682  2.0527  2.0882
  2.2004  2.3158  2.2222  2.1247  2.0026  1.9142  1.8206  1.8172  1.8662
  2.0651  2.0048  1.9784  1.8956  1.9879  2.072   2.198   2.2616  2.185
  2.3236  2.3552  2.3682  2.4527  2.4961  2.4358  2.5806  2.7792  2.7831
  2.7175  2.5975  2.5671  2.7344  2.8016  2.9634  3.0665  2.8715  2.5403
  2.9084  2.8237  3.0334  3.0993  2.8965  2.5329  2.4298  2.206   2.3053
  2.1007  2.1705  1.9512  3.4242  3.3317  3.4106  4.0983  3.724   3.9917
  3.5459  3.1523  1.8209  1.7554  1.8226  1.8681  2.1099  2.3817  2.3817
  2.7986  2.7986  2.8927  2.4091  2.3999  2.4982  2.4786  2.2875  2.1675
  2.3889  2.505 ].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
265,2022-05-09 05:17:10,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
266,2022-05-09 05:17:17,"X = df[['通勤', '教員']]  # 二つ選ぶ","KeyError: ""['教員'] not in index"""
267,2022-05-09 05:17:20,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
268,2022-05-09 05:17:20,"X = df[['通勤', '教員']]   # ひとつ選ぶ","KeyError: ""['教員'] not in index"""
269,2022-05-09 05:17:32,"r2 = r2_score(y, y_pred)",NameError: name 'r2_score' is not defined
270,2022-05-09 05:17:37,y_pred = model.predict(X),"ValueError: X has 2 features, but LinearRegression is expecting 1 features as input."
271,2022-05-09 05:17:43,"sns.kdeplot(data=df, x=""工場"", y=""住宅価格"", shade=True, thresh=0.05)",NameError: name 'sns' is not defined
272,2022-05-09 05:17:46,"X = df[['通勤', '教員']]  # 一つ選ぶ","KeyError: ""['教員'] not in index"""
273,2022-05-09 05:18:05,"X = df[['通勤','教員費']]  # ひとつ選ぶ","KeyError: ""['教員費'] not in index"""
274,2022-05-09 05:18:06,"r2 = r2_score(y, y_pred)",NameError: name 'r2_score' is not defined
275,2022-05-09 05:18:10,"X = df[['通勤'], ['教員比']]  # ひとつ選ぶ","TypeError: '(['通勤'], ['教員比'])' is an invalid key"
276,2022-05-09 05:18:18,"X = df['通勤','教員比']","KeyError: ('通勤', '教員比')"
277,2022-05-09 05:18:19,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
278,2022-05-09 05:18:39,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
279,2022-05-09 05:18:55,"X = df[['犯罪率','築年数']]","KeyError: ""['築年数'] not in index"""
280,2022-05-09 05:18:59,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[296 242 242 222 222 222 311 311 311 311 311 311 311 307 307 307 307 307
 307 307 307 307 307 307 307 307 307 307 307 307 307 307 307 307 307 279
 279 279 279 252 252 233 233 233 233 233 233 233 233 233 243 243 243 243
 469 226 313 256 284 284 284 284 284 284 216 337 337 345 345 345 305 305
 305 305 398 398 398 398 398 398 281 281 281 281 247 247 247 247 270 270
 270 270 270 270 270 276 276 276 276 276 384 384 384 384 384 384 384 384
 384 384 384 432 432 432 432 432 432 432 432 432 188 188 188 188 188 188
 188 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 403 403
 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403
 403 403 403 403 403 403 403 403 403 403 296 296 296 296 296 296 296 193
 193 193 193 193 193 193 193 398 398 398 398 398 398 265 265 255 329 329
 329 402 402 348 348 224 224 277 277 277 277 277 277 277 277 277 277 277
 276 276 276 276 307 307 307 307 307 307 307 307 307 307 307 307 307 307
 307 307 307 307 300 300 300 300 300 300 330 330 330 330 330 330 330 330
 330 330 315 315 244 264 264 264 264 264 264 264 264 264 264 264 264 223
 223 223 223 223 254 254 254 254 254 216 216 216 216 198 285 300 241 293
 293 293 245 245 245 289 289 289 289 289 358 358 358 329 329 329 222 222
 222 222 304 304 304 304 304 304 304 304 304 304 304 304 287 287 287 287
 287 287 287 287 430 430 430 304 304 224 224 224 224 224 224 224 224 284
 422 370 370 352 352 351 280 335 335 411 411 187 334 334 666 666 666 666
 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666
 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666
 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666
 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666
 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666
 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666
 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666
 666 666 711 711 711 711 711 391 391 391 391 391 391 391 391 273 273 273
 273 273].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
281,2022-05-09 05:19:20,"sns.kdeplot(data=df, x=""工場"", y=""住宅価格"", shade=True, thresh=0.05)",NameError: name 'sns' is not defined
282,2022-05-09 05:19:26,"X = df[['資産','築年']]","KeyError: ""['資産'] not in index"""
283,2022-05-09 05:19:38,"sns.jointplot(x=""犯罪率"",y=""住宅価格"",data=df)",NameError: name 'sns' is not defined
284,2022-05-09 05:19:41,"X = df[['通勤', '教員比']]  # 説明変数",NameError: name 'df' is not defined
285,2022-05-09 05:19:49,"X = df[['通勤', '教員比']]  # 説明変数",NameError: name 'df' is not defined
286,2022-05-09 05:19:57,"r2 = r2_score(y, y_pred)",NameError: name 'y' is not defined
287,2022-05-09 05:20:23,"X = df[['犯罪', '工場']]  # 説明変数","KeyError: ""['犯罪'] not in index"""
288,2022-05-09 05:20:29,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
289,2022-05-09 05:20:31,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
290,2022-05-09 05:20:32,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
291,2022-05-09 05:20:35,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
292,2022-05-09 05:20:40,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
293,2022-05-09 05:20:45,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
294,2022-05-09 05:21:01,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
295,2022-05-09 05:21:16,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
296,2022-05-09 05:21:28,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
297,2022-05-09 05:21:30,"X = df[['低所得率', '川辺']]","KeyError: ""['川辺'] not in index"""
298,2022-05-09 05:21:41,X = df[['資産']]  # ひとつ選ぶ,"KeyError: ""None of [Index(['資産'], dtype='object')] are in the [columns]"""
299,2022-05-09 05:21:47,"X = df[['通勤', '教員']]  #説明変数","KeyError: ""['教員'] not in index"""
300,2022-05-09 05:22:07,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
301,2022-05-09 05:22:19,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
302,2022-05-09 05:22:30,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
303,2022-05-09 05:22:58,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
304,2022-05-09 05:22:59,"sns.kdeplot(data=df, x=""工場"", y=""住宅価格"", shade=True, thresh=0.05)",KeyboardInterrupt: 
305,2022-05-09 05:23:05,"X = df['資産税','教員比']","KeyError: ('資産税', '教員比')"
306,2022-05-09 05:23:21,"X = df[['低所得理', '資産税']] ","KeyError: ""['低所得理'] not in index"""
307,2022-05-09 05:23:33,"X = df['資産税','教員比']","KeyError: ('資産税', '教員比')"
308,2022-05-09 05:23:43,X = df[['川辺']]  # ひとつ選ぶ,"KeyError: ""None of [Index(['川辺'], dtype='object')] are in the [columns]"""
309,2022-05-09 05:23:43,"X = df[['部屋数', '築年数']]","KeyError: ""['築年数'] not in index"""
310,2022-05-09 05:23:47,column,NameError: name 'column' is not defined
311,2022-05-09 05:23:52,columns,NameError: name 'columns' is not defined
312,2022-05-09 05:24:16,"X = df[['緑地', '教員']]","KeyError: ""['教員'] not in index"""
313,2022-05-09 05:24:19,"X = df[['緑地', '川辺']]  # 説明変数","KeyError: ""['川辺'] not in index"""
314,2022-05-09 05:24:55,"X = df['資産税','教員比']","KeyError: ('資産税', '教員比')"
315,2022-05-09 05:25:07,"X = df[['低所得者','部屋数']]","KeyError: ""['低所得者'] not in index"""
316,2022-05-09 05:25:07,df.columns -1,TypeError: unsupported operand type(s) for -: 'str' and 'int'
317,2022-05-09 05:25:39,X = df[['川辺']] #一つ選ぶ,"KeyError: ""None of [Index(['川辺'], dtype='object')] are in the [columns]"""
318,2022-05-09 05:26:13,"X = df[['低所得率','','交通']]  # ひとつ選ぶ","KeyError: ""[''] not in index"""
319,2022-05-09 05:26:14,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
320,2022-05-09 05:26:41,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
321,2022-05-09 05:26:42,"X = df[['川辺', '通勤']] ","KeyError: ""['川辺'] not in index"""
322,2022-05-09 05:26:49,"model.fit(X,y)",TypeError: fit() missing 1 required positional argument: 'y'
323,2022-05-09 05:27:36,X = df[['川辺']],"KeyError: ""None of [Index(['川辺'], dtype='object')] are in the [columns]"""
324,2022-05-09 05:27:36,"sns.kdeplot(data=df, x=""工場"", y=""住宅価格"", shade=True, thresh=0.05)",KeyboardInterrupt: 
325,2022-05-09 05:27:39,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
326,2022-05-09 05:27:49,  print(column+1),"TypeError: can only concatenate str (not ""int"") to str"
327,2022-05-09 05:28:01,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
328,2022-05-09 05:28:03,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
329,2022-05-09 05:28:04,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
330,2022-05-09 05:28:47,for column in len(df.columns):,TypeError: 'int' object is not iterable
331,2022-05-09 05:28:55,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
332,2022-05-09 05:29:30,  X = df[[col]],"KeyError: ""None of [Index(['住'], dtype='object')] are in the [columns]"""
333,2022-05-09 05:29:33,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
334,2022-05-09 05:29:35,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
335,2022-05-09 05:29:50,  y_pred = model.predict(X),"ValueError: X has 1 features, but LinearRegression is expecting 2 features as input."
336,2022-05-09 05:30:08,"X = df['部屋数','低所得']","KeyError: ('部屋数', '低所得')"
337,2022-05-09 05:30:20,"X = df[['部屋数宇','築年']]","KeyError: ""['部屋数宇'] not in index"""
338,2022-05-09 05:30:28,"X = df['部屋数','低所得率']","KeyError: ('部屋数', '低所得率')"
339,2022-05-09 05:31:21,model = LinearRegression(x),TypeError: __init__() takes 1 positional argument but 2 were given
340,2022-05-09 05:31:37,model = LinearRegression(x),TypeError: __init__() takes 1 positional argument but 2 were given
341,2022-05-09 05:31:49,X = df[['犯罪数']],"KeyError: ""None of [Index(['犯罪数'], dtype='object')] are in the [columns]"""
342,2022-05-09 05:31:50,print(r2.max()),AttributeError: 'list' object has no attribute 'max'
343,2022-05-09 05:32:02,"X=df[['低所得率','通年']] ","KeyError: ""['通年'] not in index"""
344,2022-05-09 05:32:14,"X = df[['部屋数', '教育比', '資産税']]","KeyError: ""['教育比'] not in index"""
345,2022-05-09 05:32:46,"X = df[['部屋数', '築年数']]  # 説明変数","KeyError: ""['築年数'] not in index"""
346,2022-05-09 05:32:55,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
347,2022-05-09 05:32:57,X = df[['低所得理宇t']]  # ひとつ選ぶ,"KeyError: ""None of [Index(['低所得理宇t'], dtype='object')] are in the [columns]"""
348,2022-05-09 05:33:20,model=LinearRegression(x),TypeError: __init__() takes 1 positional argument but 2 were given
349,2022-05-09 05:33:27,"X = df(['通勤', '教員'])  # 説明変数",TypeError: 'DataFrame' object is not callable
350,2022-05-09 05:33:40,model=LinearRegression(x),TypeError: __init__() takes 1 positional argument but 2 were given
351,2022-05-09 05:33:55,"X = df['通勤', '教員']  # 説明変数","KeyError: ('通勤', '教員')"
352,2022-05-09 05:34:07,"X = df['通勤', '教員比']  # 説明変数","KeyError: ('通勤', '教員比')"
353,2022-05-09 05:34:25,model = LinearRegression(x),TypeError: __init__() takes 1 positional argument but 2 were given
354,2022-05-09 05:34:44,y_pred = model.predict(x),"ValueError: Expected 2D array, got 1D array instead:
array=[0.         0.88888889 1.77777778 2.66666667 3.55555556 4.44444444
 5.33333333 6.22222222 7.11111111 8.        ].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
355,2022-05-09 05:34:51,"X = df[['部屋数','低所得率','交通「']]","KeyError: ""['交通「'] not in index"""
356,2022-05-09 05:35:01,"X = df[['通勤', '教員']]  # 説明変数","KeyError: ""['教員'] not in index"""
357,2022-05-09 05:35:02,"r2 = r2_score(y, y_pred)",NameError: name 'r2_score' is not defined
358,2022-05-09 05:35:41,"model.fit(X,y)",TypeError: fit() missing 1 required positional argument: 'y'
359,2022-05-09 05:35:55,"X = df[['部屋数'], ['低所得率']]  # ひとつ選ぶ","TypeError: '(['部屋数'], ['低所得率'])' is an invalid key"
360,2022-05-09 05:36:22,"    rho = corr(df[column], df['住宅価格'])",NameError: name 'corr' is not defined
361,2022-05-09 05:36:40,"X = df[['低所得率','交通','通勤','教員比','築年','資産税','大気汚染','川辺','部屋数']] ","KeyError: ""['川辺'] not in index"""
362,2022-05-09 05:36:50,"X = df['部屋数', '低所得率']  # ひとつ選ぶ","KeyError: ('部屋数', '低所得率')"
363,2022-05-09 05:36:56,"    rho = corr(df[column], df['住宅価格'])",NameError: name 'corr' is not defined
364,2022-05-09 05:36:59,  for column2 in df.column[:-1]:,AttributeError: 'DataFrame' object has no attribute 'column'
365,2022-05-09 05:36:59,"    rho = corr(df[column], df['住宅価格'])",NameError: name 'corr' is not defined
366,2022-05-09 05:38:00,"    rho = corr(df[column], df['住宅価格'])",NameError: name 'corr' is not defined
367,2022-05-09 05:38:08,"    rho = corr(df[column], df['住宅価格'])",NameError: name 'corr' is not defined
368,2022-05-09 05:38:10,"    rho = corr(df[column], df[column],df['住宅価格'])",NameError: name 'corr' is not defined
369,2022-05-09 05:38:20,"N,A,X,Y=int(input())",ValueError: invalid literal for int() with base 10: '5 3 20 15'
370,2022-05-09 05:38:23,"model.fit(X,y)",TypeError: fit() missing 1 required positional argument: 'y'
371,2022-05-09 05:38:38,"  model.fit(X, y) #学習させるfit","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
372,2022-05-09 05:38:42,"    rho = corr(df[column], df[column],df['住宅価格'])",TypeError: corr() takes 2 positional arguments but 3 were given
373,2022-05-09 05:38:58,"    rho = corr(df[column], df['犯罪率'])",NameError: name 'corr' is not defined
374,2022-05-09 05:38:59,"    X = df[[column1], [column2]]  # 説明変数","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
375,2022-05-09 05:39:00,"print(model.coef_, model.intercept_)",AttributeError: type object 'LinearRegression' has no attribute 'coef_'
376,2022-05-09 05:39:36,"    rho = corr(df[column], df['住宅価格'])",NameError: name 'corr' is not defined
377,2022-05-09 05:40:00,"x = x.reshape(-1, 1) # sklearn 用に変形",AttributeError: 'list' object has no attribute 'reshape'
378,2022-05-09 05:40:00,"    rho = corr(df[column], df['犯罪率'])",NameError: name 'corr' is not defined
379,2022-05-09 05:40:04,"    rho = corr(df[column,column], df['住宅価格'])","KeyError: ('犯罪率', '犯罪率')"
380,2022-05-09 05:40:06,"    r2 = r2_score( df['住宅価格'], df[y_pred])","KeyError: ""None of [Float64Index([ 25.21793429676885, 25.270782015721192,  31.50246705836258,\n              30.185849230513508, 31.401190946944883, 25.552868727607336,\n              20.891325739639296,  22.19639067003541,  17.78363987413358,\n              20.826072493119494,\n              ...\n               14.66067806066685, 17.955967009917014, 19.791214568286538,\n              16.120719451547497,  19.85646781480634, 24.700782434684054,\n              20.842684234200572, 27.824781611819727,  26.34027025349415,\n              20.108585210852763],\n             dtype='float64', length=506)] are in the [columns]"""
381,2022-05-09 05:40:14,"    rho = corr(df[column], df['犯罪率'])",NameError: name 'corr' is not defined
382,2022-05-09 05:40:32,"    rho = corr(df[column], df['住宅価格'])",NameError: name 'corr' is not defined
383,2022-05-09 05:40:45,"X = df[['部屋巣', '低所得率']]  # 説明変数　二つ選ぶ","KeyError: ""['部屋巣'] not in index"""
384,2022-05-09 05:41:00,"    rho = corr(df[column], df['住宅価格'])",NameError: name 'corr' is not defined
385,2022-05-09 05:41:05,"print(corr(df['築年'], df['住宅価格']))",NameError: name 'corr' is not defined
386,2022-05-09 05:41:24,"    rho = corr(df[column], df['住宅価格'])",NameError: name 'corr' is not defined
387,2022-05-09 05:41:33,"    rho = corr(df[column1,column2], df['住宅価格'])",NameError: name 'column1' is not defined
388,2022-05-09 05:41:35,"    rho = corr(df[column], df['住宅価格'])",NameError: name 'corr' is not defined
389,2022-05-09 05:41:36,"    X = df[[column],[column2]]","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
390,2022-05-09 05:41:50,"  X = df[[column, column+1]]","TypeError: can only concatenate str (not ""int"") to str"
391,2022-05-09 05:41:52,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
392,2022-05-09 05:41:54,X = df[column],NameError: name 'column' is not defined
393,2022-05-09 05:42:01,    plt.xlabel(f'{column} ({rho:0.4f})'),NameError: name 'rho' is not defined
394,2022-05-09 05:42:09,"    X = df[[df[i], df[n]]] ","KeyError: ""None of [Index([(0.00632, 0.02731, 0.02729, 0.03237, 0.06905, 0.02985, 0.08829, 0.14455, 0.21124, 0.17004, 0.22489, 0.11747, 0.09378, 0.62976, 0.63796, 0.62739, 1.05393, 0.7842, 0.80271, 0.7258, 1.25179, 0.85204, 1.23247, 0.98843, 0.75026, 0.84054, 0.67191, 0.95577, 0.77299, 1.00245, 1.13081, 1.35472, 1.38799, 1.15172, 1.61282, 0.06417, 0.09744, 0.08014, 0.17505, 0.02763, 0.03359, 0.12744, 0.1415, 0.15936, 0.12269, 0.17142, 0.18836, 0.22927, 0.25387, 0.21977, 0.08873, 0.04337, 0.0536, 0.04981, 0.0136, 0.01311, 0.02055, 0.01432, 0.15445, 0.10328, 0.14932, 0.17171, 0.11027, 0.1265, 0.01951, 0.03584, 0.04379, 0.05789, 0.13554, 0.12816, 0.08826, 0.15876, 0.09164, 0.19539, 0.07896, 0.09512, 0.10153, 0.08707, 0.05646, 0.08387, 0.04113, 0.04462, 0.03659, 0.03551, 0.05059, 0.05735, 0.05188, 0.07151, 0.0566, 0.05302, 0.04684, 0.03932, 0.04203, 0.02875, 0.04294, 0.12204, 0.11504, 0.12083, 0.08187, 0.0686, ...), (0.00632, 0.02731, 0.02729, 0.03237, 0.06905, 0.02985, 0.08829, 0.14455, 0.21124, 0.17004, 0.22489, 0.11747, 0.09378, 0.62976, 0.63796, 0.62739, 1.05393, 0.7842, 0.80271, 0.7258, 1.25179, 0.85204, 1.23247, 0.98843, 0.75026, 0.84054, 0.67191, 0.95577, 0.77299, 1.00245, 1.13081, 1.35472, 1.38799, 1.15172, 1.61282, 0.06417, 0.09744, 0.08014, 0.17505, 0.02763, 0.03359, 0.12744, 0.1415, 0.15936, 0.12269, 0.17142, 0.18836, 0.22927, 0.25387, 0.21977, 0.08873, 0.04337, 0.0536, 0.04981, 0.0136, 0.01311, 0.02055, 0.01432, 0.15445, 0.10328, 0.14932, 0.17171, 0.11027, 0.1265, 0.01951, 0.03584, 0.04379, 0.05789, 0.13554, 0.12816, 0.08826, 0.15876, 0.09164, 0.19539, 0.07896, 0.09512, 0.10153, 0.08707, 0.05646, 0.08387, 0.04113, 0.04462, 0.03659, 0.03551, 0.05059, 0.05735, 0.05188, 0.07151, 0.0566, 0.05302, 0.04684, 0.03932, 0.04203, 0.02875, 0.04294, 0.12204, 0.11504, 0.12083, 0.08187, 0.0686, ...)], dtype='object')] are in the [columns]"""
395,2022-05-09 05:42:14,"    model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
396,2022-05-09 05:42:18,"    model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
397,2022-05-09 05:42:26,"corr = pearsonr(df['工場'], df['住宅価格'])",NameError: name 'pearsonr' is not defined
398,2022-05-09 05:42:29,"  X = df[[column1], ['犯罪率']]  # 説明変数","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
399,2022-05-09 05:42:53,"  model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
400,2022-05-09 05:42:54,"    model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
401,2022-05-09 05:42:55,for column in df.column[:-1]:,AttributeError: 'DataFrame' object has no attribute 'column'
402,2022-05-09 05:42:58,    y_pred = model.predict(X),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
403,2022-05-09 05:43:17,  X = df[columns],NameError: name 'columns' is not defined
404,2022-05-09 05:43:20,"    X = df[[i],[ n]] ","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
405,2022-05-09 05:43:25,"    X = df[[i],[n]] ","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
406,2022-05-09 05:43:29,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[ 4.98  9.14  4.03  2.94  5.33  5.21 12.43 19.15 29.93 17.1  20.45 13.27
 15.71  8.26 10.26  8.47  6.58 14.67 11.69 11.28 21.02 13.83 18.72 19.88
 16.3  16.51 14.81 17.28 12.8  11.98 22.6  13.04 27.71 18.35 20.34  9.68
 11.41  8.77 10.13  4.32  1.98  4.84  5.81  7.44  9.55 10.21 14.15 18.8
 30.81 16.2  13.45  9.43  5.28  8.43 14.8   4.81  5.77  3.95  6.86  9.22
 13.15 14.44  6.73  9.5   8.05  4.67 10.24  8.1  13.09  8.79  6.72  9.88
  5.52  7.54  6.78  8.94 11.97 10.27 12.34  9.1   5.29  7.22  6.72  7.51
  9.62  6.53 12.86  8.44  5.5   5.7   8.81  8.2   8.16  6.21 10.59  6.65
 11.34  4.21  3.57  6.19  9.42  7.67 10.63 13.44 12.33 16.47 18.66 14.09
 12.27 15.55 13.   10.16 16.21 17.09 10.45 15.76 12.04 10.3  15.37 13.61
 14.37 14.27 17.93 25.41 17.58 14.81 27.26 17.19 15.39 18.34 12.6  12.26
 11.12 15.03 17.31 16.96 16.9  14.59 21.32 18.46 24.16 34.41 26.82 26.42
 29.29 27.8  16.65 29.53 28.32 21.45 14.1  13.28 12.12 15.79 15.12 15.02
 16.14  4.59  6.43  7.39  5.5   1.73  1.92  3.32 11.64  9.81  3.7  12.14
 11.1  11.32 14.43 12.03 14.69  9.04  9.64  5.33 10.11  6.29  6.92  5.04
  7.56  9.45  4.82  5.68 13.98 13.15  4.45  6.68  4.56  5.39  5.1   4.69
  2.87  5.03  4.38  2.97  4.08  8.61  6.62  4.56  4.45  7.43  3.11  3.81
  2.88 10.87 10.97 18.06 14.66 23.09 17.27 23.98 16.03  9.38 29.55  9.47
 13.51  9.69 17.92 10.5   9.71 21.46  9.93  7.6   4.14  4.63  3.13  6.36
  3.92  3.76 11.65  5.25  2.47  3.95  8.05 10.88  9.54  4.73  6.36  7.37
 11.38 12.4  11.22  5.19 12.5  18.46  9.16 10.15  9.52  6.56  5.9   3.59
  3.53  3.54  6.57  9.25  3.11  5.12  7.79  6.9   9.59  7.26  5.91 11.25
  8.1  10.45 14.79  7.44  3.16 13.65 13.    6.59  7.73  6.58  3.53  2.98
  6.05  4.16  7.19  4.85  3.76  4.59  3.01  3.16  7.85  8.23 12.93  7.14
  7.6   9.51  3.33  3.56  4.7   8.58 10.4   6.27  7.39 15.84  4.97  4.74
  6.07  9.5   8.67  4.86  6.93  8.93  6.47  7.53  4.54  9.97 12.64  5.98
 11.72  7.9   9.28 11.5  18.33 15.94 10.36 12.73  7.2   6.87  7.7  11.74
  6.12  5.08  6.15 12.79  9.97  7.34  9.09 12.43  7.83  5.68  6.75  8.01
  9.8  10.56  8.51  9.74  9.29  5.49  8.65  7.18  4.61 10.53 12.67  6.36
  5.99  5.89  5.98  5.49  7.79  4.5   8.05  5.57 17.6  13.27 11.48 12.67
  7.79 14.19 10.19 14.64  5.29  7.12 14.   13.33  3.26  3.73  2.96  9.53
  8.88 34.77 37.97 13.44 23.24 21.24 23.69 21.78 17.21 21.08 23.6  24.56
 30.63 30.81 28.28 31.99 30.62 20.85 17.11 18.76 25.68 15.17 16.35 17.12
 19.37 19.92 30.59 29.97 26.77 20.32 20.31 19.77 27.38 22.98 23.34 12.13
 26.4  19.78 10.11 21.22 34.37 20.08 36.98 29.05 25.79 26.64 20.62 22.74
 15.02 15.7  14.1  23.29 17.16 24.39 15.69 14.52 21.52 24.08 17.64 19.69
 12.03 16.22 15.17 23.27 18.05 26.45 34.02 22.88 22.11 19.52 16.59 18.85
 23.79 23.98 17.79 16.44 18.13 19.31 17.44 17.73 17.27 16.74 18.71 18.13
 19.01 16.94 16.23 14.7  16.42 14.65 13.99 10.29 13.22 14.13 17.15 21.32
 18.13 14.76 16.29 12.87 14.36 11.66 18.14 24.1  18.68 24.91 18.03 13.11
 10.74  7.74  7.01 10.42 13.34 10.58 14.98 11.45 18.06 23.97 29.68 18.07
 13.35 12.01 13.59 17.6  21.14 14.1  12.92 15.1  14.33  9.67  9.08  5.64
  6.48  7.88].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
407,2022-05-09 05:43:45,  print(column),NameError: name 'column' is not defined
408,2022-05-09 05:44:04,    y_pred = model.predict(X),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
409,2022-05-09 05:44:22,"X = df['通勤', '教員比']","KeyError: ('通勤', '教員比')"
410,2022-05-09 05:44:26,"    model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
411,2022-05-09 05:44:39,"model.fit(X,y)",TypeError: fit() missing 1 required positional argument: 'y'
412,2022-05-09 05:44:47,"    X = df[[column],[column]]","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
413,2022-05-09 05:44:50,"    model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
414,2022-05-09 05:44:54,  print(column),NameError: name 'column' is not defined
415,2022-05-09 05:44:54,"  X = df[[column, int(column+1)]]","TypeError: can only concatenate str (not ""int"") to str"
416,2022-05-09 05:45:01,"    model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
417,2022-05-09 05:45:07,"  print(f'{clumn}決定係数(R2):', r2)",NameError: name 'clumn' is not defined
418,2022-05-09 05:45:10,"  model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
419,2022-05-09 05:45:27,  X = df[[column]],NameError: name 'column' is not defined
420,2022-05-09 05:45:34,for column in de.columns[:-1]:,NameError: name 'de' is not defined
421,2022-05-09 05:45:37,"  model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
422,2022-05-09 05:45:46,  print(colum),NameError: name 'colum' is not defined
423,2022-05-09 05:45:47,"    X = df[[[column],[column]]]","KeyError: ""None of [Index([('犯罪率',), ('犯罪率',)], dtype='object')] are in the [columns]"""
424,2022-05-09 05:45:49,for column in de.columns[:-1]:,NameError: name 'de' is not defined
425,2022-05-09 05:45:50,  X = df[[coloumn]]  # 説明変数,NameError: name 'coloumn' is not defined
426,2022-05-09 05:45:55,for column in d.columns[:-1]:,NameError: name 'd' is not defined
427,2022-05-09 05:46:01,for column in d.columns[:-1]:,NameError: name 'd' is not defined
428,2022-05-09 05:46:02,  X = df[[columns]],NameError: name 'columns' is not defined
429,2022-05-09 05:46:08,  X = df[['column']]  # ひとつ選ぶ,"KeyError: ""None of [Index(['column'], dtype='object')] are in the [columns]"""
430,2022-05-09 05:46:08,"    X = df[[[column],[column]]]","KeyError: ""None of [Index([('犯罪率',), ('犯罪率',)], dtype='object')] are in the [columns]"""
431,2022-05-09 05:46:08,"  print(f'{colomn} 決定係数(R2):', r2)",NameError: name 'colomn' is not defined
432,2022-05-09 05:46:10,"  model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
433,2022-05-09 05:46:17,"  model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
434,2022-05-09 05:46:40,"  model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
435,2022-05-09 05:46:47,  X = df[[colomn]],NameError: name 'colomn' is not defined
436,2022-05-09 05:46:50,"    model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
437,2022-05-09 05:47:01,"    model.fit(X,y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
438,2022-05-09 05:47:05,"    print(f'{column} 決定係数(R2):', R2)",NameError: name 'R2' is not defined
439,2022-05-09 05:47:11,for colum in dfb.columns[:-1]:,NameError: name 'dfb' is not defined
440,2022-05-09 05:47:13,  X = df[[colomn]],NameError: name 'colomn' is not defined
441,2022-05-09 05:47:14,  x = df[[column]],NameError: name 'column' is not defined
442,2022-05-09 05:47:18,"  X = df[[column],[column]]","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
443,2022-05-09 05:47:30,"      print(max('決定係数(R2):', r2, '(',column1,', ', column2,', ', column3,')' ))",TypeError: '>' not supported between instances of 'numpy.ndarray' and 'str'
444,2022-05-09 05:47:33,"  model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
445,2022-05-09 05:47:43,"  X = df[[column], df[column]]","TypeError: '(['犯罪率'], 0      0.00632
1      0.02731
2      0.02729
3      0.03237
4      0.06905
        ...   
501    0.06263
502    0.04527
503    0.06076
504    0.10959
505    0.04741
Name: 犯罪率, Length: 506, dtype: float64)' is an invalid key"
446,2022-05-09 05:47:49,for colum in dfb.columns[:-1]:,NameError: name 'dfb' is not defined
447,2022-05-09 05:47:54,  x = df[[column]],NameError: name 'column' is not defined
448,2022-05-09 05:48:01,"  X = df[[column],[column]]  # ひとつ選ぶ","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
449,2022-05-09 05:48:07,"  X = df[[column],[column]]","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
450,2022-05-09 05:48:08,for colum in dfb.columns[:-1]:,NameError: name 'dfb' is not defined
451,2022-05-09 05:48:16,for colum in df.colums[:-1]:,AttributeError: 'DataFrame' object has no attribute 'colums'
452,2022-05-09 05:48:17,  X = df[[colomn]],NameError: name 'colomn' is not defined
453,2022-05-09 05:48:17,  x = df[[column]],NameError: name 'column' is not defined
454,2022-05-09 05:48:22,"    model.fit(X, y)",TypeError: Singleton array array(0) cannot be considered a valid collection.
455,2022-05-09 05:48:23,  X = df[[colomn]],NameError: name 'colomn' is not defined
456,2022-05-09 05:48:27,    X = df[[column]],NameError: name 'column' is not defined
457,2022-05-09 05:48:29,"  X = df[[column], df[column]]","TypeError: '(['犯罪率'], 0      0.00632
1      0.02731
2      0.02729
3      0.03237
4      0.06905
        ...   
501    0.06263
502    0.04527
503    0.06076
504    0.10959
505    0.04741
Name: 犯罪率, Length: 506, dtype: float64)' is an invalid key"
458,2022-05-09 05:48:34,  X=df[[column]],NameError: name 'column' is not defined
459,2022-05-09 05:48:40,    X=df[[column]],NameError: name 'column' is not defined
460,2022-05-09 05:48:41,"  X = df[df[column], df[column]]","TypeError: '(0      0.00632
1      0.02731
2      0.02729
3      0.03237
4      0.06905
        ...   
501    0.06263
502    0.04527
503    0.06076
504    0.10959
505    0.04741
Name: 犯罪率, Length: 506, dtype: float64, 0      0.00632
1      0.02731
2      0.02729
3      0.03237
4      0.06905
        ...   
501    0.06263
502    0.04527
503    0.06076
504    0.10959
505    0.04741
Name: 犯罪率, Length: 506, dtype: float64)' is an invalid key"
461,2022-05-09 05:48:44,for colum in df.colums[:-1]:,AttributeError: 'DataFrame' object has no attribute 'colums'
462,2022-05-09 05:48:46,"  model.fit(X,y)","ValueError: Expected 2D array, got 1D array instead:
array=[ 1  2  2  3  3  3  5  5  5  5  5  5  5  4  4  4  4  4  4  4  4  4  4  4
  4  4  4  4  4  4  4  4  4  4  4  5  5  5  5  3  3  3  3  3  3  3  3  3
  3  3  4  4  4  4  3  5  2  5  8  8  8  8  8  8  3  4  4  4  4  4  4  4
  4  4  5  5  5  5  5  5  4  4  4  4  3  3  3  3  2  2  2  2  4  4  4  2
  2  2  2  2  5  5  5  5  5  5  5  5  5  5  5  6  6  6  6  6  6  6  6  6
  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  5  5
  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
  5  5  5  5  5  5  5  5  5  5  5  3  3  3  3  3  3  3  3  5  5  5  5  5
  5  1  1  4  2  2  2  3  3  2  2  4  4  4  4  4  4  4  4  4  4  4  4  4
  5  5  5  5  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  6  6
  6  6  6  6  7  7  7  7  7  7  7  7  7  7  1  1  3  5  5  5  5  5  5  5
  5  5  5  5  5  3  3  3  3  3  4  4  4  4  4  5  5  5  5  1  1  1  1  6
  6  6  4  4  4  4  4  4  4  4  5  5  5  7  7  7  7  7  7  7  4  4  4  4
  4  4  4  4  4  4  4  4  5  5  5  5  5  5  5  5  4  4  4  1  1  5  5  5
  5  5  5  5  5  1  1  5  5  3  3  4  4  1  1  4  4  5  4  4 24 24 24 24
 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24
 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24
 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24
 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24
 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24
 24 24 24 24 24 24 24 24  4  4  4  4  4  6  6  6  6  6  6  6  6  1  1  1
  1  1].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
463,2022-05-09 05:48:47,for column in df.colums[:-1]:,AttributeError: 'DataFrame' object has no attribute 'colums'
464,2022-05-09 05:48:58,  X=df[[column]],NameError: name 'column' is not defined
465,2022-05-09 05:49:00,"    X = df[[column],[column]]","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
466,2022-05-09 05:49:00,    X = df[[犯罪率]],NameError: name '犯罪率' is not defined
467,2022-05-09 05:49:00,for column in df.colums[:-1]:,AttributeError: 'DataFrame' object has no attribute 'colums'
468,2022-05-09 05:49:02,"  model.fit(X, y)","ValueError: Found input variables with inconsistent numbers of samples: [2, 506]"
469,2022-05-09 05:49:07,"    X = df[col[y],col[z]]","KeyError: ('犯罪率', '緑地')"
470,2022-05-09 05:49:08,  print(f'{column} 決定係数(R2):'.r2),AttributeError: 'str' object has no attribute 'r2'
471,2022-05-09 05:49:09,"    X = df[[column],[column1]] # 説明変数","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
472,2022-05-09 05:49:10,"    model.fit(X, y)","ValueError: Found input variables with inconsistent numbers of samples: [2, 506]"
473,2022-05-09 05:49:10,"    X = df[[column],[column]]","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
474,2022-05-09 05:49:20,"    X = df[[column],[column]]  # ひとつ選ぶ","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
475,2022-05-09 05:49:22,"    X = df[[column],[column]]","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
476,2022-05-09 05:49:31,"  model.fix(X,y)",AttributeError: 'LinearRegression' object has no attribute 'fix'
477,2022-05-09 05:49:35,"  model.fit(X[1], y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.32000e-03 2.73100e-02 2.72900e-02 3.23700e-02 6.90500e-02 2.98500e-02
 8.82900e-02 1.44550e-01 2.11240e-01 1.70040e-01 2.24890e-01 1.17470e-01
 9.37800e-02 6.29760e-01 6.37960e-01 6.27390e-01 1.05393e+00 7.84200e-01
 8.02710e-01 7.25800e-01 1.25179e+00 8.52040e-01 1.23247e+00 9.88430e-01
 7.50260e-01 8.40540e-01 6.71910e-01 9.55770e-01 7.72990e-01 1.00245e+00
 1.13081e+00 1.35472e+00 1.38799e+00 1.15172e+00 1.61282e+00 6.41700e-02
 9.74400e-02 8.01400e-02 1.75050e-01 2.76300e-02 3.35900e-02 1.27440e-01
 1.41500e-01 1.59360e-01 1.22690e-01 1.71420e-01 1.88360e-01 2.29270e-01
 2.53870e-01 2.19770e-01 8.87300e-02 4.33700e-02 5.36000e-02 4.98100e-02
 1.36000e-02 1.31100e-02 2.05500e-02 1.43200e-02 1.54450e-01 1.03280e-01
 1.49320e-01 1.71710e-01 1.10270e-01 1.26500e-01 1.95100e-02 3.58400e-02
 4.37900e-02 5.78900e-02 1.35540e-01 1.28160e-01 8.82600e-02 1.58760e-01
 9.16400e-02 1.95390e-01 7.89600e-02 9.51200e-02 1.01530e-01 8.70700e-02
 5.64600e-02 8.38700e-02 4.11300e-02 4.46200e-02 3.65900e-02 3.55100e-02
 5.05900e-02 5.73500e-02 5.18800e-02 7.15100e-02 5.66000e-02 5.30200e-02
 4.68400e-02 3.93200e-02 4.20300e-02 2.87500e-02 4.29400e-02 1.22040e-01
 1.15040e-01 1.20830e-01 8.18700e-02 6.86000e-02 1.48660e-01 1.14320e-01
 2.28760e-01 2.11610e-01 1.39600e-01 1.32620e-01 1.71200e-01 1.31170e-01
 1.28020e-01 2.63630e-01 1.07930e-01 1.00840e-01 1.23290e-01 2.22120e-01
 1.42310e-01 1.71340e-01 1.31580e-01 1.50980e-01 1.30580e-01 1.44760e-01
 6.89900e-02 7.16500e-02 9.29900e-02 1.50380e-01 9.84900e-02 1.69020e-01
 3.87350e-01 2.59150e-01 3.25430e-01 8.81250e-01 3.40060e-01 1.19294e+00
 5.90050e-01 3.29820e-01 9.76170e-01 5.57780e-01 3.22640e-01 3.52330e-01
 2.49800e-01 5.44520e-01 2.90900e-01 1.62864e+00 3.32105e+00 4.09740e+00
 2.77974e+00 2.37934e+00 2.15505e+00 2.36862e+00 2.33099e+00 2.73397e+00
 1.65660e+00 1.49632e+00 1.12658e+00 2.14918e+00 1.41385e+00 3.53501e+00
 2.44668e+00 1.22358e+00 1.34284e+00 1.42502e+00 1.27346e+00 1.46336e+00
 1.83377e+00 1.51902e+00 2.24236e+00 2.92400e+00 2.01019e+00 1.80028e+00
 2.30040e+00 2.44953e+00 1.20742e+00 2.31390e+00 1.39140e-01 9.17800e-02
 8.44700e-02 6.66400e-02 7.02200e-02 5.42500e-02 6.64200e-02 5.78000e-02
 6.58800e-02 6.88800e-02 9.10300e-02 1.00080e-01 8.30800e-02 6.04700e-02
 5.60200e-02 7.87500e-02 1.25790e-01 8.37000e-02 9.06800e-02 6.91100e-02
 8.66400e-02 2.18700e-02 1.43900e-02 1.38100e-02 4.01100e-02 4.66600e-02
 3.76800e-02 3.15000e-02 1.77800e-02 3.44500e-02 2.17700e-02 3.51000e-02
 2.00900e-02 1.36420e-01 2.29690e-01 2.51990e-01 1.35870e-01 4.35710e-01
 1.74460e-01 3.75780e-01 2.17190e-01 1.40520e-01 2.89550e-01 1.98020e-01
 4.56000e-02 7.01300e-02 1.10690e-01 1.14250e-01 3.58090e-01 4.07710e-01
 6.23560e-01 6.14700e-01 3.15330e-01 5.26930e-01 3.82140e-01 4.12380e-01
 2.98190e-01 4.41780e-01 5.37000e-01 4.62960e-01 5.75290e-01 3.31470e-01
 4.47910e-01 3.30450e-01 5.20580e-01 5.11830e-01 8.24400e-02 9.25200e-02
 1.13290e-01 1.06120e-01 1.02900e-01 1.27570e-01 2.06080e-01 1.91330e-01
 3.39830e-01 1.96570e-01 1.64390e-01 1.90730e-01 1.40300e-01 2.14090e-01
 8.22100e-02 3.68940e-01 4.81900e-02 3.54800e-02 1.53800e-02 6.11540e-01
 6.63510e-01 6.56650e-01 5.40110e-01 5.34120e-01 5.20140e-01 8.25260e-01
 5.50070e-01 7.61620e-01 7.85700e-01 5.78340e-01 5.40500e-01 9.06500e-02
 2.99160e-01 1.62110e-01 1.14600e-01 2.21880e-01 5.64400e-02 9.60400e-02
 1.04690e-01 6.12700e-02 7.97800e-02 2.10380e-01 3.57800e-02 3.70500e-02
 6.12900e-02 1.50100e-02 9.06000e-03 1.09600e-02 1.96500e-02 3.87100e-02
 4.59000e-02 4.29700e-02 3.50200e-02 7.88600e-02 3.61500e-02 8.26500e-02
 8.19900e-02 1.29320e-01 5.37200e-02 1.41030e-01 6.46600e-02 5.56100e-02
 4.41700e-02 3.53700e-02 9.26600e-02 1.00000e-01 5.51500e-02 5.47900e-02
 7.50300e-02 4.93200e-02 4.92980e-01 3.49400e-01 2.63548e+00 7.90410e-01
 2.61690e-01 2.69380e-01 3.69200e-01 2.53560e-01 3.18270e-01 2.45220e-01
 4.02020e-01 4.75470e-01 1.67600e-01 1.81590e-01 3.51140e-01 2.83920e-01
 3.41090e-01 1.91860e-01 3.03470e-01 2.41030e-01 6.61700e-02 6.72400e-02
 4.54400e-02 5.02300e-02 3.46600e-02 5.08300e-02 3.73800e-02 3.96100e-02
 3.42700e-02 3.04100e-02 3.30600e-02 5.49700e-02 6.15100e-02 1.30100e-02
 2.49800e-02 2.54300e-02 3.04900e-02 3.11300e-02 6.16200e-02 1.87000e-02
 1.50100e-02 2.89900e-02 6.21100e-02 7.95000e-02 7.24400e-02 1.70900e-02
 4.30100e-02 1.06590e-01 8.98296e+00 3.84970e+00 5.20177e+00 4.26131e+00
 4.54192e+00 3.83684e+00 3.67822e+00 4.22239e+00 3.47428e+00 4.55587e+00
 3.69695e+00 1.35222e+01 4.89822e+00 5.66998e+00 6.53876e+00 9.23230e+00
 8.26725e+00 1.11081e+01 1.84982e+01 1.96091e+01 1.52880e+01 9.82349e+00
 2.36482e+01 1.78667e+01 8.89762e+01 1.58744e+01 9.18702e+00 7.99248e+00
 2.00849e+01 1.68118e+01 2.43938e+01 2.25971e+01 1.43337e+01 8.15174e+00
 6.96215e+00 5.29305e+00 1.15779e+01 8.64476e+00 1.33598e+01 8.71675e+00
 5.87205e+00 7.67202e+00 3.83518e+01 9.91655e+00 2.50461e+01 1.42362e+01
 9.59571e+00 2.48017e+01 4.15292e+01 6.79208e+01 2.07162e+01 1.19511e+01
 7.40389e+00 1.44383e+01 5.11358e+01 1.40507e+01 1.88110e+01 2.86558e+01
 4.57461e+01 1.80846e+01 1.08342e+01 2.59406e+01 7.35341e+01 1.18123e+01
 1.10874e+01 7.02259e+00 1.20482e+01 7.05042e+00 8.79212e+00 1.58603e+01
 1.22472e+01 3.76619e+01 7.36711e+00 9.33889e+00 8.49213e+00 1.00623e+01
 6.44405e+00 5.58107e+00 1.39134e+01 1.11604e+01 1.44208e+01 1.51772e+01
 1.36781e+01 9.39063e+00 2.20511e+01 9.72418e+00 5.66637e+00 9.96654e+00
 1.28023e+01 1.06718e+01 6.28807e+00 9.92485e+00 9.32909e+00 7.52601e+00
 6.71772e+00 5.44114e+00 5.09017e+00 8.24809e+00 9.51363e+00 4.75237e+00
 4.66883e+00 8.20058e+00 7.75223e+00 6.80117e+00 4.81213e+00 3.69311e+00
 6.65492e+00 5.82115e+00 7.83932e+00 3.16360e+00 3.77498e+00 4.42228e+00
 1.55757e+01 1.30751e+01 4.34879e+00 4.03841e+00 3.56868e+00 4.64689e+00
 8.05579e+00 6.39312e+00 4.87141e+00 1.50234e+01 1.02330e+01 1.43337e+01
 5.82401e+00 5.70818e+00 5.73116e+00 2.81838e+00 2.37857e+00 3.67367e+00
 5.69175e+00 4.83567e+00 1.50860e-01 1.83370e-01 2.07460e-01 1.05740e-01
 1.11320e-01 1.73310e-01 2.79570e-01 1.78990e-01 2.89600e-01 2.68380e-01
 2.39120e-01 1.77830e-01 2.24380e-01 6.26300e-02 4.52700e-02 6.07600e-02
 1.09590e-01 4.74100e-02].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
478,2022-05-09 05:49:36,    X = df[[column]],NameError: name 'column' is not defined
479,2022-05-09 05:49:43,"    X = df[[column1],[column2]]  # ひとつ選ぶ","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
480,2022-05-09 05:50:00,"    X = df[[column1],[column2]]  # ひとつ選ぶ","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
481,2022-05-09 05:50:06,"  model.fit(X[1][2], y)","ValueError: Expected 2D array, got scalar array instead:
array=0.02729.
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
482,2022-05-09 05:50:23,"model.fit(X,y)",TypeError: fit() missing 1 required positional argument: 'y'
483,2022-05-09 05:50:24,for column in df.solumns[:-1]:,AttributeError: 'DataFrame' object has no attribute 'solumns'
484,2022-05-09 05:50:27,"    X = df[[column],[column]]","TypeError: '(['緑地'], ['緑地'])' is an invalid key"
485,2022-05-09 05:50:29,"    model.fit(X, y)",ValueError: Found array with dim 3. Estimator expected <= 2.
486,2022-05-09 05:50:35,for column in df.solumns[:-1]:,AttributeError: 'DataFrame' object has no attribute 'solumns'
487,2022-05-09 05:50:38,"    model.fit(X, y)",TypeError: Singleton array array(0) cannot be considered a valid collection.
488,2022-05-09 05:50:50,"model.fit(X,y)",TypeError: fit() missing 1 required positional argument: 'y'
489,2022-05-09 05:50:58,"  X = df[[column],[column],[column]]","TypeError: '(['犯罪率'], ['犯罪率'], ['犯罪率'])' is an invalid key"
490,2022-05-09 05:51:00,"model.fit(X,y)",TypeError: fit() missing 1 required positional argument: 'y'
491,2022-05-09 05:51:04,  X = df[[column]],NameError: name 'column' is not defined
492,2022-05-09 05:51:13,  for column in df.columns[i]:,NameError: name 'i' is not defined
493,2022-05-09 05:51:14,  X = df[column],NameError: name 'column' is not defined
494,2022-05-09 05:51:23,"    X = df[[column,column[i]]]  # ひとつ選ぶ","KeyError: ""None of [Index(['犯', '犯'], dtype='object')] are in the [columns]"""
495,2022-05-09 05:51:24,  X = df[[column]],NameError: name 'column' is not defined
496,2022-05-09 05:51:29,"    model.fit(X, y)","ValueError: Found input variables with inconsistent numbers of samples: [2, 506]"
497,2022-05-09 05:51:39,columns[0],NameError: name 'columns' is not defined
498,2022-05-09 05:51:42,"    plt.hist(df[column], df['G3'], bins=20)",TypeError: hist() got multiple values for argument 'bins'
499,2022-05-09 05:51:44,"    X = df[[column,column[1]]]  # ひとつ選ぶ","KeyError: ""['罪'] not in index"""
500,2022-05-09 05:51:53,"    X = df[[column1], [column]]",NameError: name 'column1' is not defined
501,2022-05-09 05:51:56,"    model.fit(X, y)",TypeError: Singleton array array(0) cannot be considered a valid collection.
502,2022-05-09 05:52:15,"    X = df[column1, column]","KeyError: ('犯罪率', '犯罪率')"
503,2022-05-09 05:52:20,  column2 = column1-1,TypeError: unsupported operand type(s) for -: 'str' and 'int'
504,2022-05-09 05:52:29,"    X = df[[column],[column1]] # 説明変数","TypeError: '(['犯罪率'], ['緑地'])' is an invalid key"
505,2022-05-09 05:52:30,"    X=df[[column1],[column2]]",NameError: name 'column1' is not defined
506,2022-05-09 05:52:46,"    X=df[[column1,column2]]",NameError: name 'column1' is not defined
507,2022-05-09 05:52:53,"    X = df[[column],[column]]","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
508,2022-05-09 05:52:57,  column2 = f'{column1}'-1,TypeError: unsupported operand type(s) for -: 'str' and 'int'
509,2022-05-09 05:52:59,"      print(f'{column1,column} 決定係数(R2):', max(r2))",TypeError: 'numpy.float64' object is not iterable
510,2022-05-09 05:53:07,max(r2),TypeError: 'numpy.float64' object is not iterable
511,2022-05-09 05:53:23,"  X = df[[column],[column]]  # ひとつ選ぶ","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
512,2022-05-09 05:53:30,"  X = df[[column],['低所得率']]  # ひとつ選ぶ","TypeError: '(['犯罪率'], ['低所得率'])' is an invalid key"
513,2022-05-09 05:53:39,"  for b in range(y+1,len(col)+1):",TypeError: 'Series' object cannot be interpreted as an integer
514,2022-05-09 05:53:49,"  r =r_score(y,y_pred)  ",NameError: name 'r_score' is not defined
515,2022-05-09 05:53:50,"      r2 = max.r2_score(y, y_pred)",AttributeError: 'builtin_function_or_method' object has no attribute 'r2_score'
516,2022-05-09 05:53:53,"    X = df[[col[a],col[b]]]",IndexError: index 12 is out of bounds for axis 0 with size 12
517,2022-05-09 05:53:54,"  X = df[[column],'低所得率']  # ひとつ選ぶ","TypeError: '(['犯罪率'], '低所得率')' is an invalid key"
518,2022-05-09 05:53:57,"      r2 = max(r2_score(y, y_pred))",TypeError: 'numpy.float64' object is not iterable
519,2022-05-09 05:54:11,"  X = df[column,'低所得率']  # ひとつ選ぶ","KeyError: ('犯罪率', '低所得率')"
520,2022-05-09 05:54:12,    X = df[[r]],NameError: name 'r' is not defined
521,2022-05-09 05:54:20,"      X = df[[column, column2,colums3]] #1つ選ぶ",NameError: name 'colums3' is not defined
522,2022-05-09 05:54:32,"    print(column,column2,colums3)",NameError: name 'colums3' is not defined
523,2022-05-09 05:54:34,max(a2),NameError: name 'a2' is not defined
524,2022-05-09 05:54:44,"    X=df[[column],[column]]","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
525,2022-05-09 05:54:49,print(max(r2)),TypeError: 'numpy.float64' object is not iterable
526,2022-05-09 05:55:25,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[ 4.09    4.9671  4.9671  6.0622  6.0622  6.0622  5.5605  5.9505  6.0821
  6.5921  6.3467  6.2267  5.4509  4.7075  4.4619  4.4986  4.4986  4.2579
  3.7965  3.7965  3.7979  4.0123  3.9769  4.0952  4.3996  4.4546  4.682
  4.4534  4.4547  4.239   4.233   4.175   3.99    3.7872  3.7598  3.3603
  3.3779  3.9342  3.8473  5.4011  5.4011  5.7209  5.7209  5.7209  5.7209
  5.1004  5.1004  5.6894  5.87    6.0877  6.8147  6.8147  6.8147  6.8147
  7.3197  8.6966  9.1876  8.3248  7.8148  6.932   7.2254  6.8185  7.2255
  7.9809  9.2229  6.6115  6.6115  6.498   6.498   6.498   5.2873  5.2873
  5.2873  5.2873  4.2515  4.5026  4.0522  4.0905  5.0141  4.5026  5.4007
  5.4007  5.4007  5.4007  4.7794  4.4377  4.4272  3.7476  3.4217  3.4145
  3.0923  3.0921  3.6659  3.6659  3.615   3.4952  3.4952  3.4952  3.4952
  3.4952  2.7778  2.8561  2.7147  2.7147  2.421   2.1069  2.211   2.1224
  2.4329  2.5451  2.7778  2.6775  2.3534  2.548   2.2565  2.4631  2.7301
  2.7474  2.4775  2.7592  2.2577  2.1974  2.0869  1.9444  2.0063  1.9929
  1.7572  1.7883  1.8125  1.9799  2.1185  2.271   2.3274  2.4699  2.346
  2.1107  1.9669  1.8498  1.6686  1.6687  1.6119  1.4394  1.3216  1.4118
  1.3459  1.4191  1.5166  1.4608  1.5296  1.5257  1.618   1.5916  1.6102
  1.6232  1.7494  1.7455  1.7364  1.8773  1.7573  1.7659  1.7984  1.9709
  2.0407  2.162   2.422   2.2834  2.0459  2.4259  2.1     2.2625  2.4259
  2.3887  2.5961  2.6463  2.7019  3.1323  3.5549  3.3175  2.9153  2.829
  2.741   2.5979  2.7006  2.847   2.9879  3.2797  3.1992  3.7886  4.5667
  4.5667  6.4798  6.4798  6.4798  6.2196  6.2196  5.6484  7.309   7.309
  7.309   7.6534  7.6534  6.27    6.27    5.118   5.118   3.9454  4.3549
  4.3549  4.2392  3.875   3.8771  3.665   3.6526  3.9454  3.5875  3.9454
  3.1121  3.4211  2.8893  3.3633  2.8617  3.048   3.2721  3.2721  2.8944
  2.8944  3.2157  3.2157  3.3751  3.3751  3.6715  3.6715  3.8384  3.6519
  3.6519  3.6519  4.148   4.148   6.1899  6.1899  6.3361  6.3361  7.0355
  7.0355  7.9549  7.9549  8.0555  8.0555  7.8265  7.8265  7.3967  7.3967
  8.9067  8.9067  9.2203  9.2203  6.3361  1.801   1.8946  2.0107  2.1121
  2.1398  2.2885  2.0788  1.9301  1.9865  2.1329  2.4216  2.872   3.9175
  4.429   4.429   3.9175  4.3665  4.0776  4.2673  4.7872  4.8628  4.1403
  4.1007  4.6947  5.2447  5.2119  5.885   7.3073  7.3073  9.0892  7.3172
  7.3172  7.3172  5.1167  5.1167  5.1167  5.5027  5.5027  5.9604  5.9604
  6.32    7.8278  7.8278  7.8278  5.4917  5.4917  5.4917  4.022   3.37
  3.0992  3.1827  3.3175  3.1025  2.5194  2.6403  2.834   3.2628  3.6023
  3.945   3.9986  4.0317  3.5325  4.0019  4.5404  4.5404  4.7211  4.7211
  4.7211  5.4159  5.4159  5.4159  5.2146  5.2146  5.8736  6.6407  6.6407
  6.4584  6.4584  5.9853  5.2311  5.615   4.8122  4.8122  4.8122  7.0379
  6.2669  5.7321  6.4654  8.0136  8.0136  8.5353  8.344   8.7921  8.7921
 10.7103 10.7103 12.1265 10.5857 10.5857  2.1222  2.5052  2.7227  2.5091
  2.5182  2.2955  2.1036  1.9047  1.9047  1.6132  1.7523  1.5106  1.3325
  1.3567  1.2024  1.1691  1.1296  1.1742  1.137   1.3163  1.3449  1.358
  1.3861  1.3861  1.4165  1.5192  1.5804  1.5331  1.4395  1.4261  1.4672
  1.5184  1.5895  1.7281  1.9265  2.1678  1.77    1.7912  1.7821  1.7257
  1.6768  1.6334  1.4896  1.5004  1.5888  1.5741  1.639   1.7028  1.6074
  1.4254  1.1781  1.2852  1.4547  1.4655  1.413   1.5275  1.5539  1.5894
  1.6582  1.8347  1.8195  1.6475  1.8026  1.794   1.8589  1.8746  1.9512
  2.0218  2.0635  1.9096  1.9976  1.8629  1.9356  1.9682  2.0527  2.0882
  2.2004  2.3158  2.2222  2.1247  2.0026  1.9142  1.8206  1.8172  1.8662
  2.0651  2.0048  1.9784  1.8956  1.9879  2.072   2.198   2.2616  2.185
  2.3236  2.3552  2.3682  2.4527  2.4961  2.4358  2.5806  2.7792  2.7831
  2.7175  2.5975  2.5671  2.7344  2.8016  2.9634  3.0665  2.8715  2.5403
  2.9084  2.8237  3.0334  3.0993  2.8965  2.5329  2.4298  2.206   2.3053
  2.1007  2.1705  1.9512  3.4242  3.3317  3.4106  4.0983  3.724   3.9917
  3.5459  3.1523  1.8209  1.7554  1.8226  1.8681  2.1099  2.3817  2.3817
  2.7986  2.7986  2.8927  2.4091  2.3999  2.4982  2.4786  2.2875  2.1675
  2.3889  2.505 ].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
527,2022-05-09 05:55:26,    print(i),NameError: name 'i' is not defined
528,2022-05-09 05:55:30,      A=list[r2],TypeError: 'type' object is not subscriptable
529,2022-05-09 05:55:32,"      X=df[[column],[b]]","TypeError: '(['緑地'], ['犯罪率'])' is an invalid key"
530,2022-05-09 05:55:52,"    model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[0      0.00632
 1      0.02731
 2      0.02729
 3      0.03237
 4      0.06905
         ...
 501    0.06263
 502    0.04527
 503    0.06076
 504    0.10959
 505    0.04741
 Name: 犯罪率, Length: 506, dtype: float64 list(['犯罪率'])].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
531,2022-05-09 05:55:59,"    X = df[[[column],[column1]]] # 説明変数df[['部屋数', '築年']]","KeyError: ""None of [Index([('犯罪率',), ('緑地',)], dtype='object')] are in the [columns]"""
532,2022-05-09 05:56:19,"    model.fit(X, y)",ValueError: Found array with dim 3. Estimator expected <= 2.
533,2022-05-09 05:56:21,"    X = df[column,column1] # 説明変数df[['部屋数', '築年']]","KeyError: ('犯罪率', '緑地')"
534,2022-05-09 05:56:36,"    X=df[[column],[column]]","TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key"
535,2022-05-09 05:56:48,"    X = df[[[column]],df[[column]]]","TypeError: '([['犯罪率']],          犯罪率
0    0.00632
1    0.02731
2    0.02729
3    0.03237
4    0.06905
..       ...
501  0.06263
502  0.04527
503  0.06076
504  0.10959
505  0.04741

[506 rows x 1 columns])' is an invalid key"
536,2022-05-09 06:12:29,x=list.input(),AttributeError: type object 'list' has no attribute 'input'
537,2022-05-09 06:13:35,if N%10==2 and N%10==4 and N%10==5 and N%10==7 and N%10==9:,TypeError: not all arguments converted during string formatting
538,2022-05-09 06:14:45,if N%10==2 and N%10==4 and N%10==5 and N%10==7 and N%10==9:,TypeError: not all arguments converted during string formatting
539,2022-05-09 06:14:57,"get_ipython().run_cell_magic('kogi', 'https://atcoder.jp/contests/abc224/tasks/abc224_c', 'N=int(input())\nXY=list(list(map(int,input().split())) for _ in range(N))\n\nans=0\nfor i in range(0,N-2):\n  x1,y1=XY[i]\n  for j in range(i,N-1):\n    x2,y2=XY[j]\n    for k in range(j,N):\n      x3,y3=XY[k]\n\n      if (x2-x1)*(y3-y1)-(x3-x1)*(y2-y1) == 0:\n        pass\n      else\n      ans+=1\nprint(ans)')",UsageError: Cell magic `%%kogi` not found.
540,2022-05-09 06:16:36,"a,b= map(int,input().split())",ValueError: invalid literal for int() with base 10: 'coder'
541,2022-05-09 06:16:53,"a,b= map(input().split())",TypeError: map() must have at least two arguments.
542,2022-05-09 06:18:06,"get_ipython().run_cell_magic('https://atcoder.jp/contests/abc228/tasks/abc228_a', '', 'S,T,X=map(int, input().split())\n\nif S<=X<T:\n  print(""Yes"")\nelse:\n  print(""No"")')",UsageError: Cell magic `%%https://atcoder.jp/contests/abc228/tasks/abc228_a` not found.
543,2022-05-09 06:18:11,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc171/tasks/abc171_a', '')","UsageError: %%atcoder is a cell magic, but the cell body is empty."
544,2022-05-09 06:18:22,"n.replace(""1"",""9"" and ""9"",""1"")",TypeError: 'str' object cannot be interpreted as an integer
545,2022-05-09 06:18:44,"get_ipython().run_cell_magic('aycoder', 'abc149_a', 'S,T=map(int,input().split())\nprint(T+S)')",UsageError: Cell magic `%%aycoder` not found.
546,2022-05-09 06:22:14,N=int(input()),KeyboardInterrupt: 
547,2022-05-09 06:23:26,コギーマジで嫌い,NameError: name 'コギーマジで嫌い' is not defined
548,2022-05-09 06:23:34,"get_ipython().run_cell_magic('atcoderhttps://atcoder.jp/contests/abc171/tasks/abc171_', '', ""s = 'A'\n'A' <= s <= 'Z'"")",UsageError: Cell magic `%%atcoderhttps://atcoder.jp/contests/abc171/tasks/abc171_` not found.
549,2022-05-09 06:25:44,"S,T=map(input().split())",TypeError: map() must have at least two arguments.
550,2022-05-09 06:25:49,,TypeError: append() takes exactly one argument (2 given)
551,2022-05-09 06:25:51,"print(int(A, K)*int(B,K))",TypeError: 'tuple' object cannot be interpreted as an integer
552,2022-05-09 06:26:05,"get_ipython().run_cell_magic('kogi', '', '%%atcoder abc157_a\nN=input()\nif N%2==0:\n    print(N%2)\nelse:\n    print((N%2)-1)')",UsageError: Cell magic `%%kogi` not found.
553,2022-05-09 06:26:10,"print(int(A, K))",TypeError: 'tuple' object cannot be interpreted as an integer
554,2022-05-09 06:26:21,"get_ipython().run_cell_magic('kogi', '', '%%atcoder abc157_a\n\nN=input()\nif N%2==0:\n    print(N%2)\nelse:\n    print((N%2)-1)')",UsageError: Cell magic `%%kogi` not found.
555,2022-05-09 06:27:07,    print(x=y),TypeError: 'x' is an invalid keyword argument for print()
556,2022-05-09 06:28:05,"get_ipython().run_cell_magic('atcoderhttps://atcoder.jp/contests/abc171/tasks/abc171_', '', ""s = input()\nif s.isupper():\n  print('A')\n\nif s.islower():\n  print('a')"")",UsageError: Cell magic `%%atcoderhttps://atcoder.jp/contests/abc171/tasks/abc171_` not found.
557,2022-05-09 06:28:20,"kogi_login(ai_key='1fnp38_4EYzTU39qtvj7QWbWZ1c5XFw_m', class_name='atcoder')",NameError: name 'kogi_login' is not defined
558,2022-05-09 06:28:36,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc171/tasks/abc171_', ""s = input()\nif s.isupper():\n  print('A')\n\nif s.islower():\n  print('a')"")","KogiError: {""translated"": ""\u554f\u984c\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3002"", ""reason"": ""\u554f\u984c\u306e\u6307\u5b9a\u65b9\u6cd5\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u3059"", ""hint"": ""\u554f\u984c\u30da\u30fc\u30b8\u306eURL\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044"", ""solution"": ""%%atcoder \u554f\u984c\u30da\u30fc\u30b8\u306eURL""}"
559,2022-05-09 06:29:26,"get_ipython().run_cell_magic('kogi', 'https://atcoder.jp/contests/abc224/tasks/abc224_c', 'N=int(input())\nXY=list(list(map(int,input().split())) for _ in range(N))\n\nans=0\nfor i in range(0,N-2):\n  x1,y1=XY[i]\n  for j in range(i,N-1):\n    x2,y2=XY[j]\n    for k in range(j,N):\n      x3,y3=XY[k]\n\n      if (x2-x1)*(y3-y1)-(x3-x1)*(y2-y1) == 0:\n        pass\n      else:\n      ans+=1\nprint(ans)')",UsageError: Cell magic `%%kogi` not found.
560,2022-05-09 06:29:55,"S,T=str(input())",ValueError: too many values to unpack (expected 2)
561,2022-05-09 06:30:06,"get_ipython().run_cell_magic('atcoder', 'abc231_a', '')","UsageError: %%atcoder is a cell magic, but the cell body is empty."
562,2022-05-09 06:31:28,"a,b=map(input())",TypeError: map() must have at least two arguments.
563,2022-05-09 06:31:56,"get_ipython().run_cell_magic('kogi', '', '%%atcoder https://atcoder.jp/contests/abc157/tasks/abc157_a\n\nN=input()\nif N%2==0:\n    print(N%2)\nelse:\n    print((N%2)-1)')",UsageError: Cell magic `%%kogi` not found.
564,2022-05-09 06:32:18,"    s[i],s[i+1]==s[i+1],s[a]","TypeError: list indices must be integers or slices, not list"
565,2022-05-09 06:33:00,if str.startsWith('er'):,AttributeError: type object 'str' has no attribute 'startsWith'
566,2022-05-09 06:33:11,'9' in N,TypeError: argument of type 'int' is not iterable
567,2022-05-09 06:34:12,"A,B=map(int,input().split())",ValueError: too many values to unpack (expected 2)
568,2022-05-09 06:34:22,"A,B=map(int,input().split())",ValueError: too many values to unpack (expected 2)
569,2022-05-09 06:35:43,"kogi_login(ai_key='1fnp38_4EYzTU39qtvj7QWbWZ1c5XFw_m', class_name='atcoder')",NameError: name 'kogi_login' is not defined
570,2022-05-09 06:36:21,if len(N)==4:,TypeError: object of type 'int' has no len()
571,2022-05-09 06:36:32,"get_ipython().run_cell_magic('arcoder', 'https://atcoder.jp/contests/abc149/tasks/abc149_a', ""S,T=map(str, input().split())\nprint(f'{S}{T}')"")",UsageError: Cell magic `%%arcoder` not found.
572,2022-05-09 06:37:51,if len(N)==4:,TypeError: object of type 'int' has no len()
573,2022-05-09 06:38:44,k = int(input()),ValueError: invalid literal for int() with base 10: '3 4 9 0'
574,2022-05-09 06:39:00,"get_ipython().run_cell_magic('atcoder\u3000https://atcoder.jp/contests/abc149/tasks/abc149_a', '', 'S,T=map(int,input().split())\nprint(S+T)')",UsageError: Cell magic `%%atcoder　https://atcoder.jp/contests/abc149/tasks/abc149_a` not found.
575,2022-05-09 06:39:24,k = int(input().split()),"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
576,2022-05-09 06:39:38,if N%2==0:,TypeError: not all arguments converted during string formatting
577,2022-05-09 06:40:19,"A,B=map(int,input().split())",ValueError: too many values to unpack (expected 2)
578,2022-05-09 06:40:29,s[1],IndexError: string index out of range
579,2022-05-09 06:40:54,s[3],IndexError: string index out of range
580,2022-05-09 06:42:14,,"SyntaxError: invalid syntax (<unknown>, line 1)"
581,2022-05-09 06:42:15,,"SyntaxError: invalid syntax (<unknown>, line 1)"
582,2022-05-09 06:42:19,,"SyntaxError: invalid syntax (<unknown>, line 1)"
583,2022-05-09 06:42:20,,"SyntaxError: invalid syntax (<unknown>, line 1)"
584,2022-05-09 06:42:20,"n,m=map(int,input())",ValueError: invalid literal for int() with base 10: ' '
585,2022-05-09 06:42:27,,"IndentationError: expected an indented block (<unknown>, line 9)"
586,2022-05-09 06:42:27,,"IndentationError: expected an indented block (<unknown>, line 9)"
587,2022-05-09 06:42:51,,NameError: name 'columns' is not defined
588,2022-05-09 06:43:19,,"KeyError: ""None of [Index(['住', '宅', '価', '格'], dtype='object')] are in the [columns]"""
589,2022-05-09 06:43:38,,"KeyError: ""None of [Index([('住',), ('宅',), ('価',), ('格',)], dtype='object')] are in the [columns]"""
590,2022-05-09 06:43:46,if X >=100:,TypeError: '>=' not supported between instances of 'str' and 'int'
591,2022-05-09 06:43:57,,"KeyError: ""None of [Index(['住', '宅', '価', '格'], dtype='object')] are in the [columns]"""
592,2022-05-09 06:44:16,x=a^2+b^2-2*a*b*e,TypeError: unsupported operand type(s) for ^: 'int' and 'float'
593,2022-05-09 06:44:24,,"KeyError: ""None of [Index([('住',), ('宅',), ('価',), ('格',)], dtype='object')] are in the [columns]"""
594,2022-05-09 06:44:34,,"KeyError: ""None of [Index(['住', '宅', '価', '格'], dtype='object')] are in the [columns]"""
595,2022-05-09 06:45:46,a<=x<=b,NameError: name 'x' is not defined
596,2022-05-09 06:47:22,df.info(),NameError: name 'df' is not defined
597,2022-05-09 06:47:37,for i in range():,"TypeError: range expected 1 arguments, got 0"
598,2022-05-09 06:48:00,a = str.input(),AttributeError: type object 'str' has no attribute 'input'
599,2022-05-09 06:51:13,"a,b,h,m=map(int(),input().split())",TypeError: 'int' object is not callable
600,2022-05-09 06:51:16,if S(2)==S(3) or S(4)==S(5):,TypeError: 'str' object is not callable
601,2022-05-09 06:53:26,  print(white),NameError: name 'white' is not defined
602,2022-05-09 06:56:37,    print(No),NameError: name 'No' is not defined
603,2022-05-09 06:56:52,"S,T=str(input())",ValueError: too many values to unpack (expected 2)
604,2022-05-09 06:58:03,print(S[3]+S[1]+S[2]),IndexError: string index out of range
605,2022-05-09 06:59:16,"print(s.replace(1, 9).replace(9, 1))",AttributeError: 'int' object has no attribute 'replace'
606,2022-05-09 06:59:47,"print(S.replace((S[0],S[-1])(S[1],S[0])))",TypeError: 'tuple' object is not callable
607,2022-05-09 07:00:25,"print(replace((S[0],S[-1])(S[1],S[0])))",NameError: name 'replace' is not defined
608,2022-05-09 07:01:15,if N<10:,TypeError: '<' not supported between instances of 'str' and 'int'
609,2022-05-09 07:01:21,"get_ipython().run_cell_magic('atcuder', 'https://atcoder.jp/contests/abc228/tasks/abc228_a', ""S,T,X = map(int,input().split())\nif S  in X:\n    print('Yes')\nelse:\n    print('No')"")",UsageError: Cell magic `%%atcuder` not found.
610,2022-05-09 07:01:37,"print(s[1,2,0])","TypeError: list indices must be integers or slices, not tuple"
611,2022-05-09 07:01:53,"print(S.replace(len(0),len(2)))",TypeError: object of type 'int' has no len()
612,2022-05-09 07:02:25,"N=a,b,c=map(int,input().split())","ValueError: not enough values to unpack (expected 3, got 1)"
613,2022-05-09 07:04:15,S=str(input()),KeyboardInterrupt: 
614,2022-05-09 07:04:39,  a=sorted(a),TypeError: '<' not supported between instances of 'list' and 'int'
615,2022-05-09 07:06:28,"print(s.replace(1, 9).replace(9, 1))","TypeError: replace() argument 1 must be str, not int"
616,2022-05-09 07:07:54,"N,A,X,Y = map(int,input().split())",KeyboardInterrupt: 
617,2022-05-09 07:09:30,    if a[j][i]=='G':,TypeError: 'int' object is not subscriptable
618,2022-05-09 07:11:35,    print('0'+N),"TypeError: can only concatenate str (not ""int"") to str"
619,2022-05-09 07:14:00,x = list(map(int(input().split()))),"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
620,2022-05-09 07:14:51,"n=replace(1,9)",NameError: name 'replace' is not defined
621,2022-05-09 07:15:54,S.rfind(er),NameError: name 'er' is not defined
622,2022-05-09 07:17:10,if 1 in s and 9 in s:,TypeError: argument of type 'int' is not iterable
623,2022-05-09 07:20:44,print(S.rfind(er)),NameError: name 'er' is not defined
624,2022-05-09 07:21:05,if N==len[3]:,TypeError: 'builtin_function_or_method' object is not subscriptable
625,2022-05-09 07:21:46,print(s.endswith(er)),NameError: name 'er' is not defined
626,2022-05-09 07:23:35,"S.replace=(S[1],S[2])",AttributeError: 'str' object attribute 'replace' is read-only
627,2022-05-09 07:24:56,"a, b = map(int, input().split())",KeyboardInterrupt: 
628,2022-05-09 07:25:13,b=(N%10),TypeError: not all arguments converted during string formatting
629,2022-05-09 07:25:23,"S.replace(S[1],S[2],S[0])",TypeError: 'str' object cannot be interpreted as an integer
630,2022-05-09 07:26:17,"A,B=map(int,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
631,2022-05-09 07:27:08,x=input(),KeyboardInterrupt: 
632,2022-05-09 07:27:27,  print(0+[n]),TypeError: unsupported operand type(s) for +: 'int' and 'list'
633,2022-05-09 07:27:35,"A,B=map(int,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
634,2022-05-09 07:28:48,"print(s.replace(1,9))","TypeError: replace() argument 1 must be str, not int"
635,2022-05-09 07:29:55,"    rho = corr(df[column], df['G3'])",NameError: name 'corr' is not defined
636,2022-05-09 07:30:50,if N[0] == a:,TypeError: 'int' object is not subscriptable
637,2022-05-09 07:31:18,    model = LinearRegression(),NameError: name 'LinearRegression' is not defined
638,2022-05-09 07:31:33,s_zero = s.zfill(4),NameError: name 's' is not defined
639,2022-05-09 07:33:05,if s[-3]==i:,NameError: name 'i' is not defined
640,2022-05-09 07:33:21,"if s[-3]==""i"":",IndexError: list index out of range
641,2022-05-09 07:34:37,if X[-3]<=4:,TypeError: '<=' not supported between instances of 'str' and 'int'
642,2022-05-09 07:34:40,k=int(input()),ValueError: invalid literal for int() with base 10: 'nikoandsolstice'
643,2022-05-09 07:34:51,"if s[-3]==""i"":",IndexError: list index out of range
644,2022-05-09 07:37:01,N=ansgd,NameError: name 'ansgd' is not defined
645,2022-05-09 07:38:35,X=int(input()),ValueError: invalid literal for int() with base 10: '3.456'
646,2022-05-09 07:38:35,"if mylist.index(""H"")==1 and mylist.index(""HR"")==1 and mylist.index(""2B"")==1:",ValueError: 'H' is not in list
647,2022-05-09 07:39:59,N[len(N)],IndexError: string index out of range
648,2022-05-09 07:40:23,S[0]=S[2],TypeError: 'str' object does not support item assignment
649,2022-05-09 07:41:32,n = (len(N)),TypeError: object of type 'int' has no len()
650,2022-05-09 07:48:34,K = int(input()),KeyboardInterrupt: 
651,2022-05-09 09:14:29,"X_train_numa_p = pd.read_csv(""/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csv"")",FileNotFoundError: [Errno 2] No such file or directory: '/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csv'
652,2022-05-09 09:14:42,"X_train_numa_p = pd.read_csv(""shion:/Desktop/OJT/numa-chan/train_Numa_print.csv"")",FileNotFoundError: [Errno 2] No such file or directory: 'shion:/Desktop/OJT/numa-chan/train_Numa_print.csv'
653,2022-05-09 09:15:12,"X_train_numa_p = pd.read_csv(""/Users:/shion/Desktop/OJT/numa-chan/train_Numa_print.csv"")",FileNotFoundError: [Errno 2] No such file or directory: '/Users:/shion/Desktop/OJT/numa-chan/train_Numa_print.csv'
654,2022-05-09 09:15:15,"X_train_numa_p = pd.read_csv(""Users:/shion/Desktop/OJT/numa-chan/train_Numa_print.csv"")",FileNotFoundError: [Errno 2] No such file or directory: 'Users:/shion/Desktop/OJT/numa-chan/train_Numa_print.csv'
655,2022-05-09 09:15:33,"X_train_numa_p = pd.read_csv("":/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csv"")",FileNotFoundError: [Errno 2] No such file or directory: ':/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csv'
656,2022-05-09 09:15:47,"X_train_numa_p = pd.read_csv(""/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csv"")",FileNotFoundError: [Errno 2] No such file or directory: '/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csv'
657,2022-05-09 09:16:58,X_train_numa_p = pd.read_csv('/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: '/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csv'
658,2022-05-09 09:17:14,X_train_numa_p = pd.read_csv('/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: '/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csv'
659,2022-05-09 09:19:00,X_train_numa_p = pd.read_csv('~/Desktop/OJT/numa-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: '/root/Desktop/OJT/numa-chan/train_Numa_print.csv'
660,2022-05-09 09:19:09,X_train_numa_p = pd.read_csv('~/desktop/OJT/numa-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: '/root/desktop/OJT/numa-chan/train_Numa_print.csv'
661,2022-05-09 09:22:28,X_train_numa_p = pd.read_csv('https://drive.google.com/drive/folders/14AfV9rPm_1wp-uvpGtX2ogWnMcbBV35W?usp=sharing/train_Numa_print.csv'),"ParserError: Error tokenizing data. C error: Expected 1 fields in line 6, saw 2
"
662,2022-05-09 09:24:38,X_train_numa_p = pd.read_csv('train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'train_Numa_print.csv'
663,2022-05-09 09:26:43,X_train_numa_p = pd.read_csv('drive/MyDrive/numa-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'drive/MyDrive/numa-chan/train_Numa_print.csv'
664,2022-05-09 09:27:29,X_train_numa_p = pd.read_csv('https://drive.google.com/drive/folders/14AfV9rPm_1wp-uvpGtX2ogWnMcbBV35W?usp=sharing/train_Numa_print.csv'),"ParserError: Error tokenizing data. C error: Expected 2 fields in line 6, saw 5
"
665,2022-05-09 09:27:43,X_train_numa_p = pd.read_csv('https://drive.google.com/drive/folders/14AfV9rPm_1wp-uvpGtX2ogWnMcbBV35W?usp=sharing'),"ParserError: Error tokenizing data. C error: Expected 2 fields in line 6, saw 5
"
666,2022-05-09 09:28:48,X_train_numa_p = pd.read_csv('https://drive.google.com/drive/folders/14AfV9rPm_1wp-uvpGtX2ogWnMcbBV35W'),"ParserError: Error tokenizing data. C error: Expected 2 fields in line 6, saw 5
"
667,2022-05-09 09:31:10,X_train_numa_p = pd.read_csv('https://drive.google.com/file/d/1yWj9QG29CmUOufrvE2NITNBxwRlRtD7g/view?usp=sharing'),"ParserError: Error tokenizing data. C error: Buffer overflow caught - possible malformed input file.
"
668,2022-05-09 09:31:50,X_train_numa_p = pd.read_csv('https://drive.google.com/file/d/1yWj9QG29CmUOufrvE2NITNBxwRlRtD7g/view?usp=sharing'/train_Numa_print.csv),NameError: name 'train_Numa_print' is not defined
669,2022-05-09 09:32:27,X_train_numa_p = pd.read_csv('https://drive.google.com/file/d/1yWj9QG29CmUOufrvE2NITNBxwRlRtD7g/view?usp=sharing'/MyDrive/train_Numa_print.csv),NameError: name 'MyDrive' is not defined
670,2022-05-09 09:32:31,X_train_numa_p = pd.read_csv('https://drive.google.com/file/d/1yWj9QG29CmUOufrvE2NITNBxwRlRtD7g/view?usp=sharing'/MyDrive/train_Numa_print.csv),NameError: name 'MyDrive' is not defined
671,2022-05-09 09:32:50,X_train_numa_p = pd.read_csv('train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'train_Numa_print.csv'
672,2022-05-09 09:33:32,X_train_numa_p = pd.read_csv('drive/MyDrive/nuna-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'drive/MyDrive/nuna-chan/train_Numa_print.csv'
673,2022-05-09 09:35:43,X_train_numa_p = pd.read_csv('https://drive.google.com/file/d/12zeTeIhT0tVppoM52HC_8-jl7oMYjwZ_/view?usp=sharing'),"ParserError: Error tokenizing data. C error: Buffer overflow caught - possible malformed input file.
"
674,2022-05-09 09:44:00,X_train_numa_p = pd.read_csv('https://drive.google.com/drive/my-drive/nuna-chan/train_Numa_print.csv'),"ParserError: Error tokenizing data. C error: Expected 1 fields in line 6, saw 2
"
675,2022-05-09 09:46:20,X_train_numa_p = pd.read_csv('/drive/my-drive/nuna-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: '/drive/my-drive/nuna-chan/train_Numa_print.csv'
676,2022-05-09 09:46:26,X_train_numa_p = pd.read_csv('drive/my-drive/nuna-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'drive/my-drive/nuna-chan/train_Numa_print.csv'
677,2022-05-09 09:46:34,X_train_numa_p = pd.read_csv('my-drive/nuna-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'my-drive/nuna-chan/train_Numa_print.csv'
678,2022-05-09 09:47:47,X_train_numa_p = pd.read_csv('my-drive/nuna-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'my-drive/nuna-chan/train_Numa_print.csv'
679,2022-05-09 09:47:59,X_train_numa_p = pd.read_csv('drive/MyDrive/nuna-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'drive/MyDrive/nuna-chan/train_Numa_print.csv'
680,2022-05-09 09:48:39,X_train_numa_p = pd.read_csv('drive/MyDrive/nuna-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'drive/MyDrive/nuna-chan/train_Numa_print.csv'
681,2022-05-09 09:57:51,X_train_numa_p = pd.read_csv('drive/MyDrive/numa-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'drive/MyDrive/numa-chan/train_Numa_print.csv'
682,2022-05-09 09:57:55,X_train_numa_p = pd.read_csv('drive/MyDrive/numa-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'drive/MyDrive/numa-chan/train_Numa_print.csv'
683,2022-05-09 10:03:06,X_train_numa_p = pd.read_csv('drive/MyDrive/numa-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'drive/MyDrive/numa-chan/train_Numa_print.csv'
684,2022-05-09 10:03:15,X_train_numa_p = pd.read_csv('drive/MyDrive/numa-chan/train_Numa_print.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'drive/MyDrive/numa-chan/train_Numa_print.csv'
685,2022-05-09 10:36:59,df = pd.read_csv('bento.csv'),NameError: name 'pd' is not defined
686,2022-05-09 10:46:18,df = pd.read_csv('/content/bento.csv'),NameError: name 'pd' is not defined
687,2022-05-09 11:04:07,df.isnull.sum(),AttributeError: 'function' object has no attribute 'sum'
688,2022-05-09 11:21:12,df['precipitation'].info(),AttributeError: 'Series' object has no attribute 'info'
689,2022-05-09 11:21:39,df['precipitation'].info(),AttributeError: 'Series' object has no attribute 'info'
690,2022-05-09 11:42:34,df['name'].mean(),TypeError: Could not convert 厚切りイカフライ手作りヒレカツ白身魚唐揚げ野菜あん若鶏ピリ辛焼ビッグメンチカツ鶏の唐揚豚のスタミナ炒めボローニャ風カツハンバーグタルタルinソーセージカツマーボ豆腐厚揚げ豚生姜炒めクリームチーズ入りメンチ鶏のカッシュナッツ炒め手作りロースカツハンバーグデミソースやわらかロースのサムジョン五目御飯肉じゃがタンドリーチキンカキフライタルタル手作りヒレカツ回鍋肉ポーク味噌焼き鶏の唐揚げ甘酢あんさっくりメンチカツ手ごね風ハンバーグ酢豚カレー入りソーセージカツ豚肉の生姜焼鶏チリソース手作りロースカツ鶏の照り焼きマスタードさんま辛味焼カレイ唐揚げ野菜あんかけ回鍋肉ジューシーメンチカツサバ焼味噌掛け手作りひれかつとカレー酢豚鶏のレモンペッパー焼orカレーチンジャオロース海老フライタルタルチーズ入りメンチカツ鶏の唐揚げメダイ照り焼ハンバーグカレーソースさわら焼味噌掛け鶏のピリ辛焼き手作りロースカツホタテクリ―ムシチュー鶏の唐揚げおろしソースますのマスタードソース回鍋肉ロース甘味噌焼きチンジャオロース海老フライとホタテ串カツハンバーグ和風きのこソースタンドリーチキン酢豚orカレーポークハヤシマーボ豆腐鶏チリソース白身魚唐揚げ野菜あんかけ手作りひれかつハンバーグカレーソース回鍋肉メンチカツチキンクリームシチューボローニャ風カツ海老クリーミ―クノーデル肉じゃがビーフカレー手作りロースカツカレイ野菜あんかけ鶏の唐揚げおろしソースチーズ入りハンバーグ越冬キャベツのメンチカツ鶏の親子煮マーボ豆腐手作りひれかつ肉団子クリームシチューロース甘味噌焼きキーマカレー青椒肉絲メンチカツ肉じゃが酢豚和風ソースハンバーグ青梗菜牛肉炒め肉団子のシチュー青椒肉絲鶏の唐揚げおろしソースチキンカレービーフトマト煮ポーク生姜焼きカレイ唐揚げ野菜あんかけ牛丼風煮鶏の味噌漬け焼き牛肉筍煮マーボ豆腐手作りひれかつ鶏の照り焼きマヨ中華丼タンドリーチキン豚味噌メンチカツマーボ茄子鶏の天ぷら肉じゃがメンチカツ手作りチキンカツきのこソースハンバーグ白身魚唐揚げ野菜餡かけメンチカツタンドリーチキンポークカレー豚肉と茄子のピリ辛炒め鶏の味噌漬け焼きチーズハンバーグサーモンのムニエル2色ソース牛肉コロッケ鶏のカッシュナッツ炒め牛肉すき焼き風鶏の唐揚げおろしソースいか天ぷらチキンカレーハンバーグケッチャップソースゴーヤチャンプルーたっぷりベーコンフライ鶏の味噌漬け焼き手作りロースカツ牛肉ニンニクの芽炒めカレイ唐揚げ野菜餡かけチャプチェタンドリーチキンキーマカレー牛すき焼き風ポークソテー韓国ソースビーフストロガノフアジ唐揚げ南蛮ソース炊き込みご飯マーボ茄子鶏のトマトシチュー豚の冷しゃぶキスと野菜の天ぷら牛丼鶏の塩から揚げカレイ唐揚げ夏野菜あんタンドリーチキン白身魚ムニエル手作りトンカツ和風ハンバーグかじきの甘辛煮チキンのコーンクリーム焼きプルコギポークカレー鶏のから揚げねぎ塩炒めソース豚冷シャブ野菜添え白身魚フライ豚すき焼きエビフライチンジャオロース八宝菜ジャンボチキンカツひやしたぬきうどん・炊き込みご飯豚肉のマスタード焼きバーベキューチキンメンチカツ鶏のから揚げスイートチリソース豚肉の生姜焼きハンバーグ（デミきのこバター）鶏肉のカレー唐揚豚キムチ炒めチキン香草焼きマスタードソースチキンカレーサーモンフライ・タルタル厚切ハムカツ洋食屋さんのメンチカツ牛スキヤキ豚ロースのピザ風チーズ焼きチキン南蛮ロコモコ丼白身魚の南部焼きキーマカレーカレイの唐揚げ豚肉の胡麻シャブチキンの辛味噌焼きビーフシチュー名古屋味噌カツ親子煮チキンステーキ・きのこソースメンチカツ鶏肉の山賊焼きハンバーグデミソースぶりレモンペッパー焼き手作りチキンカツポークカレーチーズメンチカツチキンフリカッセカレイ唐揚げ 甘酢あん厚切イカフライ筑前煮白身魚のマスタード焼き牛カルビ焼き肉ランチビュッフェ豚肉と玉子の炒め鶏肉とカシューナッツ炒め to numeric
691,2022-05-09 11:49:36,pandas.Series.value_counts(),NameError: name 'pandas' is not defined
692,2022-05-09 11:50:36,pd.value_counts(),TypeError: value_counts() missing 1 required positional argument: 'values'
693,2022-05-09 12:00:50,    if len(seq[i][0]) != len(set(seq[i+1][0])) and len(seq[i][1]) != len(set(seq[i+1][1])):,NameError: name 'seq' is not defined
694,2022-05-09 14:15:49,    model = LinearRegression(),NameError: name 'LinearRegression' is not defined
695,2022-05-09 14:16:18,"mse = mean_squared_error(y, y_pred) ",NameError: name 'y_pred' is not defined
696,2022-05-10 00:10:35,add,NameError: name 'add' is not defined
697,2022-05-10 00:12:11,n = int(input()),KeyboardInterrupt: 
698,2022-05-10 00:21:54,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc168/tasks/abc168_c', '')","UsageError: %%atcoder is a cell magic, but the cell body is empty."
699,2022-05-10 00:23:07,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc214/tasks/abc214_b', '')","UsageError: %%atcoder is a cell magic, but the cell body is empty."
700,2022-05-10 00:30:38,X=ceil(N/2),NameError: name 'ceil' is not defined
701,2022-05-10 00:37:14,X_train_c1_numa_p_05 = X_train_numa_p.sample(len(X_train_c1_any_p)*0.5),ValueError: Only integers accepted as `n` values
702,2022-05-10 00:37:47,X_train_c1_numa_p_05 = X_train_numa_p.sample(len(X_train_c1_any_p)*0.5),ValueError: Only integers accepted as `n` values
703,2022-05-10 00:37:57,X_train_c1_numa_p_05 = X_train_numa_p.sample(len(X_train_c1_any_p)*0.5),ValueError: Only integers accepted as `n` values
704,2022-05-10 00:42:46,x=print(N[-1]),TypeError: 'int' object is not subscriptable
705,2022-05-10 00:47:30,,ValueError: Cannot take a larger sample than population when 'replace=False'
706,2022-05-10 00:47:56,n=input(),KeyboardInterrupt: 
707,2022-05-10 00:48:08,,ValueError: Cannot take a larger sample than population when 'replace=False'
708,2022-05-10 00:48:12,for i in range(n):,TypeError: 'str' object cannot be interpreted as an integer
709,2022-05-10 00:48:15,,ValueError: Cannot take a larger sample than population when 'replace=False'
710,2022-05-10 00:49:11,,ValueError: Cannot take a larger sample than population when 'replace=False'
711,2022-05-10 00:49:23,,ValueError: Cannot take a larger sample than population when 'replace=False'
712,2022-05-10 00:50:15,y=N[-1],TypeError: 'int' object is not subscriptable
713,2022-05-10 00:50:52,,ValueError: Cannot take a larger sample than population when 'replace=False'
714,2022-05-10 00:51:26,,ValueError: Cannot take a larger sample than population when 'replace=False'
715,2022-05-10 00:52:06,if N[-1] == 3:,TypeError: 'int' object is not subscriptable
716,2022-05-10 00:54:21,elif Y==A+C:,NameError: name 'Y' is not defined
717,2022-05-10 00:55:33,"t =str.S({'1':'9', '9':'1'})",AttributeError: type object 'str' has no attribute 'S'
718,2022-05-10 00:58:19,  x1=B[l]-a,IndexError: list index out of range
719,2022-05-10 00:58:37,  x1=B[l]-a,IndexError: list index out of range
720,2022-05-10 00:58:38,k=int(print()),"TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'"
721,2022-05-10 01:05:30,"M,S=map(str,input().split())",KeyboardInterrupt: 
722,2022-05-10 01:07:36,N=int(input()),ValueError: invalid literal for int() with base 10: 'B'
723,2022-05-10 01:10:51,N=int(input()),KeyboardInterrupt: 
724,2022-05-10 01:11:25,s_bool = df['アルコール'] >= 4 and df['G3'],"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
725,2022-05-10 01:11:47,s_bool = df['アルコール'] >= 4 and df['G3'] >= 14,"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
726,2022-05-10 01:13:34,  a=S[-int(n):],NameError: name 'n' is not defined
727,2022-05-10 01:15:32,"ta=int('a',n)",ValueError: invalid literal for int() with base 2: 'a'
728,2022-05-10 01:16:22,"ta=int(a,n)",TypeError: int() can't convert non-string with explicit base
729,2022-05-10 01:18:40,N=int(input()),ValueError: invalid literal for int() with base 10: '99.9'
730,2022-05-10 01:21:13,r=str(0*(4-N)),TypeError: unsupported operand type(s) for -: 'int' and 'str'
731,2022-05-10 01:22:14,r=x*(4-N),TypeError: unsupported operand type(s) for -: 'int' and 'str'
732,2022-05-10 01:22:52,r=x*(4-N),TypeError: unsupported operand type(s) for -: 'int' and 'str'
733,2022-05-10 01:26:02,n - int(input()),NameError: name 'n' is not defined
734,2022-05-10 01:27:54,"N=S.remove(0,2)",AttributeError: 'str' object has no attribute 'remove'
735,2022-05-10 01:33:11,"r=s.remove(0,2)",TypeError: remove() takes exactly one argument (2 given)
736,2022-05-10 02:19:45,get_ipython().magic('atcoder https://atcoder.jp/contests/abc178/tasks/abc178_b'),"UsageError: Line magic function `%atcoder` not found (But cell magic `%%atcoder` exists, did you mean that instead?)."
737,2022-05-10 05:19:38,"A,B = int(input())",ValueError: invalid literal for int() with base 10: '-13 3'
738,2022-05-10 05:20:00,"A,B = str(input())",ValueError: too many values to unpack (expected 2)
739,2022-05-10 05:20:49,"A,B = input()",ValueError: too many values to unpack (expected 2)
740,2022-05-10 05:21:04,"A,B = input()",ValueError: too many values to unpack (expected 2)
741,2022-05-10 05:21:58,"A,B = input()",ValueError: too many values to unpack (expected 2)
742,2022-05-10 05:22:56,"A,B = input()",ValueError: too many values to unpack (expected 2)
743,2022-05-10 05:23:54,"A,B = map(input())",TypeError: map() must have at least two arguments.
744,2022-05-10 05:24:26,"print(max(A + B, A - B, A * B))",TypeError: unsupported operand type(s) for -: 'str' and 'str'
745,2022-05-10 05:27:37,"mylist = [ A+B,A-B,A*B ]",TypeError: unsupported operand type(s) for -: 'str' and 'str'
746,2022-05-10 05:32:36,N = float().input(),AttributeError: 'float' object has no attribute 'input'
747,2022-05-10 05:40:46,print((N+1)/2),"TypeError: can only concatenate list (not ""int"") to list"
748,2022-05-10 05:41:04,print((N+1)/2),"TypeError: can only concatenate str (not ""int"") to str"
749,2022-05-10 06:24:28,if X % 100 == 0:,TypeError: not all arguments converted during string formatting
750,2022-05-10 06:24:38,if X / 100 == 0:,TypeError: unsupported operand type(s) for /: 'str' and 'int'
751,2022-05-10 06:52:51,y_pred = model.predict(X_test),"ValueError: X has 10 features, but LinearRegression is expecting 11 features as input."
752,2022-05-10 07:04:16,y_pred = model.predict(X_test),"ValueError: X has 10 features, but LinearRegression is expecting 11 features as input."
753,2022-05-10 07:04:22,y_pred = model.predict(X_test),"ValueError: X has 10 features, but LinearRegression is expecting 11 features as input."
754,2022-05-10 07:06:39,y_pred = model.predict(X_test),"ValueError: X has 9 features, but LinearRegression is expecting 10 features as input."
755,2022-05-10 07:07:36,y_pred = model.predict(X_test),"ValueError: X has 9 features, but LinearRegression is expecting 10 features as input."
756,2022-05-10 07:17:09,"sns.kdeplot(df.groupby('アルコール').get_group('1')['G3'], shade = True, label = '1')",KeyError: '1'
757,2022-05-10 07:17:22,"sns.kdeplot(df.groupby('アルコール').get_group('2')['G3'], shade = True, label = '2')",KeyError: '2'
758,2022-05-10 08:22:19,"print('正解率(test)', model.score(X_test, y_test_c1_p))",NameError: name 'X_test' is not defined
759,2022-05-10 08:31:38,"model.fit(X_train, y_train)",ValueError: Unknown label type: 'continuous-multioutput'
760,2022-05-10 08:31:41,"model.fit(X_train, y_train)",ValueError: Unknown label type: 'continuous-multioutput'
761,2022-05-10 08:32:49,"model.fit(X_train, y_train)",ValueError: Unknown label type: 'continuous-multioutput'
762,2022-05-10 08:33:44,"model.fit(X_train, y_train)",ValueError: Unknown label type: 'continuous-multioutput'
763,2022-05-10 08:34:47,"model.fit(X_train, y_train)",ValueError: Unknown label type: 'continuous-multioutput'
764,2022-05-10 09:04:53,"X_train = X_train_c1_a_05[[ 'p', 'r', 'i', 'n', 't', 'Shift', '(' ]]","KeyError: ""None of [Index(['p', 'r', 'i', 'n', 't', 'Shift', '('], dtype='object')] are in the [columns]"""
765,2022-05-10 09:14:17,y_test = X_test_21_p['target'],NameError: name 'X_test_21_p' is not defined
766,2022-05-11 03:09:22,"get_ipython().run_cell_magic('kogi', '', ""pd,read_csv('boston.csv')"")",UsageError: Cell magic `%%kogi` not found.
767,2022-05-11 07:52:38,"get_ipython().run_cell_magic('kogi', '', ""pd,read_csv('boston.csv')"")",UsageError: Cell magic `%%kogi` not found.
768,2022-05-11 13:46:58,df.info(),NameError: name 'df' is not defined
769,2022-05-11 13:47:11,df_orig.info(),NameError: name 'df_orig' is not defined
770,2022-05-11 14:51:34,"print('R2', r2_score(y_test, y_pred))",NameError: name 'r2_score' is not defined
771,2022-05-11 15:26:56,"sns.boxplot(x=df['父職業'],y=['G3'],order=order_by)",TypeError: Neither the `x` nor `y` variable appears to be numeric.
772,2022-05-11 15:29:03,"plt.boxplot(x=df['父職業'],y=df['G3'],order=order_by)",TypeError: boxplot() got an unexpected keyword argument 'y'
773,2022-05-11 15:36:00,y_train_pred= randomforest.predict(X),NotFittedError: This RandomForestRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
774,2022-05-11 15:37:46,pred_sub = y_train - pred,NameError: name 'y_train' is not defined
775,2022-05-11 15:38:49,pred_sub = y - y_pred_L,"ValueError: operands could not be broadcast together with shapes (165,) (42,) "
776,2022-05-11 15:45:22,,"TypeError: ufunc 'true_divide' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''"
777,2022-05-11 15:46:16,,"TypeError: ufunc 'true_divide' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''"
778,2022-05-11 15:48:12,,"TypeError: ufunc 'true_divide' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''"
779,2022-05-11 15:51:26,"X = df_train[['year', 'month', 'day', 'week', 'soldout', 'kcal', 'payday', 'weather', 'remarks','temperature',""curry""]]","KeyError: ""['curry'] not in index"""
780,2022-05-11 15:59:39,y_train_pred= mode_L.predict(X),NameError: name 'mode_L' is not defined
781,2022-05-11 16:00:00,y_last_pred=y_pred_L + y_pred_sub,"ValueError: operands could not be broadcast together with shapes (165,) (42,) "
782,2022-05-11 16:06:04,y_train_pred= model.predict(X),NameError: name 'model' is not defined
783,2022-05-11 16:06:42,"    plt.subplot(4,4,i+1)","ValueError: num must be 1 <= num <= 16, not 17"
784,2022-05-11 16:06:53,y_train_pred= model.predict(X),NameError: name 'model' is not defined
785,2022-05-11 16:07:55,y_pred = model.predict(X_test),"ValueError: X has 10 features, but LinearRegression is expecting 9 features as input."
786,2022-05-11 16:20:58,y_pred = model.predict(X_test),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
787,2022-05-11 16:21:12,y_pred = model.predict(X_test),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
788,2022-05-11 16:21:43,y_pred = model.predict(X_test),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
789,2022-05-11 16:21:54,y_pred = model.predict(X_test),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
790,2022-05-11 16:22:06,y_pred = model.predict(X_test),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
791,2022-05-11 16:45:52,df.groupby('家族「')['G3'].describe() ,KeyError: '家族「'
792,2022-05-11 17:14:50,df.corr('住所')['通学時間'],"ValueError: method must be either 'pearson', 'spearman', 'kendall', or a callable, '住所' was supplied"
793,2022-05-11 17:15:04,df.corr('住所')('通学時間'),"ValueError: method must be either 'pearson', 'spearman', 'kendall', or a callable, '住所' was supplied"
794,2022-05-12 00:48:37,"X = df_train[['month', 'day', 'week', 'soldout', 'kcal', 'payday', 'weather', 'remarks','temperature',""curry""]]","KeyError: ""['curry'] not in index"""
795,2022-05-12 00:49:23,"X_test = df_test[['month', 'day', 'week', 'soldout',  'kcal', 'payday', 'weather' , 'remarks','temperature',""curry""]]","KeyError: ""['curry'] not in index"""
796,2022-05-12 00:55:02,"X_test = df_test[['year', 'day', 'week', 'soldout',  'kcal', 'payday', 'weather' , 'remarks','temperature',""curry""]]","KeyError: ""['curry'] not in index"""
797,2022-05-12 02:01:22,"             df[""y""][df[""remarks""]==df.remarks.unique()[2]],",IndexError: index 2 is out of bounds for axis 0 with size 2
798,2022-05-12 02:03:42,df.unique(),AttributeError: 'DataFrame' object has no attribute 'unique'
799,2022-05-12 02:06:01,"model.fit(X, y)",ValueError: could not convert string to float: '特になし'
800,2022-05-12 02:14:46,"X = df_train[['year', 'month', 'day', 'week', 'soldout', 'kcal', 'event', 'payday', 'weather','h_l']]","KeyError: ""['h_l'] not in index"""
801,2022-05-12 02:43:34,"print('正解率(train)：', r2_score(X, y))",ValueError: y_true and y_pred have different number of output (12!=1)
802,2022-05-12 02:45:32,"print('正解率(train)：', model_M.score(X, y))","ValueError: X has 12 features, but MLPClassifier is expecting 9 features as input."
803,2022-05-12 07:16:37,"precision_score = precision_score(y_test, y_pred)","ValueError: pos_label=1 is not a valid label. It should be one of ['0', '1']"
804,2022-05-12 07:17:09,"precision_score = precision_score(y_test, y_pred)","ValueError: pos_label=1 is not a valid label. It should be one of ['0', '1']"
805,2022-05-12 07:17:53,"precision_score = precision_score(y_test, y_pred)","ValueError: pos_label=1 is not a valid label. It should be one of ['0', '1']"
806,2022-05-12 07:17:56,"recall_score = recall_score(y_test, y_pred)","ValueError: pos_label=1 is not a valid label. It should be one of ['0', '1']"
807,2022-05-12 07:18:01,"precision_score = precision_score(y_test, y_pred)","ValueError: pos_label=1 is not a valid label. It should be one of ['0', '1']"
808,2022-05-12 07:18:59,"print(recall_score(y_test, y_pred))","ValueError: pos_label=1 is not a valid label. It should be one of ['0', '1']"
809,2022-05-12 07:25:53,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
810,2022-05-12 07:26:08,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
811,2022-05-12 07:26:31,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
812,2022-05-12 07:26:47,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
813,2022-05-12 07:28:45,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
814,2022-05-12 07:29:03,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
815,2022-05-12 07:29:20,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
816,2022-05-12 10:29:44,printlen((data1_c2)),NameError: name 'printlen' is not defined
817,2022-05-12 11:06:06,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
818,2022-05-12 11:06:17,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
819,2022-05-12 12:06:50,y_pred = model.predict(X),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
820,2022-05-12 12:06:52,"plt.scatter(y, y_pred, color = 'red', alpha=0.3) ",NameError: name 'y_pred' is not defined
821,2022-05-12 12:07:04,"plt.hist(y-y_pred, bins=50)",NameError: name 'y_pred' is not defined
822,2022-05-12 12:07:07,"mse = mean_squared_error(y, y_pred) ",NameError: name 'y_pred' is not defined
823,2022-05-12 12:07:50,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[6.575 6.421 7.185 6.998 7.147 6.43  6.012 6.172 5.631 6.004 6.377 6.009
 5.889 5.949 6.096 5.834 5.935 5.99  5.456 5.727 5.57  5.965 6.142 5.813
 5.924 5.599 5.813 6.047 6.495 6.674 5.713 6.072 5.95  5.701 6.096 5.933
 5.841 5.85  5.966 6.595 7.024 6.77  6.169 6.211 6.069 5.682 5.786 6.03
 5.399 5.602 5.963 6.115 6.511 5.998 5.888 7.249 6.383 6.816 6.145 5.927
 5.741 5.966 6.456 6.762 7.104 6.29  5.787 5.878 5.594 5.885 6.417 5.961
 6.065 6.245 6.273 6.286 6.279 6.14  6.232 5.874 6.727 6.619 6.302 6.167
 6.389 6.63  6.015 6.121 7.007 7.079 6.417 6.405 6.442 6.211 6.249 6.625
 6.163 8.069 7.82  7.416 6.727 6.781 6.405 6.137 6.167 5.851 5.836 6.127
 6.474 6.229 6.195 6.715 5.913 6.092 6.254 5.928 6.176 6.021 5.872 5.731
 5.87  6.004 5.961 5.856 5.879 5.986 5.613 5.693 6.431 5.637 6.458 6.326
 6.372 5.822 5.757 6.335 5.942 6.454 5.857 6.151 6.174 5.019 5.403 5.468
 4.903 6.13  5.628 4.926 5.186 5.597 6.122 5.404 5.012 5.709 6.129 6.152
 5.272 6.943 6.066 6.51  6.25  7.489 7.802 8.375 5.854 6.101 7.929 5.877
 6.319 6.402 5.875 5.88  5.572 6.416 5.859 6.546 6.02  6.315 6.86  6.98
 7.765 6.144 7.155 6.563 5.604 6.153 7.831 6.782 6.556 7.185 6.951 6.739
 7.178 6.8   6.604 7.875 7.287 7.107 7.274 6.975 7.135 6.162 7.61  7.853
 8.034 5.891 6.326 5.783 6.064 5.344 5.96  5.404 5.807 6.375 5.412 6.182
 5.888 6.642 5.951 6.373 6.951 6.164 6.879 6.618 8.266 8.725 8.04  7.163
 7.686 6.552 5.981 7.412 8.337 8.247 6.726 6.086 6.631 7.358 6.481 6.606
 6.897 6.095 6.358 6.393 5.593 5.605 6.108 6.226 6.433 6.718 6.487 6.438
 6.957 8.259 6.108 5.876 7.454 8.704 7.333 6.842 7.203 7.52  8.398 7.327
 7.206 5.56  7.014 8.297 7.47  5.92  5.856 6.24  6.538 7.691 6.758 6.854
 7.267 6.826 6.482 6.812 7.82  6.968 7.645 7.923 7.088 6.453 6.23  6.209
 6.315 6.565 6.861 7.148 6.63  6.127 6.009 6.678 6.549 5.79  6.345 7.041
 6.871 6.59  6.495 6.982 7.236 6.616 7.42  6.849 6.635 5.972 4.973 6.122
 6.023 6.266 6.567 5.705 5.914 5.782 6.382 6.113 6.426 6.376 6.041 5.708
 6.415 6.431 6.312 6.083 5.868 6.333 6.144 5.706 6.031 6.316 6.31  6.037
 5.869 5.895 6.059 5.985 5.968 7.241 6.54  6.696 6.874 6.014 5.898 6.516
 6.635 6.939 6.49  6.579 5.884 6.728 5.663 5.936 6.212 6.395 6.127 6.112
 6.398 6.251 5.362 5.803 8.78  3.561 4.963 3.863 4.97  6.683 7.016 6.216
 5.875 4.906 4.138 7.313 6.649 6.794 6.38  6.223 6.968 6.545 5.536 5.52
 4.368 5.277 4.652 5.    4.88  5.39  5.713 6.051 5.036 6.193 5.887 6.471
 6.405 5.747 5.453 5.852 5.987 6.343 6.404 5.349 5.531 5.683 4.138 5.608
 5.617 6.852 5.757 6.657 4.628 5.155 4.519 6.434 6.782 5.304 5.957 6.824
 6.411 6.006 5.648 6.103 5.565 5.896 5.837 6.202 6.193 6.38  6.348 6.833
 6.425 6.436 6.208 6.629 6.461 6.152 5.935 5.627 5.818 6.406 6.219 6.485
 5.854 6.459 6.341 6.251 6.185 6.417 6.749 6.655 6.297 7.393 6.728 6.525
 5.976 5.936 6.301 6.081 6.701 6.376 6.317 6.513 6.209 5.759 5.952 6.003
 5.926 5.713 6.167 6.229 6.437 6.98  5.427 6.162 6.484 5.304 6.185 6.229
 6.242 6.75  7.061 5.762 5.871 6.312 6.114 5.905 5.454 5.414 5.093 5.983
 5.983 5.707 5.926 5.67  5.39  5.794 6.019 5.569 6.027 6.593 6.12  6.976
 6.794 6.03 ].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
824,2022-05-12 13:49:26,,KeyboardInterrupt: 
825,2022-05-12 14:12:00,"sns.kdeplot(df.groupby('学習時間').get_group('1')['G3'], shade = True, label = '1')",KeyError: '1'
826,2022-05-12 14:13:28,"sns.kdeplot(df.groupby('学習時間').get_group('1')['G3'], shade = True, label = 1)",KeyError: '1'
827,2022-05-12 14:13:48,"sns.kdeplot(df.groupby('学習時間').get_group('1')['G3'], shade = True)",KeyError: '1'
828,2022-05-12 14:15:44,"sns.kdeplot(df.groupby('学習時間').get_group(1)['G3'], shade = True, color = blue)",NameError: name 'blue' is not defined
829,2022-05-12 14:33:29,"A,B=map(int,input().split())",ValueError: too many values to unpack (expected 2)
830,2022-05-12 14:33:31,print((B-A)/(A-1))+1,TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
831,2022-05-12 15:17:49,"A,B=map(int,input().split())",ValueError: invalid literal for int() with base 10: '1t'
832,2022-05-12 15:57:01,"sns.boxplot(x=df['通学時間'], y=df['G3'], order=order_by)",NameError: name 'order_by' is not defined
833,2022-05-12 16:10:49,for column in df.colums[:-1]:,AttributeError: 'DataFrame' object has no attribute 'colums'
834,2022-05-12 16:11:04,  df.groupby(f'{column}')['G3'].describe(),NameError: name 'column' is not defined
835,2022-05-12 16:14:55,  df.groupby(df[column])['G3'].describe(),NameError: name 'column' is not defined
836,2022-05-13 00:12:44,"print(max(s,t,u,v))",TypeError: 'int' object is not callable
837,2022-05-13 00:14:31,"a,b,c,d=map(input().split())",TypeError: map() must have at least two arguments.
838,2022-05-13 00:16:47,"str[s,t,u,v]",TypeError: 'type' object is not subscriptable
839,2022-05-13 00:18:51,"print(max(s,t,u,v))",TypeError: 'int' object is not callable
840,2022-05-13 00:19:24,"print(max(s,t,u,v))",TypeError: 'int' object is not callable
841,2022-05-13 00:19:50,"print(max(s,t,u,v))",TypeError: 'int' object is not callable
842,2022-05-13 00:23:10,"S,T,U,V=str(s,t,u,v)",TypeError: str() takes at most 3 arguments (4 given)
843,2022-05-13 00:23:36,"(S,T,U,V)=str(s,t,u,v)",TypeError: str() takes at most 3 arguments (4 given)
844,2022-05-13 00:27:24,"a,b,c,d=map(int,input().split())",KeyboardInterrupt: 
845,2022-05-13 00:27:34,print(max(l)),TypeError: 'int' object is not callable
846,2022-05-13 00:27:52,print(max(l)),TypeError: 'int' object is not callable
847,2022-05-13 00:28:16,print(max(l)),TypeError: 'int' object is not callable
848,2022-05-13 00:28:30,print(max(l)),TypeError: 'int' object is not callable
849,2022-05-13 00:34:36,"A,B=map(int,input().split())",ValueError: too many values to unpack (expected 2)
850,2022-05-13 01:07:55,print((4-len(N))*0+N),TypeError: unsupported operand type(s) for +: 'int' and 'list'
851,2022-05-13 01:08:05,print((4-len(N))*0+N),TypeError: unsupported operand type(s) for +: 'int' and 'str'
852,2022-05-13 01:08:28,print((4-len(N))*0+N),TypeError: unsupported operand type(s) for +: 'int' and 'str'
853,2022-05-13 01:09:30,print((4-len(N))*0+N),TypeError: object of type 'int' has no len()
854,2022-05-13 01:09:57,print((4-int(len(N)))*0+N),TypeError: object of type 'int' has no len()
855,2022-05-13 01:10:14,print(4-int(len(N))*0+N),TypeError: object of type 'int' has no len()
856,2022-05-13 01:10:57,a=len(N),TypeError: object of type 'int' has no len()
857,2022-05-13 01:12:40,print((4-a)*0+N),TypeError: unsupported operand type(s) for +: 'int' and 'list'
858,2022-05-13 01:13:41,print((4-a)*0++int(N)),"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
859,2022-05-13 01:13:51,print((4-a)*0+int(N)),"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
860,2022-05-13 01:14:38,print((4-a)*'0'+N),"TypeError: can only concatenate str (not ""list"") to str"
861,2022-05-13 01:26:41,"S[1],S[-1]=S[-1],S[1]",TypeError: 'str' object does not support item assignment
862,2022-05-13 01:27:10,print(int(S)),"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
863,2022-05-13 02:06:25,"print(max([s,t,u,v]))",TypeError: 'int' object is not callable
864,2022-05-13 02:21:29,"plt.subplot(2,1,3)","ValueError: num must be 1 <= num <= 2, not 3"
865,2022-05-13 02:21:58,"plt.subplot(2,1,3)","ValueError: num must be 1 <= num <= 2, not 3"
866,2022-05-13 02:49:12,"sns.boxplot(x=df['友人と遊ぶ頻度'], y=df['G3'])",KeyError: '友人と遊ぶ頻度'
867,2022-05-13 02:59:15,  x=x+1,KeyboardInterrupt: 
868,2022-05-13 02:59:23,  x=x+1,KeyboardInterrupt: 
869,2022-05-13 03:00:45,  B-(A-1)*x,KeyboardInterrupt: 
870,2022-05-13 04:41:00,"    plt.subplot(4,4,i+1)","ValueError: num must be 1 <= num <= 16, not 17"
871,2022-05-13 05:03:53,"sns.boxplot(x=df['成績'], y=df['G3'], order=order_by)",KeyError: '成績'
872,2022-05-13 05:04:03,"sns.boxplot(x=df['成績'], y=df['G3'], order=order_by)",KeyError: '成績'
873,2022-05-13 05:13:32,N = int(input()),ValueError: invalid literal for int() with base 10: '2 3'
874,2022-05-13 05:13:47,n = int(input()),ValueError: invalid literal for int() with base 10: '2 3'
875,2022-05-13 05:14:51,N=int(input()),ValueError: invalid literal for int() with base 10: '2 3'
876,2022-05-13 05:15:57,n = int(input()),ValueError: invalid literal for int() with base 10: '2 3'
877,2022-05-13 05:16:02,n = int(input()),ValueError: invalid literal for int() with base 10: '2 3'
878,2022-05-13 05:24:37,"    plt.subplot(4,4,i+1)","ValueError: num must be 1 <= num <= 16, not 17"
879,2022-05-13 05:34:52,df_uid_mean1_c1,NameError: name 'df_uid_mean1_c1' is not defined
880,2022-05-13 05:38:18,df_uid_pr,NameError: name 'df_uid_pr' is not defined
881,2022-05-13 05:53:58,"X_train_c1_any_p, X_test_c1_any_p= train_test_split(X_c1_any_p, test_size=0.3, random_state=0)",NameError: name 'X_c1_any_p' is not defined
882,2022-05-13 06:29:08,"sns.kdeplot(df.groupby('パリピ'),shade = True, label = '女子学生')","ValueError: If using all scalar values, you must pass an index"
883,2022-05-13 07:18:18,"sns.kdeplot(df.groupby('母職業').get_group('ぞの他')['G3'], shade = True, label = 'ぞの他')",KeyError: 'ぞの他'
884,2022-05-13 07:23:19,X_train_pr_name = X_train_pr_name.sample(int(len(X_train_pr_any)*raito)),NameError: name 'X_train_pr_name' is not defined
885,2022-05-13 07:24:18,"X_test_pr.loc[X_train_abc[""uid""] == u_id,'target'] = ""1""",ValueError: cannot reindex from a duplicate axis
886,2022-05-13 07:24:48,"X_test_pr.loc[X_train_pr[""uid""] == u_id,'target'] = ""1""",ValueError: cannot reindex from a duplicate axis
887,2022-05-13 07:55:48,"    plt.subplot(4,4,i+1)","ValueError: num must be 1 <= num <= 16, not 17"
888,2022-05-13 08:00:04,"X_train_pr_name, X_test_pr_name = train_test_split(df_pr_name,test_size = 0.3)",NameError: name 'df_pr_name' is not defined
889,2022-05-13 08:19:36,X_train_pr_any = pd.DataFrame(df_train_pr_any),NameError: name 'df_train_pr_any' is not defined
890,2022-05-13 08:20:49,X_train_pr_name = pd.DataFrame(df_train_pr_name),NameError: name 'df_train_pr_name' is not defined
891,2022-05-13 08:28:30,"sns.kdeplot(df.groupby('学習時間').get_group('1')['G3'], shade = True, label = '1')",KeyError: '1'
892,2022-05-13 08:28:50,"sns.kdeplot(df.groupby('学習時間').get_group('0')['G3'], shade = True, label = '1')",KeyError: '0'
893,2022-05-13 08:29:25,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
894,2022-05-13 08:29:56,y_pred = y_pred.astype(int),NameError: name 'y_pred' is not defined
895,2022-05-13 08:30:07,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
896,2022-05-13 08:30:19,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
897,2022-05-13 08:30:29,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
898,2022-05-13 08:30:51,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
899,2022-05-13 09:05:15,"sns.kdeplot(df.groupby('性別').get_group('男性')['G3'], shade = True, label = '男子学生')",KeyError: '男性'
900,2022-05-13 09:05:42,"sns.kdeplot(df.groupby('性別').get_group('男性')['G3'], shade = True, label = '男子学生')",KeyError: '男性'
901,2022-05-13 09:07:13,"    plt.subplot(4,4,i+1)","ValueError: num must be 1 <= num <= 16, not 17"
902,2022-05-13 09:54:03,    for _ in range(num):,TypeError: 'float' object cannot be interpreted as an integer
903,2022-05-13 10:06:08,"df = pd,read_csv('boston.csv')",NameError: name 'read_csv' is not defined
904,2022-05-13 15:28:22,"get_ipython().run_cell_magic('kogi', 'https://atcoder.jp/contests/abc226/tasks/abc226_c', 'print(1)')",UsageError: Cell magic `%%kogi` not found.
905,2022-05-13 15:28:45,"get_ipython().run_cell_magic('kogi', 'https://atcoder.jp/contests/abc226/tasks/abc226_c', 'print(1)')",UsageError: Cell magic `%%kogi` not found.
906,2022-05-13 15:34:54,"get_ipython().run_cell_magic('kogi', 'https://atcoder.jp/contests/abc226/tasks/abc226_c', '\nN=int(input())\nT=[]\nA=[]\nfor i in range(N):\n  t,a=int(input()) , lsit(map(int,input().split()))\n  print(t,a)\n\n')",UsageError: Cell magic `%%kogi` not found.
907,2022-05-13 15:35:18,get_ipython().magic('kogi https://atcoder.jp/contests/abc226/tasks/abc226_c'),UsageError: Line magic function `%kogi` not found.
908,2022-05-13 15:38:23,,ValueError: Cannot take a larger sample than population when 'replace=False'
909,2022-05-13 15:59:28,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
910,2022-05-13 17:02:19,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
911,2022-05-13 17:02:28,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
912,2022-05-13 17:02:50,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
913,2022-05-13 17:06:35,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
914,2022-05-13 17:07:50,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
915,2022-05-13 17:11:49,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
916,2022-05-13 17:13:06,y_pred = model.predict(X_test),AttributeError: 'RandomForestClassifier' object has no attribute 'n_classes_'
917,2022-05-13 17:13:14,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float64')."
918,2022-05-13 17:15:41,np.where( np.isnan(X) ),NameError: name 'X' is not defined
919,2022-05-13 17:16:58,np.where( np.isnan(y_train) ),"TypeError: ufunc 'isnan' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''"
920,2022-05-13 17:18:15,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
921,2022-05-13 17:19:28,np.where( np.isnan(y_train) ),"TypeError: ufunc 'isnan' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''"
922,2022-05-13 17:20:15,np.where( np.isnan(y_train) ),"TypeError: ufunc 'isnan' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''"
923,2022-05-13 17:24:58,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
924,2022-05-13 17:30:21,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
925,2022-05-13 17:30:26,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
926,2022-05-13 17:35:00,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
927,2022-05-13 17:41:12,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
928,2022-05-13 17:41:34,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
929,2022-05-13 17:42:44,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
930,2022-05-13 17:47:17,describe(X_train_pr_name),NameError: name 'describe' is not defined
931,2022-05-13 17:51:23,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
932,2022-05-15 00:45:53,  B-(A-n)*x,KeyboardInterrupt: 
933,2022-05-15 00:46:32,  B-(A-n+1)*x,KeyboardInterrupt: 
934,2022-05-15 05:03:45,prunt(1+2),NameError: name 'prunt' is not defined
935,2022-05-16 04:21:26,df = pd.read_csv('boston.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'boston.csv'
936,2022-05-16 04:30:26,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc214/tasks/abc214_b', 'S, T = map(int, input().split())\ncombs=[]\nfor a in range(10):\n    for b in range(10):\n        for c in range(10):\n            if a+b+c <= S and a*b*c <=T:\n                combs.append((a,b,c))\nprint(len(combs))')",UsageError: Cell magic `%%atcoder` not found.
937,2022-05-16 04:47:11,"plt.figure(figsize=(7, 7))",NameError: name 'plt' is not defined
938,2022-05-16 04:59:12,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
939,2022-05-16 04:59:40,"print(""MSE: "", mean_squared_error(y_test, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [152, 506]"
940,2022-05-16 04:59:51,"print(""MSE: "", mean_squared_error(y_test, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [152, 506]"
941,2022-05-16 04:59:52,"print(""MSE: "", mean_squared_error(_test, y_pred))",NameError: name '_test' is not defined
942,2022-05-16 04:59:55,"print('R2', r2_score(y, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [506, 152]"
943,2022-05-16 04:59:58,"model,fit(X_train,y_train)",NameError: name 'fit' is not defined
944,2022-05-16 04:59:58,"print(""MSE "", mean_squared_error(y_test, y_pred) ) ","ValueError: Found input variables with inconsistent numbers of samples: [152, 506]"
945,2022-05-16 05:00:02,"print(""MSE: "", mean_squared_error(y_test, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [152, 506]"
946,2022-05-16 05:00:04,"print(""MSE: "", mean_squared_error(y_test, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [152, 506]"
947,2022-05-16 05:00:06,"print(""MSE: "", mean_squared_error(y_test, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [152, 506]"
948,2022-05-16 05:00:07,"print(""MSE: "", mean_squared_error(y_test, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [152, 506]"
949,2022-05-16 05:00:07,"print(""MSE: "", mean_squared_error(y_test, y_pred) ) ","ValueError: Found input variables with inconsistent numbers of samples: [152, 506]"
950,2022-05-16 05:00:10,"print('R2', r2_score(y, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [506, 152]"
951,2022-05-16 05:00:52,"plt.scatter(y_train, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
952,2022-05-16 05:01:04,"print(""MSE: "", mean_squared_error(x_test,y_pred))",NameError: name 'x_test' is not defined
953,2022-05-16 05:01:08,"print('R2(テスト):', r2_score(y_test, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [152, 506]"
954,2022-05-16 05:01:15,"cross_val_score(モデル, X, y, cv=5, scoring='r2')",NameError: name 'cross_val_score' is not defined
955,2022-05-16 05:01:21,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
956,2022-05-16 05:01:28,"plt.scatter(x, y_pred, c='red', alpha=0.3)",NameError: name 'x' is not defined
957,2022-05-16 05:01:47,"plt.scatter(X_test , y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
958,2022-05-16 05:02:18,"plt.scatter(y , y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
959,2022-05-16 05:03:06,"plt.scatter(y , y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
960,2022-05-16 05:05:43,"cross_val_score(モデル, X, y, cv=5, scoring='r2')",NameError: name 'cross_val_score' is not defined
961,2022-05-16 05:07:08,"cross_val_score(モデル, X, y, cv=5, scoring='r2')",NameError: name 'cross_val_score' is not defined
962,2022-05-16 05:07:20,"cross_val_score(モデル, X, y, cv=5, scoring='r2')",NameError: name 'cross_val_score' is not defined
963,2022-05-16 05:07:30,"cross_val_score(モデル, X, y, cv=5, scoring='r2')",NameError: name 'cross_val_score' is not defined
964,2022-05-16 05:07:39,print(no.array(scores).mean()),NameError: name 'no' is not defined
965,2022-05-16 05:08:02,print(np.array(scores)).mean(()),AttributeError: 'NoneType' object has no attribute 'mean'
966,2022-05-16 05:08:03,"cross_val_score(モデル, X, y, cv=5, scoring='r2')",NameError: name 'cross_val_score' is not defined
967,2022-05-16 05:08:08,print(np.array(scores).mean()),NameError: name 'np' is not defined
968,2022-05-16 05:08:09,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
969,2022-05-16 05:08:10,"cross_val_score(モデル, X, y, cv=5, scoring='r2')",NameError: name 'モデル' is not defined
970,2022-05-16 05:08:28,"cross_val_score(モデル, X, y, cv=5, scoring='r2')",NameError: name 'モデル' is not defined
971,2022-05-16 05:09:01,"cross_val_score(モデル, X, y, cv=5, scoring='r2')",NameError: name 'モデル' is not defined
972,2022-05-16 05:09:24,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
973,2022-05-16 05:10:55,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
974,2022-05-16 05:12:07,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
975,2022-05-16 05:12:23,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
976,2022-05-16 05:12:41,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
977,2022-05-16 05:12:45,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
978,2022-05-16 05:13:43,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
979,2022-05-16 05:13:47,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
980,2022-05-16 05:13:54,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
981,2022-05-16 05:13:55,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
982,2022-05-16 05:14:00,model = DecisionTreeRegressor(),NameError: name 'DecisionTreeRegressor' is not defined
983,2022-05-16 05:14:02,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
984,2022-05-16 05:14:02,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
985,2022-05-16 05:14:03,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
986,2022-05-16 05:14:08,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
987,2022-05-16 05:14:09,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
988,2022-05-16 05:14:10,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
989,2022-05-16 05:14:23,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
990,2022-05-16 05:14:23,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
991,2022-05-16 05:14:25,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
992,2022-05-16 05:14:26,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
993,2022-05-16 05:14:28,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
994,2022-05-16 05:14:36,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
995,2022-05-16 05:14:38,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
996,2022-05-16 05:14:38,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
997,2022-05-16 05:14:43,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
998,2022-05-16 05:14:52,model = DecisionTreerRegression(),NameError: name 'DecisionTreerRegression' is not defined
999,2022-05-16 05:15:07,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1000,2022-05-16 05:15:08,model = FecisionTreeRegressor(),NameError: name 'FecisionTreeRegressor' is not defined
1001,2022-05-16 05:15:12,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1002,2022-05-16 05:15:14,model = DecisionTreerRegressor(),NameError: name 'DecisionTreerRegressor' is not defined
1003,2022-05-16 05:15:18,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1004,2022-05-16 05:15:19,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1005,2022-05-16 05:15:20,"print(""MSE: "", mean_squared_error(y, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [500, 152]"
1006,2022-05-16 05:15:22,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1007,2022-05-16 05:15:27,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1008,2022-05-16 05:15:30,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1009,2022-05-16 05:15:34,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1010,2022-05-16 05:15:36,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1011,2022-05-16 05:15:43,"plt.barh(y_test,y_pred,c='red',alpha=0.3)",AttributeError: 'Rectangle' object has no property 'c'
1012,2022-05-16 05:15:44,"print('R2', r2_score(y, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [500, 152]"
1013,2022-05-16 05:16:01,"plot_tree(model, feature_names=X.columns, filled=True)",AttributeError: 'LinearRegression' object has no attribute 'tree_'
1014,2022-05-16 05:16:12,"plt.scatter(y, x_pred, c='red', alpha=0.3)",NameError: name 'x_pred' is not defined
1015,2022-05-16 05:16:15,,KeyboardInterrupt: 
1016,2022-05-16 05:16:19,,KeyboardInterrupt: 
1017,2022-05-16 05:16:20,,KeyboardInterrupt: 
1018,2022-05-16 05:16:26,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1019,2022-05-16 05:16:42,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1020,2022-05-16 05:16:43,"plot_tree(model, feature_names=df.columns[:-1], filled=True)",AttributeError: 'LinearRegression' object has no attribute 'tree_'
1021,2022-05-16 05:16:43,"plot_tree(model, feature_names=X.columns[:-1], filled=True)",IndexError: index 11 is out of bounds for axis 0 with size 11
1022,2022-05-16 05:17:07,"plot_tree(model, feature_names=X.columns, filled=True)",AttributeError: 'LinearRegression' object has no attribute 'tree_'
1023,2022-05-16 05:17:18,model = DecisionTreeRegressior(),NameError: name 'DecisionTreeRegressior' is not defined
1024,2022-05-16 05:17:21,model = DecisionTreeRegressior(),NameError: name 'DecisionTreeRegressior' is not defined
1025,2022-05-16 05:17:30,"plot_tree(model, feature_names=X.columns, filled=True)",AttributeError: 'LinearRegression' object has no attribute 'tree_'
1026,2022-05-16 05:17:38,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1027,2022-05-16 05:17:48,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1028,2022-05-16 05:17:49,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1029,2022-05-16 05:18:09,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1030,2022-05-16 05:18:17,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1031,2022-05-16 05:18:18,"plot_tree(model, feature_names=X.columns, filled=True)",AttributeError: 'LinearRegression' object has no attribute 'tree_'
1032,2022-05-16 05:18:20,"plt.scatter(y, y_train, c='red', alpha=0.3)",ValueError: x and y must be the same size
1033,2022-05-16 05:18:26,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1034,2022-05-16 05:18:29,"plt.scatter( c='red', alpha=0.3)",TypeError: scatter() missing 2 required positional arguments: 'x' and 'y'
1035,2022-05-16 05:18:36,"plot_tree(model, feature_names=X.columns, filled=True)",AttributeError: 'LinearRegression' object has no attribute 'tree_'
1036,2022-05-16 05:18:38,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1037,2022-05-16 05:18:46,"plt.scatter( y. y_pred,c='red', alpha=0.3)",AttributeError: 'Series' object has no attribute 'y_pred'
1038,2022-05-16 05:18:47,model.feature_importance,AttributeError: 'DecisionTreeRegressor' object has no attribute 'feature_importance'
1039,2022-05-16 05:18:49,"plt.scatter( y.y_pred,c='red', alpha=0.3)",AttributeError: 'Series' object has no attribute 'y_pred'
1040,2022-05-16 05:18:50,model.featrue_importances_,AttributeError: 'DecisionTreeRegressor' object has no attribute 'featrue_importances_'
1041,2022-05-16 05:18:53,"plt.scatter( y,y_pred,c='red', alpha=0.3)",ValueError: x and y must be the same size
1042,2022-05-16 05:18:55,model.feature_impotences_,AttributeError: 'DecisionTreeRegressor' object has no attribute 'feature_impotences_'
1043,2022-05-16 05:18:57,model.future_importances_,AttributeError: 'LinearRegression' object has no attribute 'future_importances_'
1044,2022-05-16 05:19:00,model.feauture_importance_,AttributeError: 'DecisionTreeRegressor' object has no attribute 'feauture_importance_'
1045,2022-05-16 05:19:08,model.feature_importance_,AttributeError: 'DecisionTreeRegressor' object has no attribute 'feature_importance_'
1046,2022-05-16 05:19:12,model.feature_importences_,AttributeError: 'DecisionTreeRegressor' object has no attribute 'feature_importences_'
1047,2022-05-16 05:19:16,"plot_tree(model, feature_names=X.columns, filled=True)",AttributeError: 'LinearRegression' object has no attribute 'tree_'
1048,2022-05-16 05:19:20,model.feature_inportances_,AttributeError: 'DecisionTreeRegressor' object has no attribute 'feature_inportances_'
1049,2022-05-16 05:19:23,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1050,2022-05-16 05:19:41,model = DiscriptionLinearRegression(),NameError: name 'DiscriptionLinearRegression' is not defined
1051,2022-05-16 05:19:44,"print('R2(訓練):', r2_score(y_train, model.predict(X_train)))","ValueError: Found input variables with inconsistent numbers of samples: [152, 354]"
1052,2022-05-16 05:20:02,"model.fit(X_train, y_train)",ValueError: Number of labels=152 does not match number of samples=354
1053,2022-05-16 05:20:07,model.feature_importances_,AttributeError: 'LinearRegression' object has no attribute 'feature_importances_'
1054,2022-05-16 05:20:18,model = DecisionTreeRegression(),NameError: name 'DecisionTreeRegression' is not defined
1055,2022-05-16 05:20:28,"plt.barh(X_train.columns, model.feature_importances_)",AttributeError: 'DecisionTreeRegressor' object has no attribute 'tree_'
1056,2022-05-16 05:20:34,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1057,2022-05-16 05:20:41,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1058,2022-05-16 05:20:59,"plt.barh(X_train.columns[::-1], model.feature_importances_[::-1])",AttributeError: 'DecisionTreeRegressor' object has no attribute 'tree_'
1059,2022-05-16 05:21:29,model.future_importances_,AttributeError: 'DecisionTreeRegressor' object has no attribute 'future_importances_'
1060,2022-05-16 05:21:44,"plt.barh(X_train.columns[::-1], model.feature_importances[::-1])",AttributeError: 'DecisionTreeRegressor' object has no attribute 'feature_importances'
1061,2022-05-16 05:21:54,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1062,2022-05-16 05:21:58,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1063,2022-05-16 05:22:00,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1064,2022-05-16 05:22:13,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1065,2022-05-16 05:22:13,model = DecisionTreeRegressor(),NameError: name 'DecisionTreeRegressor' is not defined
1066,2022-05-16 05:22:15,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1067,2022-05-16 05:22:19,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1068,2022-05-16 05:22:27,"plt.barh(X_train.columns[::-1], model.feature_importances_[::-1])",AttributeError: 'DecisionTreeRegressor' object has no attribute 'tree_'
1069,2022-05-16 05:22:41,"model.fit(X_train, y_train)",TypeError: fit() missing 1 required positional argument: 'y'
1070,2022-05-16 05:22:42,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1071,2022-05-16 05:22:43,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1072,2022-05-16 05:22:43,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1073,2022-05-16 05:22:44,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1074,2022-05-16 05:22:45,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1075,2022-05-16 05:22:45,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1076,2022-05-16 05:22:48,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1077,2022-05-16 05:22:58,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1078,2022-05-16 05:23:01,model = DecisionTreeRegressor(maxdeapth=3),TypeError: __init__() got an unexpected keyword argument 'maxdeapth'
1079,2022-05-16 05:23:04,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1080,2022-05-16 05:23:08,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1081,2022-05-16 05:23:09,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1082,2022-05-16 05:23:11,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1083,2022-05-16 05:23:12,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1084,2022-05-16 05:23:16,"model.fit(X_train, y_train)",TypeError: fit() missing 1 required positional argument: 'y'
1085,2022-05-16 05:23:17,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1086,2022-05-16 05:23:20,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1087,2022-05-16 05:23:23,model = DecisionTreeRegressor(maxdeepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdeepth'
1088,2022-05-16 05:23:35,model = DecisionTreeRegressor(model = DecisionTreeRegressor(max_depth=3)),TypeError: __init__() got an unexpected keyword argument 'model'
1089,2022-05-16 05:23:45,model = LinearRegression(max_depth=3),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1090,2022-05-16 05:23:48,"model.fit(X_train, y_train)",ValueError: Number of labels=152 does not match number of samples=354
1091,2022-05-16 05:24:05,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1092,2022-05-16 05:24:14,"model.fit(X_train, y_train)",ValueError: Number of labels=152 does not match number of samples=354
1093,2022-05-16 05:24:23,model = LinearRegression(max_depth=3),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1094,2022-05-16 05:24:34,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1095,2022-05-16 05:24:37,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1096,2022-05-16 05:24:58,"plot_tree(model, feature_names=X.columns, filled=True)",AttributeError: 'LinearRegression' object has no attribute 'tree_'
1097,2022-05-16 05:25:10,model = DecisionTreeRegressor(maxdepth=3),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1098,2022-05-16 05:25:20,"plt.barh(X_train.columns, model.feature_importances_)",AttributeError: 'DecisionTreeRegressor' object has no attribute 'tree_'
1099,2022-05-16 05:25:53,"    model.fit(X_train, y_train)",ValueError: Number of labels=152 does not match number of samples=354
1100,2022-05-16 05:26:14,"model.fit(X_train, y_train)",ValueError: Number of labels=152 does not match number of samples=354
1101,2022-05-16 05:27:13,"cross_val_score(モデル, X, y, cv=5, scoring='r2')",NameError: name 'モデル' is not defined
1102,2022-05-16 05:27:34,"model.fit(X_train, y_train)",ValueError: Number of labels=152 does not match number of samples=354
1103,2022-05-16 05:27:42,"    model.fit(X_train, y_train)",ValueError: Number of labels=152 does not match number of samples=354
1104,2022-05-16 05:28:50,"plt.barh(X_train.columns[::-1], model.feature_importances_[::-1])",AttributeError: 'DecisionTreeRegressor' object has no attribute 'tree_'
1105,2022-05-16 05:30:06,"plt.barh(X_train.columns[:-1], model.DecisionTreeRegressor)",AttributeError: 'DecisionTreeRegressor' object has no attribute 'DecisionTreeRegressor'
1106,2022-05-16 05:30:10,,ValueError: shape mismatch: objects cannot be broadcast to a single shape
1107,2022-05-16 05:30:36,"plt.barh(X_train.columns[::-1], model.feature_importances_[::-1])",AttributeError: 'DecisionTreeRegressor' object has no attribute 'tree_'
1108,2022-05-16 05:30:42,model.feature_importances_,AttributeError: 'DecisionTreeRegressor' object has no attribute 'tree_'
1109,2022-05-16 05:30:57,"for column, importance in zip(X_train.columns, model.feature_importances_):",AttributeError: 'DecisionTreeRegressor' object has no attribute 'tree_'
1110,2022-05-16 05:31:33,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1111,2022-05-16 05:32:13,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1112,2022-05-16 05:33:38,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1113,2022-05-16 05:33:42,    model = SVR(max_depth=depth)  # None 制限なし,NameError: name 'SVR' is not defined
1114,2022-05-16 05:33:53,    model = SVR(max_depth=depth)  # None 制限なし,TypeError: __init__() got an unexpected keyword argument 'max_depth'
1115,2022-05-16 05:34:43,model = SVR(max_depth=5) # 木の深さを指定,TypeError: __init__() got an unexpected keyword argument 'max_depth'
1116,2022-05-16 05:34:46,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1117,2022-05-16 05:34:52,model = MLPRegressor(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1118,2022-05-16 05:34:58,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1119,2022-05-16 05:35:31,model = DecisionTreeRegressor(maxdepth=2),TypeError: __init__() got an unexpected keyword argument 'maxdepth'
1120,2022-05-16 05:35:52,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1121,2022-05-16 05:36:04,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1122,2022-05-16 05:36:09,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1123,2022-05-16 05:36:16,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1124,2022-05-16 05:36:22,model = SVR(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1125,2022-05-16 05:36:28,model = Polynomial_deg3(max_depth=5) #max_depthで決定木の深さを設定,NameError: name 'Polynomial_deg3' is not defined
1126,2022-05-16 05:36:29,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1127,2022-05-16 05:36:43,"model.fit(X_train, y_train)",AttributeError: 'tuple' object has no attribute 'fit'
1128,2022-05-16 05:36:44,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1129,2022-05-16 05:36:51,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1130,2022-05-16 05:37:15,"model = SVR, LinearSVR(max_depth=5)",TypeError: __init__() got an unexpected keyword argument 'max_depth'
1131,2022-05-16 05:37:51,"model.fit(X_train, y_train)",AttributeError: 'tuple' object has no attribute 'fit'
1132,2022-05-16 05:37:56,"model = SVR, LinearSVR(max_depth=5) #max_depthで決定木の深さを設定",TypeError: __init__() got an unexpected keyword argument 'max_depth'
1133,2022-05-16 05:38:15,model = enable_hist_gradient_boosting(),TypeError: 'module' object is not callable
1134,2022-05-16 05:38:35,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1135,2022-05-16 05:38:40,y_pred = model.predict(X_test),AttributeError: 'PolynomialFeatures' object has no attribute 'predict'
1136,2022-05-16 05:38:48,model=RandomForestRegressor(),NameError: name 'RandomForestRegressor' is not defined
1137,2022-05-16 05:38:50,from sklearn.tree import RandomForestRegressor,ImportError: cannot import name 'RandomForestRegressor' from 'sklearn.tree' (/usr/local/lib/python3.7/dist-packages/sklearn/tree/__init__.py)
1138,2022-05-16 05:39:04,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1139,2022-05-16 05:39:22,from sklearn.ensemble import RandomForestRegresso,ImportError: cannot import name 'RandomForestRegresso' from 'sklearn.ensemble' (/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/__init__.py)
1140,2022-05-16 05:39:22,"model.fit(X_train, y_train)",TypeError: fit() missing 1 required positional argument: 'y'
1141,2022-05-16 05:39:24,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1142,2022-05-16 05:40:56,print(S[1]),IndexError: list index out of range
1143,2022-05-16 05:41:00,"plot_tree(model, feature_names=X.columns, filled=True)",AttributeError: 'LinearRegression' object has no attribute 'tree_'
1144,2022-05-16 05:41:22,model = BaggingRegressor(max_depth=5) #max_depth=◯とは、深さが深さが○ということ,TypeError: __init__() got an unexpected keyword argument 'max_depth'
1145,2022-05-16 05:41:42,"plot_tree(model, feature_names=X.columns, filled=True)",AttributeError: 'RandomForestRegressor' object has no attribute 'tree_'
1146,2022-05-16 05:41:47,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1147,2022-05-16 05:42:11,"for column, importance in zip(X_train.columns, model.RandomForestRegressor):",AttributeError: 'RandomForestRegressor' object has no attribute 'RandomForestRegressor'
1148,2022-05-16 05:42:19,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1149,2022-05-16 05:42:21,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1150,2022-05-16 05:42:21,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1151,2022-05-16 05:42:55,reg_dict = {RandomForestRegressor()},NameError: name 'RandomForestRegressor' is not defined
1152,2022-05-16 05:42:57,df = pd.read_csv('bento_train.csv'),NameError: name 'pd' is not defined
1153,2022-05-16 05:43:06,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1154,2022-05-16 05:43:11,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1155,2022-05-16 05:43:12,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1156,2022-05-16 05:43:15,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1157,2022-05-16 05:43:18,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1158,2022-05-16 05:43:20,"model = BaggingRegressor(base_estimator=SVR(), n_estimators=10)",NameError: name 'SVR' is not defined
1159,2022-05-16 05:43:26,model = RandomForestRegressor(max_depth=3),NameError: name 'RandomForestRegressor' is not defined
1160,2022-05-16 05:43:27,"plot_tree(model, feature_names=X.columns, filled=True)",AttributeError: 'RandomForestRegressor' object has no attribute 'tree_'
1161,2022-05-16 05:43:30,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1162,2022-05-16 05:43:35,    model = PassiveAggressiveRegressor(max_depth=depth)  # None 制限なし,TypeError: __init__() got an unexpected keyword argument 'max_depth'
1163,2022-05-16 05:43:41,df = pd.read_csv('bento_train.csv'),NameError: name 'pd' is not defined
1164,2022-05-16 05:43:42,model = LinearSVR(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1165,2022-05-16 05:44:02,    model = TheilSenRegressor(max_depth=depth)  # None 制限なし,TypeError: __init__() got an unexpected keyword argument 'max_depth'
1166,2022-05-16 05:44:03,model = SVR(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1167,2022-05-16 05:44:05,"get_ipython().run_cell_magic('', 'kogi', ""\n!wget https://kkuramitsu.github.io/lec/data/bento.csv\ndf = pd.read_csv('bento_train.csv')"")",UsageError: Cell magic `%%` not found.
1168,2022-05-16 05:44:08,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1169,2022-05-16 05:44:20,model = enable_hist_gradient_boosting(),TypeError: 'module' object is not callable
1170,2022-05-16 05:44:21,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1171,2022-05-16 05:44:24,"model.fit(X_train, y_train)",AttributeError: 'tuple' object has no attribute 'fit'
1172,2022-05-16 05:44:24,df = pd.read_csv('bento_train.csv'),NameError: name 'pd' is not defined
1173,2022-05-16 05:44:32,"get_ipython().run_cell_magic('', 'kogi', ""!wget https://kkuramitsu.github.io/lec/data/bento.csv\ndf = pd.read_csv('bento_train.csv')"")",UsageError: Cell magic `%%` not found.
1174,2022-05-16 05:44:55,model = enable_hist_gradient_boosting(),TypeError: 'module' object is not callable
1175,2022-05-16 05:45:04,model = TheilSenRegressor(max_depth=8),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1176,2022-05-16 05:45:19,"get_ipython().run_cell_magic('', 'kogi', ""!wget https://kkuramitsu.github.io/lec/data/bento.csv\ndf = pd.read_csv('bento_train.csv')\ndf.head()"")",UsageError: Cell magic `%%` not found.
1177,2022-05-16 05:45:23,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1178,2022-05-16 05:45:25,df = pd.read_csv('bento_train.csv'),NameError: name 'pd' is not defined
1179,2022-05-16 05:45:27,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1180,2022-05-16 05:45:33,model = AdaBoostRegressor(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1181,2022-05-16 05:45:39,from sklearn.linear_model import MLPRegressor,ImportError: cannot import name 'MLPRegressor' from 'sklearn.linear_model' (/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/__init__.py)
1182,2022-05-16 05:45:49,"df = pd.read_csv(""bento_train.csv"")",FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1183,2022-05-16 05:45:50,model = MLPRegressor(max_depth=8),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1184,2022-05-16 05:45:56,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1185,2022-05-16 05:45:59,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1186,2022-05-16 05:45:59,model =PolynomialFeatures(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1187,2022-05-16 05:46:01,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1188,2022-05-16 05:46:07,"model.fit(X_train, y_train)",TypeError: fit() missing 1 required positional argument: 'y'
1189,2022-05-16 05:46:08,"model.fit(X_train, y_train)",AttributeError: 'DataFrame' object has no attribute '_validate_data'
1190,2022-05-16 05:46:09,df = read_csv('bento_train.csv'),NameError: name 'read_csv' is not defined
1191,2022-05-16 05:46:18,"print(""MSE: "", mean_squared_error(y, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [10, 152]"
1192,2022-05-16 05:46:20,model =   GradientBoostingRegressor(random_state=0),NameError: name 'GradientBoostingRegressor' is not defined
1193,2022-05-16 05:46:27,"model =  Pipeline([('poly', PolynomialFeatures(degree=5)),('linear', LinearRegression())])",NameError: name 'PolynomialFeatures' is not defined
1194,2022-05-16 05:46:30,model = GradientBoostingRegressor(random_dtate=0),TypeError: __init__() got an unexpected keyword argument 'random_dtate'
1195,2022-05-16 05:46:37,model=GradientBoostingRegressor(random_state=0),NameError: name 'GradientBoostingRegressor' is not defined
1196,2022-05-16 05:46:37,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1197,2022-05-16 05:46:38,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1198,2022-05-16 05:46:49,model = MLPRegressor(max_depth=4),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1199,2022-05-16 05:47:03,    model = GaussianProcessRegressor(max_depth=depth)  # None 制限なし,TypeError: __init__() got an unexpected keyword argument 'max_depth'
1200,2022-05-16 05:47:22,"model.fit(X_train, y_train)",TypeError: fit() missing 1 required positional argument: 'y'
1201,2022-05-16 05:47:22,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1202,2022-05-16 05:47:26,model=GradientBoostingRegressor(random_state=0),NameError: name 'GradientBoostingRegressor' is not defined
1203,2022-05-16 05:47:28,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1204,2022-05-16 05:47:33,"print(""MSE: "", mean_squared_error(y, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [10, 152]"
1205,2022-05-16 05:47:35,model = MLPRegressor(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1206,2022-05-16 05:47:35,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1207,2022-05-16 05:47:36,"plot_tree(model, feature_names=X.columns, filled=True)",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1208,2022-05-16 05:47:37,model = KNeighborsRegressor(n_neighbors=3),NameError: name 'KNeighborsRegressor' is not defined
1209,2022-05-16 05:47:41,"model =RandomForestRegressor(),",NameError: name 'RandomForestRegressor' is not defined
1210,2022-05-16 05:47:42,"print('R2(訓練):', r2_score(y_train, model.predict(X_train)))",NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1211,2022-05-16 05:47:45,y_pred = model.predict(X_test),NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1212,2022-05-16 05:47:51,model = GaussianProcessRegressor(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1213,2022-05-16 05:47:52,"model.fit(X_train, y_train)",TypeError: fit() missing 1 required positional argument: 'y'
1214,2022-05-16 05:47:55,model =RandomForestRegressor(),NameError: name 'RandomForestRegressor' is not defined
1215,2022-05-16 05:48:01,y_pred = model.predict(X_test),AttributeError: 'PolynomialFeatures' object has no attribute 'predict'
1216,2022-05-16 05:48:02,model = SVR(random_state=0),TypeError: __init__() got an unexpected keyword argument 'random_state'
1217,2022-05-16 05:48:02,    model = MLPRegressor(max_depth=depth)  # None 制限なし,TypeError: __init__() got an unexpected keyword argument 'max_depth'
1218,2022-05-16 05:48:07,"model =Pipeline([('poly', PolynomialFeatures(degree=5)),('linear', LinearRegression())])",NameError: name 'Pipeline' is not defined
1219,2022-05-16 05:48:08,model = SVR(random_state=0),TypeError: __init__() got an unexpected keyword argument 'random_state'
1220,2022-05-16 05:48:18,"plot_tree(model, feature_names=X.columns, filled=True)",AttributeError: 'LinearRegression' object has no attribute 'tree_'
1221,2022-05-16 05:48:21,"model.fit(X_train, y_train)",TypeError: fit() missing 1 required positional argument: 'y'
1222,2022-05-16 05:48:22,model = SVR(random_state=0),TypeError: __init__() got an unexpected keyword argument 'random_state'
1223,2022-05-16 05:48:29,model = Pipeline(),TypeError: __init__() missing 1 required positional argument: 'steps'
1224,2022-05-16 05:48:34,model = BaggingRegressor(max_depth=3),NameError: name 'BaggingRegressor' is not defined
1225,2022-05-16 05:48:37,"plot_tree(model, feature_names=X.columns, filled=True)",AttributeError: 'LinearRegression' object has no attribute 'tree_'
1226,2022-05-16 05:48:37,model = BaggingRegressor(max_depth=3),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1227,2022-05-16 05:48:40,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1228,2022-05-16 05:48:48,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1229,2022-05-16 05:49:03,model =RandomForestRegressor(),NameError: name 'RandomForestRegressor' is not defined
1230,2022-05-16 05:49:06,model = Polynomial_deg5,NameError: name 'Polynomial_deg5' is not defined
1231,2022-05-16 05:49:06,    model = MLPRegressor(max_depth=depth)  # None 制限なし,TypeError: __init__() got an unexpected keyword argument 'max_depth'
1232,2022-05-16 05:49:06,"plot_tree(model, feature_names=X.columns, filled=True)",AttributeError: 'LinearRegression' object has no attribute 'tree_'
1233,2022-05-16 05:49:09,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1234,2022-05-16 05:49:10,model = PolynomialFeatures(max_depth=4),NameError: name 'PolynomialFeatures' is not defined
1235,2022-05-16 05:49:16,from sklearn.ensemble import Pipeline,ImportError: cannot import name 'Pipeline' from 'sklearn.ensemble' (/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/__init__.py)
1236,2022-05-16 05:49:34,    model = MLPRegressor(max_depth=3)  # None 制限なし,TypeError: __init__() got an unexpected keyword argument 'max_depth'
1237,2022-05-16 05:49:40,model = Pipeline(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1238,2022-05-16 05:49:41,model =RandomForestRegressor(),NameError: name 'RandomForestRegressor' is not defined
1239,2022-05-16 05:49:48,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1240,2022-05-16 05:49:49,model = GaussianProcessRegressor(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1241,2022-05-16 05:49:50,model = Pipeline(),TypeError: __init__() missing 1 required positional argument: 'steps'
1242,2022-05-16 05:49:52,model = enable_hist_gradient_boosting() # 木の深さを指定,TypeError: 'module' object is not callable
1243,2022-05-16 05:49:55,"model = BaggingRegressor(base_estimator=SVR(), n_estimators=10)",NameError: name 'SVR' is not defined
1244,2022-05-16 05:50:07,model =RandomForestRegressor(),NameError: name 'RandomForestRegressor' is not defined
1245,2022-05-16 05:50:10,from sklearn.gaussian_process import GaussianBoostingRegressor,ImportError: cannot import name 'GaussianBoostingRegressor' from 'sklearn.gaussian_process' (/usr/local/lib/python3.7/dist-packages/sklearn/gaussian_process/__init__.py)
1246,2022-05-16 05:50:32,"model = Pipeline([('poly', PolynomialFeatures(degree=5)),('linear', LinearRegression())])",NameError: name 'PolynomialFeatures' is not defined
1247,2022-05-16 05:50:33,from sklearn.ensemble import GaussianProcessRegressor,ImportError: cannot import name 'GaussianProcessRegressor' from 'sklearn.ensemble' (/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/__init__.py)
1248,2022-05-16 05:50:33,model =GaussianProcessRegressor(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1249,2022-05-16 05:50:34,model = MLPRegressor(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1250,2022-05-16 05:50:51,model = AdaBoostRegressor(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1251,2022-05-16 05:50:52,"print('R2(テスト):', r2_score(y_train, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [354, 152]"
1252,2022-05-16 05:51:04,model = MLPRegressor(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1253,2022-05-16 05:51:05,"print('R2(テスト):', r2_score(y_train, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [354, 152]"
1254,2022-05-16 05:51:07,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1255,2022-05-16 05:51:19,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1256,2022-05-16 05:51:30,"model.fit(X_train, y_train)",TypeError: fit() missing 1 required positional argument: 'y'
1257,2022-05-16 05:51:34,model = Pipeline(),TypeError: __init__() missing 1 required positional argument: 'steps'
1258,2022-05-16 05:51:38,from janome.tokenizer import Tokenizer,ModuleNotFoundError: No module named 'janome'
1259,2022-05-16 05:52:07,from janome.tokenizer import Tokenizer,ModuleNotFoundError: No module named 'janome'
1260,2022-05-16 05:52:16,model = KNeighborsRegressor(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1261,2022-05-16 05:52:23,from sklearn.gaussian_process import PassiveAggressiveRegressor,ImportError: cannot import name 'PassiveAggressiveRegressor' from 'sklearn.gaussian_process' (/usr/local/lib/python3.7/dist-packages/sklearn/gaussian_process/__init__.py)
1262,2022-05-16 05:52:30,"model = BaggingRegressor(base_estimator=SVR(), n_estimators=10)",NameError: name 'SVR' is not defined
1263,2022-05-16 05:52:36,y_pred = model.predict(X_test),NotFittedError: This MLPRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1264,2022-05-16 05:52:43,"from sklearn.neighbors import SVR, LinearSVR",ImportError: cannot import name 'SVR' from 'sklearn.neighbors' (/usr/local/lib/python3.7/dist-packages/sklearn/neighbors/__init__.py)
1265,2022-05-16 05:52:44,from sklearn.ensemble import MLPRegressor,ImportError: cannot import name 'MLPRegressor' from 'sklearn.ensemble' (/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/__init__.py)
1266,2022-05-16 05:52:52,from sklearn.neighbors import SVR,ImportError: cannot import name 'SVR' from 'sklearn.neighbors' (/usr/local/lib/python3.7/dist-packages/sklearn/neighbors/__init__.py)
1267,2022-05-16 05:52:57,y_pred = model.predict(X_test),AttributeError: 'PolynomialFeatures' object has no attribute 'predict'
1268,2022-05-16 05:53:03,from sklearn.gaussian_process import PolynomialFeatures,ImportError: cannot import name 'PolynomialFeatures' from 'sklearn.gaussian_process' (/usr/local/lib/python3.7/dist-packages/sklearn/gaussian_process/__init__.py)
1269,2022-05-16 05:53:11,model = PLSRegression(max_depth=4),NameError: name 'PLSRegression' is not defined
1270,2022-05-16 05:53:12,y_pred = model.predict(X_test),NotFittedError: This SVR instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1271,2022-05-16 05:53:27,y_pred = model.predict(X_test),AttributeError: 'PolynomialFeatures' object has no attribute 'predict'
1272,2022-05-16 05:53:54,model = PLSRegression(),NameError: name 'PLSRegression' is not defined
1273,2022-05-16 05:54:18,model = SVR(max_depth=3),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1274,2022-05-16 05:54:24,model = TheilSenRegresso(),NameError: name 'TheilSenRegresso' is not defined
1275,2022-05-16 05:54:39,from sklearn.ensemble import KNeighborsRegressor,ImportError: cannot import name 'KNeighborsRegressor' from 'sklearn.ensemble' (/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/__init__.py)
1276,2022-05-16 05:54:46,"plt.barh(X_train.columns, model.feature_importances_)",AttributeError: 'PLSRegression' object has no attribute 'feature_importances_'
1277,2022-05-16 05:55:16,"for column, importance in zip(X_train.columns, model.feature_importances_):",AttributeError: 'PLSRegression' object has no attribute 'feature_importances_'
1278,2022-05-16 05:55:19,from sklearn.gaussian_process import GaussianBoostingRegressor,ImportError: cannot import name 'GaussianBoostingRegressor' from 'sklearn.gaussian_process' (/usr/local/lib/python3.7/dist-packages/sklearn/gaussian_process/__init__.py)
1279,2022-05-16 05:55:22,model = RANSACRegressorr(),NameError: name 'RANSACRegressorr' is not defined
1280,2022-05-16 05:55:25,"plot_tree(model, feature_names=X.columns, filled=True)",AttributeError: 'PLSRegression' object has no attribute 'tree_'
1281,2022-05-16 05:55:41,y = df['住宅価格'],KeyError: '住宅価格'
1282,2022-05-16 05:55:51,model = Pipeline(),TypeError: __init__() missing 1 required positional argument: 'steps'
1283,2022-05-16 05:56:09,model =GaussianBoostingRegressor(),NameError: name 'GaussianBoostingRegressor' is not defined
1284,2022-05-16 05:56:30,model =Pipeline(),TypeError: __init__() missing 1 required positional argument: 'steps'
1285,2022-05-16 05:56:39,model = LinearSVRr(),NameError: name 'LinearSVRr' is not defined
1286,2022-05-16 05:56:40,model = Pipeline(),TypeError: __init__() missing 1 required positional argument: 'steps'
1287,2022-05-16 05:56:48,"plt.barh(y_test,y_pred,c='red',alpha=0.3)",AttributeError: 'Rectangle' object has no property 'c'
1288,2022-05-16 05:57:01,model = VotingRegressor(),TypeError: __init__() missing 1 required positional argument: 'estimators'
1289,2022-05-16 05:57:08,model = PassiveAggressiveRegressor(max_depth=3),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1290,2022-05-16 05:57:15,y = df['販売数'],KeyError: '販売数'
1291,2022-05-16 05:57:21,model = VotingRegressor(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1292,2022-05-16 05:57:36,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1293,2022-05-16 05:57:38,"model = Pipeline([('poly', PolynomialFeatures(degree=2)),('linear', LinearRegression())])",NameError: name 'Pipeline' is not defined
1294,2022-05-16 05:57:56,y_pred = model.predict(X_test),AttributeError: 'PolynomialFeatures' object has no attribute 'predict'
1295,2022-05-16 05:57:57,model = VotingRegressor(),TypeError: __init__() missing 1 required positional argument: 'estimators'
1296,2022-05-16 05:58:10,model = GaussianProcessRegressor(max_depth=5),TypeError: __init__() got an unexpected keyword argument 'max_depth'
1297,2022-05-16 05:58:18,y = df['住宅価格'],KeyError: '住宅価格'
1298,2022-05-16 05:58:25,model = Pipeline(),TypeError: __init__() missing 1 required positional argument: 'steps'
1299,2022-05-16 05:58:59,"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","ValueError: Found input variables with inconsistent numbers of samples: [500, 10]"
1300,2022-05-16 05:59:06,"model.fit(X_train, y)","ValueError: Found input variables with inconsistent numbers of samples: [354, 500]"
1301,2022-05-16 05:59:34,"plt.scatter(y_train, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1302,2022-05-16 05:59:46,"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","ValueError: Found input variables with inconsistent numbers of samples: [500, 10]"
1303,2022-05-16 05:59:53,model=PLSRegression(n_components=10),NameError: name 'PLSRegression' is not defined
1304,2022-05-16 05:59:54,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
1305,2022-05-16 06:00:07,"plt.scatter(x_pred, y_pred, c='red', alpha=0.3)",NameError: name 'x_pred' is not defined
1306,2022-05-16 06:01:18,"model.fit(X_train, y_train)",KeyboardInterrupt: 
1307,2022-05-16 06:12:23,GPC,NameError: name 'GPC' is not defined
1308,2022-05-16 06:15:46,"a=sorted(a,key=lambda x: x[m])",TypeError: '<' not supported between instances of 'int' and 'str'
1309,2022-05-16 06:16:39,N[0] = S,NameError: name 'S' is not defined
1310,2022-05-16 06:16:40,"S[0],S[2]=S[2],S[0]",TypeError: 'str' object does not support item assignment
1311,2022-05-16 06:20:19,  x == b,NameError: name 'x' is not defined
1312,2022-05-16 06:20:28,  x == b,NameError: name 'x' is not defined
1313,2022-05-16 06:22:01,n = int(input()),ValueError: invalid literal for int() with base 10: '3.456'
1314,2022-05-16 06:22:03,  (ans) == b,NameError: name 'ans' is not defined
1315,2022-05-16 06:23:12,while a>=Y:,NameError: name 'a' is not defined
1316,2022-05-16 06:24:19,"print(n.replace(1,'x').replace(9,1).replace('x',9))","TypeError: replace() argument 1 must be str, not int"
1317,2022-05-16 06:26:44,"print(n.replace(1,9).replace(9,1))",AttributeError: 'int' object has no attribute 'replace'
1318,2022-05-16 06:27:46,  a==(Y-X)//10,NameError: name 'a' is not defined
1319,2022-05-16 06:28:32,  print(a),KeyboardInterrupt: 
1320,2022-05-16 06:28:36,"print(n[1],n[9])",IndexError: list index out of range
1321,2022-05-16 06:29:15,"a,b,c,d=map(int,input().split())",ValueError: invalid literal for int() with base 10: '1]'
1322,2022-05-16 06:29:41,print(x*y),TypeError: unsupported operand type(s) for *: 'range' and 'range'
1323,2022-05-16 06:30:11,"print(int.replace('1', '9').replace('9', '1'))",AttributeError: type object 'int' has no attribute 'replace'
1324,2022-05-16 06:30:13,print(max(x*y)),TypeError: unsupported operand type(s) for *: 'range' and 'range'
1325,2022-05-16 06:30:49,print(S[-1]+S-S[0]),TypeError: unsupported operand type(s) for -: 'str' and 'str'
1326,2022-05-16 06:30:57,"print(s.replace('1', '9').replace('9', '1'))",NameError: name 's' is not defined
1327,2022-05-16 06:31:10,"print(n.replace('1', '9').replace('9', '1'))",AttributeError: 'int' object has no attribute 'replace'
1328,2022-05-16 06:33:10,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc222/tasks/abc2', ""N=int(input())\nprint(f'N:4d')"")","KogiError: {""translated"": ""\u554f\u984c\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3002"", ""reason"": ""\u554f\u984c\u306e\u6307\u5b9a\u65b9\u6cd5\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u3059"", ""hint"": ""\u554f\u984c\u30da\u30fc\u30b8\u306eURL\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044"", ""solution"": ""%%atcoder \u554f\u984c\u30da\u30fc\u30b8\u306eURL""}"
1329,2022-05-16 06:33:17,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc222/tasks/abc2', ""N=int(input())\nprint(f'N:4d')"")","KogiError: {""translated"": ""\u554f\u984c\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3002"", ""reason"": ""\u554f\u984c\u306e\u6307\u5b9a\u65b9\u6cd5\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u3059"", ""hint"": ""\u554f\u984c\u30da\u30fc\u30b8\u306eURL\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044"", ""solution"": ""%%atcoder \u554f\u984c\u30da\u30fc\u30b8\u306eURL""}"
1330,2022-05-16 06:33:26,      mean_lists.append(mean_list(s1)),TypeError: 'list' object is not callable
1331,2022-05-16 06:33:38,      mean_lists.append(mean_list(s1)),TypeError: 'list' object is not callable
1332,2022-05-16 06:34:06,N=NN % 10,NameError: name 'NN' is not defined
1333,2022-05-16 06:34:12,      mean_lists.append(mean_list(s1)),TypeError: 'list' object is not callable
1334,2022-05-16 06:34:26,N = int(input),"TypeError: int() argument must be a string, a bytes-like object or a number, not 'function'"
1335,2022-05-16 06:34:31,      mean_lists.append(mean_list(s1)),TypeError: 'list' object is not callable
1336,2022-05-16 06:35:12,      m1 = mean_list(s1),TypeError: 'list' object is not callable
1337,2022-05-16 06:37:21,"print(n.replace('1', 'X').replace('9', '1').replace('X', '9'))",AttributeError: 'list' object has no attribute 'replace'
1338,2022-05-16 06:37:40,"if N[1] in [2,4,5,7,9]:",TypeError: 'int' object is not subscriptable
1339,2022-05-16 06:37:53,    ans+=x,"TypeError: can only concatenate str (not ""int"") to str"
1340,2022-05-16 06:38:47,A=string[1:],NameError: name 'string' is not defined
1341,2022-05-16 06:39:09,    ss.append(chr(a)),NameError: name 'ss' is not defined
1342,2022-05-16 06:39:46,"if N[1] in [2,4,5,7,9]:",IndexError: string index out of range
1343,2022-05-16 06:39:48,    a=ord(c)+N,NameError: name 'c' is not defined
1344,2022-05-16 06:39:56,N = int(input),"TypeError: int() argument must be a string, a bytes-like object or a number, not 'function'"
1345,2022-05-16 06:40:01,  ss.append(chr(a)) # リストに追加,ValueError: chr() arg not in range(0x110000)
1346,2022-05-16 06:40:09,"a,b,c,d=map(int,input().split())",KeyboardInterrupt: 
1347,2022-05-16 06:40:14,"  s,t=map(srt,input().split())",NameError: name 'srt' is not defined
1348,2022-05-16 06:40:15,    ss.append(chr(a)),NameError: name 'ss' is not defined
1349,2022-05-16 06:40:18,    ss.append(chr(a)),NameError: name 'ss' is not defined
1350,2022-05-16 06:40:27,"  s,t=map(int,input().split())",ValueError: invalid literal for int() with base 10: 'tanaka'
1351,2022-05-16 06:40:33,  ss.append(chr(a))  #リストに追加,NameError: name 'ss' is not defined
1352,2022-05-16 06:40:35,    ss.append(chr(a)),NameError: name 'ss' is not defined
1353,2022-05-16 06:40:37,  s=s+[s+t],"TypeError: can only concatenate str (not ""list"") to str"
1354,2022-05-16 06:40:48,  ss.append(chr(a)) # リストに追加,ValueError: chr() arg not in range(0x110000)
1355,2022-05-16 06:41:04,  ss.apend(chr(a)) #リストに追加,AttributeError: 'list' object has no attribute 'apend'
1356,2022-05-16 06:41:05,  if a > ord('Z'):,TypeError: '>' not supported between instances of 'NoneType' and 'int'
1357,2022-05-16 06:41:24,  if a>ord('Z'):,TypeError: '>' not supported between instances of 'NoneType' and 'int'
1358,2022-05-16 06:41:36,    ss.append(chr(a)),NameError: name 'ss' is not defined
1359,2022-05-16 06:41:39,  ss.append(chr(a)),AttributeError: 'str' object has no attribute 'append'
1360,2022-05-16 06:42:14,print(max(x*y)),TypeError: unsupported operand type(s) for *: 'range' and 'range'
1361,2022-05-16 06:42:22,  ss.apend(chr(a)) #リストに追加,AttributeError: 'list' object has no attribute 'apend'
1362,2022-05-16 06:42:29,print(max(x*y)),TypeError: unsupported operand type(s) for *: 'range' and 'range'
1363,2022-05-16 06:42:50,"A, B = map(int(),input().split())",TypeError: 'int' object is not callable
1364,2022-05-16 06:42:51,  print(''.join(ss)),NameError: name 'ss' is not defined
1365,2022-05-16 06:42:54,"print('',join(ss))   #リストを文字列に",NameError: name 'join' is not defined
1366,2022-05-16 06:43:19,  ss.append(chr(a)),NameError: name 'ss' is not defined
1367,2022-05-16 06:43:34,  if a>ord('Z'):,TypeError: '>' not supported between instances of 'NoneType' and 'int'
1368,2022-05-16 06:44:21,  ss.apend(chr(a)) #リストに追加,AttributeError: 'list' object has no attribute 'apend'
1369,2022-05-16 06:44:58,"print('',join(ss))   #リストを文字列に",NameError: name 'join' is not defined
1370,2022-05-16 06:45:19,S=int(input()),ValueError: invalid literal for int() with base 10: 'abc'
1371,2022-05-16 06:45:33,S=int(input()),ValueError: invalid literal for int() with base 10: 'abc'
1372,2022-05-16 06:46:22,"S[0],S[1],S[2]=S[1],S[2],S[0]",TypeError: 'str' object does not support item assignment
1373,2022-05-16 06:46:30,    means = sum(s_list) / len(s_list),TypeError: unsupported operand type(s) for +: 'int' and 'str'
1374,2022-05-16 06:47:05,N[-1]=a,TypeError: 'int' object does not support item assignment
1375,2022-05-16 06:47:08,"n[1],n[9]=n[9],n[1]",IndexError: list index out of range
1376,2022-05-16 06:47:21,S=list[s],TypeError: 'type' object is not subscriptable
1377,2022-05-16 06:47:29,"n[1],n[9]=n[9],n[1]",IndexError: list index out of range
1378,2022-05-16 06:47:30,N[-1]=a,TypeError: 'int' object does not support item assignment
1379,2022-05-16 06:47:42,N[-1]=a,TypeError: 'str' object does not support item assignment
1380,2022-05-16 06:47:44,"print('',join(ss))   #リストを文字列に",NameError: name 'join' is not defined
1381,2022-05-16 06:47:58,s[0] = [],TypeError: 'str' object does not support item assignment
1382,2022-05-16 06:48:36,"n[1],n[9] = n[9],n[1]",IndexError: list index out of range
1383,2022-05-16 06:49:28,        s[1].append(num),IndexError: string index out of range
1384,2022-05-16 06:49:46,"S[0],S[1],S[2]=S[1],S[2],S[0]",TypeError: 'str' object does not support item assignment
1385,2022-05-16 06:49:50,        s[1].append(num),IndexError: string index out of range
1386,2022-05-16 06:49:59,"n[0], n[4] = n[4], n[0]",IndexError: list index out of range
1387,2022-05-16 06:50:27,    ss.apend(chr(a)) #リストに追加,AttributeError: 'list' object has no attribute 'apend'
1388,2022-05-16 06:51:10,while a<=i:,NameError: name 'i' is not defined
1389,2022-05-16 06:51:25,K=int(input()),ValueError: invalid literal for int() with base 10: 'nikoandsolstice'
1390,2022-05-16 06:51:34,"N=n.replace('1','9')",AttributeError: 'int' object has no attribute 'replace'
1391,2022-05-16 06:51:36,S=int(input()),ValueError: invalid literal for int() with base 10: 'abc'
1392,2022-05-16 06:52:06,S=int(input()),ValueError: invalid literal for int() with base 10: 'abc'
1393,2022-05-16 06:52:45,s=int(input()),ValueError: invalid literal for int() with base 10: 'abc'
1394,2022-05-16 06:52:59,S=int(input()),ValueError: invalid literal for int() with base 10: 'abc'
1395,2022-05-16 06:53:25,"S[0],S[1],S[2]=S[1],S[2],S[0]",TypeError: 'str' object does not support item assignment
1396,2022-05-16 06:54:09,S=int(input()),ValueError: invalid literal for int() with base 10: 'abc'
1397,2022-05-16 06:54:50,print(N),NameError: name 'N' is not defined
1398,2022-05-16 06:55:17,        s[1].append(num),IndexError: string index out of range
1399,2022-05-16 06:55:26,        s[1].append(num),IndexError: string index out of range
1400,2022-05-16 06:55:47,"get_ipython().run_cell_magic('atcoder', '', 'X=int(input())\nY=100\nwhile True:\n  Y=int(Y*1.01)\n  N+=1\n  if Y>X:\n    break\nprint(X)')","KogiError: {""translated"": ""\u554f\u984c\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3002"", ""reason"": ""\u554f\u984c\u306e\u6307\u5b9a\u65b9\u6cd5\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u3059"", ""hint"": ""\u554f\u984c\u30da\u30fc\u30b8\u306eURL\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044"", ""solution"": ""%%atcoder \u554f\u984c\u30da\u30fc\u30b8\u306eURL""}"
1401,2022-05-16 06:56:15,print(len(set(a))),TypeError: unhashable type: 'list'
1402,2022-05-16 06:57:41,"n[1], n[9] = n[9], n[1]",IndexError: list index out of range
1403,2022-05-16 06:58:14,X=int(input()),ValueError: invalid literal for int() with base 10: '80 94'
1404,2022-05-16 06:58:17,"A,B=map(int,input().split())",KeyboardInterrupt: 
1405,2022-05-16 06:58:18,"S[0],S[1],S[2]=S[1],S[2],S[0]",TypeError: 'str' object does not support item assignment
1406,2022-05-16 06:58:43,"n[1], n[9] = n[9], n[1]",TypeError: 'int' object is not subscriptable
1407,2022-05-16 06:58:47,X=int(input()),ValueError: invalid literal for int() with base 10: '3 7'
1408,2022-05-16 06:59:26,while a<=i:,NameError: name 'i' is not defined
1409,2022-05-16 06:59:35,"a,b,c,d=map(int,input().split())",KeyboardInterrupt: 
1410,2022-05-16 07:00:19,"A,B=map(int,input().split())",KeyboardInterrupt: 
1411,2022-05-16 07:00:37,"A,B=map(int,input().split())",KeyboardInterrupt: 
1412,2022-05-16 07:02:01,if N > 4:,TypeError: '>' not supported between instances of 'str' and 'int'
1413,2022-05-16 07:02:33,"A,B=map(int,input().split())",KeyboardInterrupt: 
1414,2022-05-16 07:02:36,"n[1],n[9] = n[9],n[1]",TypeError: 'int' object is not subscriptable
1415,2022-05-16 07:02:48,"n[1],n[9] = n[9],n[1]",IndexError: string index out of range
1416,2022-05-16 07:03:01,"n[1],n[9] = n[9],n[1]",TypeError: 'int' object is not subscriptable
1417,2022-05-16 07:03:16,"n[1],n[9] = n[9],n[1]",IndexError: list index out of range
1418,2022-05-16 07:04:45,if B%A == 0:,TypeError: unsupported operand type(s) for %: 'range' and 'range'
1419,2022-05-16 07:04:56,if B%A == 0:,TypeError: unsupported operand type(s) for %: 'range' and 'range'
1420,2022-05-16 07:05:03,math.ceil(n),NameError: name 'math' is not defined
1421,2022-05-16 07:05:06,"  print(S[0,K]+'...')",TypeError: string indices must be integers
1422,2022-05-16 07:05:18,N=int(input()),KeyboardInterrupt: 
1423,2022-05-16 07:05:30,   N += 1,KeyboardInterrupt: 
1424,2022-05-16 07:05:33,print(math.ceil(n)),NameError: name 'math' is not defined
1425,2022-05-16 07:05:43,  if (input() in a)==False:,KeyboardInterrupt: 
1426,2022-05-16 07:05:57,a=list(n),TypeError: 'int' object is not iterable
1427,2022-05-16 07:06:43,print(X*(A+1)+(A+2)*Y),"TypeError: can only concatenate str (not ""int"") to str"
1428,2022-05-16 07:06:47,    a=a+[input()],KeyboardInterrupt: 
1429,2022-05-16 07:07:15,  b=input(),KeyboardInterrupt: 
1430,2022-05-16 07:09:12,"get_ipython().run_cell_magic('atcoder\u3000https://atcoder.jp/contests/abc224/tasks/abc224_a', '', ""S=str(input())\nif S[-1] and S[-2]=='er':\n  print('er')\nelif S[-1] and S[-2] and S[-3]=='ist':\n  print('ist')"")",UsageError: Cell magic `%%atcoder　https://atcoder.jp/contests/abc224/tasks/abc224_a` not found.
1431,2022-05-16 07:09:19,"A,B=map(int,input().split())",KeyboardInterrupt: 
1432,2022-05-16 07:09:50,elif S[-1] and S[-2] and S[-3]=='ist':,IndexError: string index out of range
1433,2022-05-16 07:10:03,for S in range:,TypeError: 'type' object is not iterable
1434,2022-05-16 07:10:44,elif S[-1] and S[-2] and S[-3]=='ist':,IndexError: string index out of range
1435,2022-05-16 07:11:05,for S in range(K+1):,"TypeError: can only concatenate str (not ""int"") to str"
1436,2022-05-16 07:11:11,for S in range(K+1):,"TypeError: can only concatenate str (not ""int"") to str"
1437,2022-05-16 07:11:26,"n[1],n[9]=n[9],n[1]",IndexError: string index out of range
1438,2022-05-16 07:11:51,"n[1],n[9]=n[9],n[1]",IndexError: string index out of range
1439,2022-05-16 07:12:03,for S in range(K+1):,"TypeError: can only concatenate str (not ""int"") to str"
1440,2022-05-16 07:12:16,    a+=1,KeyboardInterrupt: 
1441,2022-05-16 07:12:17,"n[1],n[9]=n[9],n[1]",IndexError: string index out of range
1442,2022-05-16 07:12:57,"a,b,c,d=map(int,input().split())","ValueError: not enough values to unpack (expected 4, got 2)"
1443,2022-05-16 07:13:35,"a,b,c,d=map(int,input().split())","ValueError: not enough values to unpack (expected 4, got 2)"
1444,2022-05-16 07:13:41,"df_uid_pr.columns = [""uid"", ""p"", ""r"", ""i"", ""n"", ""t"", ""Shift"", ""(""]","ValueError: Length mismatch: Expected axis has 11 elements, new values have 8 elements"
1445,2022-05-16 07:13:46,"a,b,c,d=map(int,input().split())","ValueError: not enough values to unpack (expected 4, got 2)"
1446,2022-05-16 07:13:47,print(S[0:K]),TypeError: 'int' object is not subscriptable
1447,2022-05-16 07:13:59,"a,b,c,d=map(float(),input().split())",TypeError: 'float' object is not callable
1448,2022-05-16 07:14:05,print(S[0:K]),TypeError: slice indices must be integers or None or have an __index__ method
1449,2022-05-16 07:14:18,print(S[0:K]),TypeError: slice indices must be integers or None or have an __index__ method
1450,2022-05-16 07:14:18,"a=n.replace(1,9)","TypeError: replace() argument 1 must be str, not int"
1451,2022-05-16 07:14:20,"a,b,c,d=map(float(),input().split())",TypeError: 'float' object is not callable
1452,2022-05-16 07:14:40,print(S[0:K]),TypeError: 'int' object is not subscriptable
1453,2022-05-16 07:14:43,"a=n.replace(1,9)","TypeError: replace() argument 1 must be str, not int"
1454,2022-05-16 07:14:54,"a=b.replace(1,9)","TypeError: replace() argument 1 must be str, not int"
1455,2022-05-16 07:15:46,"a,b,c,d=map(int,input().split())",ValueError: invalid literal for int() with base 10: '--1000000000'
1456,2022-05-16 07:16:01,print(math.ceil(n)),NameError: name 'math' is not defined
1457,2022-05-16 07:17:16,"print(n.translate('1','9').translate('9','1'))",TypeError: translate() takes exactly one argument (2 given)
1458,2022-05-16 07:17:19,N=N%10,TypeError: not all arguments converted during string formatting
1459,2022-05-16 07:17:22,"K,S = map(int,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
1460,2022-05-16 07:17:43,if len(S)<=K:,TypeError: object of type 'int' has no len()
1461,2022-05-16 07:17:52,"print(n.translate('1','9'))",TypeError: translate() takes exactly one argument (2 given)
1462,2022-05-16 07:17:52,    a+=1,KeyboardInterrupt: 
1463,2022-05-16 07:18:12,print(a.index(max(a))),ValueError: max() arg is an empty sequence
1464,2022-05-16 07:18:20,K = int(input()),ValueError: invalid literal for int() with base 10: 'nikoandsolstice'
1465,2022-05-16 07:18:31,print(a.index(max(b))),ValueError: max() arg is an empty sequence
1466,2022-05-16 07:18:32,    a+=1,KeyboardInterrupt: 
1467,2022-05-16 07:18:56,K=int(input()),ValueError: invalid literal for int() with base 10: 'nikoandsolstice'
1468,2022-05-16 07:18:59,if K >= S:,TypeError: '>=' not supported between instances of 'int' and 'str'
1469,2022-05-16 07:19:30,K=int(input()),ValueError: invalid literal for int() with base 10: 'nikoandsolstice'
1470,2022-05-16 07:19:54,if len(S) <= K:,TypeError: object of type 'int' has no len()
1471,2022-05-16 07:20:28,if len(S) <= K:,TypeError: object of type 'int' has no len()
1472,2022-05-16 07:20:29,  print(int(X)),ValueError: invalid literal for int() with base 10: '3.456'
1473,2022-05-16 07:20:48,    print(K+'...'),TypeError: unsupported operand type(s) for +: 'int' and 'str'
1474,2022-05-16 07:21:25,K=int(input()),ValueError: invalid literal for int() with base 10: 'nikoandsolstice'
1475,2022-05-16 07:22:05,"get_ipython().run_cell_magic('atcorder', 'https://atcoder.jp/contests/abc233/tasks/abc233_a', 'X, Y= map(str, input().split())\nwhile X<Y:\n    X+=10')",UsageError: Cell magic `%%atcorder` not found.
1476,2022-05-16 07:22:18,    X+=10,"TypeError: can only concatenate str (not ""int"") to str"
1477,2022-05-16 07:22:22,ans<=A/B,NameError: name 'ans' is not defined
1478,2022-05-16 07:22:34,K=int(input()),ValueError: invalid literal for int() with base 10: 'nikoandsolstice'
1479,2022-05-16 07:22:44,"l=print(str(m.replace('1','9')))",AttributeError: 'NoneType' object has no attribute 'replace'
1480,2022-05-16 07:23:00,X=int(input()),ValueError: invalid literal for int() with base 10: '3.456'
1481,2022-05-16 07:23:20,if str(X[-3])<=4:,TypeError: 'float' object is not subscriptable
1482,2022-05-16 07:23:59,  print(X+1),"TypeError: can only concatenate str (not ""int"") to str"
1483,2022-05-16 07:24:01,K=int(input()),ValueError: invalid literal for int() with base 10: 'nikoandsolstice'
1484,2022-05-16 07:24:30,    if S.islower(c) == 'True':,TypeError: islower() takes no arguments (1 given)
1485,2022-05-16 07:24:34,  ptint(0),NameError: name 'ptint' is not defined
1486,2022-05-16 07:24:39,  print(int(X)),ValueError: invalid literal for int() with base 10: '3.456'
1487,2022-05-16 07:25:22,  ptint('0'),NameError: name 'ptint' is not defined
1488,2022-05-16 07:25:52,  S.islower(c),TypeError: islower() takes no arguments (1 given)
1489,2022-05-16 07:25:53,"  ptint(""0"")",NameError: name 'ptint' is not defined
1490,2022-05-16 07:26:25,  ptint('0'),NameError: name 'ptint' is not defined
1491,2022-05-16 07:26:48,print(math.ceil(B-1)/(A-1)),NameError: name 'math' is not defined
1492,2022-05-16 07:28:11,    print((str)+'...'),TypeError: unsupported operand type(s) for +: 'type' and 'str'
1493,2022-05-16 07:29:14,  print(int(X)),ValueError: invalid literal for int() with base 10: '3.456'
1494,2022-05-16 07:29:24,"a,b=map(int,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
1495,2022-05-16 07:29:38,  print(int(X)+1),ValueError: invalid literal for int() with base 10: '99.500'
1496,2022-05-16 07:29:50,k.append=S[1],AttributeError: 'list' object attribute 'append' is read-only
1497,2022-05-16 07:29:56,"S[0],S[2] = S[2],SD[0]",NameError: name 'SD' is not defined
1498,2022-05-16 07:30:15,"a,b=map(int,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
1499,2022-05-16 07:30:25,x=int(input()),KeyboardInterrupt: 
1500,2022-05-16 07:30:33,print(b[b.index(max(c))]),ValueError: 3 is not in list
1501,2022-05-16 07:30:36,  print(int(X)+1),ValueError: invalid literal for int() with base 10: '99.500'
1502,2022-05-16 07:30:53,print(b[b.index(intmax(c))]),NameError: name 'intmax' is not defined
1503,2022-05-16 07:31:05,print(b[b.index(int(max(c)))]),ValueError: 3 is not in list
1504,2022-05-16 07:31:07,  S.islower(c),TypeError: islower() takes no arguments (1 given)
1505,2022-05-16 07:31:08,"a,b=map(int,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
1506,2022-05-16 07:31:37,b=int(input()),ValueError: invalid literal for int() with base 10: 'nikoandsolstice'
1507,2022-05-16 07:31:58,  while len(b)<a:,TypeError: object of type 'int' has no len()
1508,2022-05-16 07:34:12,"S,T=map(input())",TypeError: map() must have at least two arguments.
1509,2022-05-16 07:34:37,"S,T=map(input().split())",TypeError: map() must have at least two arguments.
1510,2022-05-16 07:35:39,"a,b=map(int,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
1511,2022-05-16 07:39:50,X=int(input()),ValueError: invalid literal for int() with base 10: '3.456'
1512,2022-05-16 07:41:58,N=int(input()),KeyboardInterrupt: 
1513,2022-05-16 07:43:17,"get_ipython().run_cell_magic('atcoder', 'https://blog.hamayanhamayan.com/entry/2019/09/04/220545', 'A, B = map(int,input().split())\nprint((B-1+A-2)/(A-1))')","KogiError: {""translated"": ""\u554f\u984c\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3002"", ""reason"": ""\u554f\u984c\u306e\u6307\u5b9a\u65b9\u6cd5\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u3059"", ""hint"": ""\u554f\u984c\u30da\u30fc\u30b8\u306eURL\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044"", ""solution"": ""%%atcoder \u554f\u984c\u30da\u30fc\u30b8\u306eURL""}"
1514,2022-05-16 07:43:43,A1=repeat(A*a),TypeError: repeat() missing 1 required positional argument: 'length'
1515,2022-05-16 07:44:17,n=int(input()),KeyboardInterrupt: 
1516,2022-05-16 07:44:22,N=int(input()),ValueError: invalid literal for int() with base 10: ''
1517,2022-05-16 07:45:55,if X[-3]>=4:,TypeError: 'float' object is not subscriptable
1518,2022-05-16 07:46:13,if a in int:,TypeError: argument of type 'type' is not iterable
1519,2022-05-16 07:46:42,if X[-3]>=4:,TypeError: '>=' not supported between instances of 'str' and 'int'
1520,2022-05-16 07:46:50,print(str_list),NameError: name 'str_list' is not defined
1521,2022-05-16 07:47:12,  print(int(float(X+1))),"TypeError: can only concatenate str (not ""int"") to str"
1522,2022-05-16 07:48:19,data_sep(key),NameError: name 'key' is not defined
1523,2022-05-16 07:48:25,data_sep(key),NameError: name 'key' is not defined
1524,2022-05-16 07:48:36,"s,t=map(int,input().split())",ValueError: invalid literal for int() with base 10: 'oder'
1525,2022-05-16 07:49:10,print(str_list),NameError: name 'str_list' is not defined
1526,2022-05-16 07:50:46,if a in b:,TypeError: argument of type 'int' is not iterable
1527,2022-05-16 07:55:02,str_list,NameError: name 'str_list' is not defined
1528,2022-05-16 07:55:24,"df_uid_pr.columns = [""uid"", 'a', 'b', 'c', 'd', 'e', 'f', 'g','h','i','j']","ValueError: Length mismatch: Expected axis has 8 elements, new values have 11 elements"
1529,2022-05-16 07:55:39,str_list,NameError: name 'str_list' is not defined
1530,2022-05-16 08:03:00,"    for j in range(l[i][0],l[i][1]):",TypeError: 'str' object cannot be interpreted as an integer
1531,2022-05-16 08:03:08,    Data_list = keys.split(),AttributeError: 'Series' object has no attribute 'split'
1532,2022-05-16 08:03:41,"l=[int.input().split("" "") for i in range(x)]",AttributeError: type object 'int' has no attribute 'input'
1533,2022-05-16 08:03:54,"l=[int(input()).split("" "") for i in range(x)]",ValueError: invalid literal for int() with base 10: '1 3'
1534,2022-05-16 08:04:04,"l=[int(input().split("" "")) for i in range(x)]","TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
1535,2022-05-16 08:06:28,for key in Series:,NameError: name 'Series' is not defined
1536,2022-05-16 08:13:13,for key in Series:,NameError: name 'Series' is not defined
1537,2022-05-16 08:16:01,keys_list(df_key['keys'][0]),KeyError: 0
1538,2022-05-16 08:16:07,    Data_list = keys.split(),AttributeError: 'Series' object has no attribute 'split'
1539,2022-05-16 08:20:01,keys_list[0],TypeError: 'set' object is not subscriptable
1540,2022-05-16 08:21:09,  keys_list(key),TypeError: 'set' object is not callable
1541,2022-05-16 08:21:19,  keys_list(key),TypeError: 'set' object is not callable
1542,2022-05-16 08:21:43,keys_list[0],TypeError: 'set' object is not subscriptable
1543,2022-05-16 08:23:43,  keys_list(key),TypeError: 'set' object is not callable
1544,2022-05-16 08:23:54,  keys_list(key),TypeError: 'set' object is not callable
1545,2022-05-16 08:24:09,  keys_list(key),TypeError: 'set' object is not callable
1546,2022-05-16 08:24:40,  keys_list(key),TypeError: 'set' object is not callable
1547,2022-05-16 08:25:01,str_list,NameError: name 'str_list' is not defined
1548,2022-05-16 08:28:53,        b=abs(a[i]-c[j]),IndexError: list index out of range
1549,2022-05-16 08:29:02,        b=abs(a[i]-c[j]),TypeError: unsupported operand type(s) for -: 'str' and 'str'
1550,2022-05-16 08:29:11,        b=abs(a[i]-c[j]),TypeError: unsupported operand type(s) for -: 'str' and 'str'
1551,2022-05-16 08:29:17,        b=abs(a[i]-c[j]),TypeError: unsupported operand type(s) for -: 'str' and 'str'
1552,2022-05-16 08:29:42,        b=abs(int(a[i])-int(c[j])),IndexError: list index out of range
1553,2022-05-16 08:30:24,df_uid_pr.columns = neko,"TypeError: Index(...) must be called with a collection of some kind, None was passed"
1554,2022-05-16 13:43:34,"S, T = input()",ValueError: too many values to unpack (expected 2)
1555,2022-05-16 13:44:09,"S, T = string(input())",NameError: name 'string' is not defined
1556,2022-05-16 13:45:19,"S, T = char(input())",NameError: name 'char' is not defined
1557,2022-05-16 13:46:53,"S, T = map(string, input().split())",NameError: name 'string' is not defined
1558,2022-05-16 13:47:19,"S, T = map(int, input().split())",ValueError: invalid literal for int() with base 10: 'oder'
1559,2022-05-16 13:49:24,"S, T = map(string, input().split())",NameError: name 'string' is not defined
1560,2022-05-16 14:15:46,print(int(A * B)),TypeError: can't multiply sequence by non-int of type 'str'
1561,2022-05-16 14:19:34,"  ans = int(x, K)",TypeError: int() can't convert non-string with explicit base
1562,2022-05-16 14:20:57,"get_ipython().run_cell_magic('atcder', 'https://atcoder.jp/contests/abc111/tasks/abc111_a', 'n = int(input())\nprint(1110 - n)')",UsageError: Cell magic `%%atcder` not found.
1563,2022-05-16 14:30:03,  ans = ans + S[i],IndexError: string index out of range
1564,2022-05-17 00:08:50,            Num_list.append(int(Data_list[i])),ValueError: invalid literal for int() with base 10: 'p'
1565,2022-05-17 00:14:53,df_key['keys'][0],KeyError: 0
1566,2022-05-17 00:15:29,key_list(df_key['keys']),NameError: name 'key_list' is not defined
1567,2022-05-17 00:15:38,key_list(df_key['keys'][0]),NameError: name 'key_list' is not defined
1568,2022-05-17 00:16:01,key_list(df_key['keys'][0]),NameError: name 'key_list' is not defined
1569,2022-05-17 00:16:11,keys_list(df_key['keys'][0]),KeyError: 0
1570,2022-05-17 00:16:28,"get_ipython().run_cell_magic('atcoderhttps://atcoder.jp/contests/abc224/tasks/abc224_a', '', 'S = str(input())\nif S[-1]+S[-2]+S[-3] == ""ist"":\n  print(""ist"")\nelif S[-1]+S[-2] == ""er"":\n  print(""er"")\nelse:\n  break')",UsageError: Cell magic `%%atcoderhttps://atcoder.jp/contests/abc224/tasks/abc224_a` not found.
1571,2022-05-17 00:16:38,keys_list(df_key['keys'][0]),KeyError: 0
1572,2022-05-17 00:16:49,    Data_list = keys.split(),AttributeError: 'Series' object has no attribute 'split'
1573,2022-05-17 00:17:34,  o,NameError: name 'o' is not defined
1574,2022-05-17 00:17:56,"if S[-1]+S[-2]+S[-3] == ""ist"":",IndexError: string index out of range
1575,2022-05-17 00:19:57,  keys_list(key),TypeError: 'list' object is not callable
1576,2022-05-17 00:20:00,  keys_list(key),TypeError: 'list' object is not callable
1577,2022-05-17 00:20:47,"sx,sy,gx,gy = map(inbt,input().strip().split())",NameError: name 'inbt' is not defined
1578,2022-05-17 00:21:00,keys_list(df_key['keys']),TypeError: 'list' object is not callable
1579,2022-05-17 00:21:15,keys_list(df_key['keys'][0]),KeyError: 0
1580,2022-05-17 00:21:23,keys_list(df_key['keys'][1]),KeyError: 1
1581,2022-05-17 00:21:34,keys_list(df_key['keys'][-1]),KeyError: -1
1582,2022-05-17 00:21:46,"if S[2,3]=='f' and S[4,6]=='e':",TypeError: string indices must be integers
1583,2022-05-17 00:21:47,  keys_list(key),TypeError: 'list' object is not callable
1584,2022-05-17 00:22:50,N = S[-3]+S[-2]+S[-1],IndexError: string index out of range
1585,2022-05-17 00:23:24,"Sum=sum(a%10,b%10)",TypeError: 'int' object is not iterable
1586,2022-05-17 00:24:24,N = S[-3]+S[-2]+S[-1],IndexError: string index out of range
1587,2022-05-17 00:27:52,"print(replace(""9"",""1""))",NameError: name 'replace' is not defined
1588,2022-05-17 00:28:14,"a,b,c,d = map(int, input().split())",KeyboardInterrupt: 
1589,2022-05-17 00:29:15,"a,b,c,d = map(int, input().split())",KeyboardInterrupt: 
1590,2022-05-17 00:29:18,"a,b,c,d = map(int, input().split())","ValueError: not enough values to unpack (expected 4, got 1)"
1591,2022-05-17 00:30:52,S[6],IndexError: string index out of range
1592,2022-05-17 00:30:55,"get_ipython().run_cell_magic('atcoder(abc233_a)', '', ""#\t10円スタンプ (abc233_a)\nX,Y=map(int,input().split())\n\nif X>=Y:\n  print('0')\nelse:\n  if Y%X != 0:\n    print(int((Y//X+1)))\n  else:\n    print(int((Y/X)))\n\n\n\n"")",UsageError: Cell magic `%%atcoder(abc233_a)` not found.
1593,2022-05-17 00:30:57,  x=int(i*1.01),KeyboardInterrupt: 
1594,2022-05-17 00:30:58,"      print(""Easy"")",KeyboardInterrupt: 
1595,2022-05-17 00:31:20,"get_ipython().run_cell_magic('atcoder', '', ""#\t10円スタンプ (abc233_a)\nX,Y=map(int,input().split())\n\nif X>=Y:\n  print('0')\nelse:\n  if Y%X != 0:\n    print(int((Y//X+1)))\n  else:\n    print(int((Y/X)))\n\n\n\n"")","KogiError: {""translated"": ""\u554f\u984c\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3002"", ""reason"": ""\u554f\u984c\u306e\u6307\u5b9a\u65b9\u6cd5\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u3059"", ""hint"": ""\u554f\u984c\u30da\u30fc\u30b8\u306eURL\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044"", ""solution"": ""%%atcoder \u554f\u984c\u30da\u30fc\u30b8\u306eURL""}"
1596,2022-05-17 00:32:34,    print(White),NameError: name 'White' is not defined
1597,2022-05-17 00:34:48,if S[2]==s[3] and S[4]==S[5]: ,NameError: name 's' is not defined
1598,2022-05-17 00:35:44,"print(n.replace(9,1).replace(1,9))",AttributeError: 'int' object has no attribute 'replace'
1599,2022-05-17 00:36:29,a = ferelibenterhominesidquodvoluntcredunt,NameError: name 'ferelibenterhominesidquodvoluntcredunt' is not defined
1600,2022-05-17 00:39:56,if S.endwith('er'):,AttributeError: 'str' object has no attribute 'endwith'
1601,2022-05-17 00:47:07,"    print(s[k-1],+'...')",TypeError: bad operand type for unary +: 'str'
1602,2022-05-17 00:53:53,"S,T=map(int,input().split())",ValueError: invalid literal for int() with base 10: 'oder'
1603,2022-05-17 00:58:53,"for i in range(min(len(A),len(B))):",NameError: name 'A' is not defined
1604,2022-05-17 00:59:12,"for i in range(min(len(a),len(b))):",TypeError: object of type 'int' has no len()
1605,2022-05-17 01:02:29,if 0<=N<10:,TypeError: '<=' not supported between instances of 'int' and 'str'
1606,2022-05-17 01:03:33,if 0<=N<10:,TypeError: '<=' not supported between instances of 'int' and 'str'
1607,2022-05-17 01:03:36,"get_ipython().run_cell_magic('atcoder\u3000abc206_b', '', 'N=int(input())\nd=0\nm=0\nwhile True:\n    d+=1\n    m+=d\n    if m>=N:\n      break\nprint(d)')",UsageError: Cell magic `%%atcoder　abc206_b` not found.
1608,2022-05-17 01:03:53,"x,y=int(input().split())","TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
1609,2022-05-17 01:03:55,if 0<=N<10:,TypeError: '<=' not supported between instances of 'int' and 'str'
1610,2022-05-17 01:04:18,if 0<=N<10:,TypeError: '<=' not supported between instances of 'int' and 'str'
1611,2022-05-17 01:04:33,x = soeted(list),NameError: name 'soeted' is not defined
1612,2022-05-17 01:05:48,    y+=d,NameError: name 'd' is not defined
1613,2022-05-17 01:06:28,if 0<=N<10:,TypeError: '<=' not supported between instances of 'int' and 'str'
1614,2022-05-17 01:07:33,N=int(input()),EOFError: 
1615,2022-05-17 01:09:09,N=int(input()),EOFError: 
1616,2022-05-17 01:09:21,print(math.decimal(X)),AttributeError: module 'math' has no attribute 'decimal'
1617,2022-05-17 01:09:32,N=int(input()),EOFError: 
1618,2022-05-17 01:09:39,"x,y = map(int,input()/split())",NameError: name 'split' is not defined
1619,2022-05-17 01:10:15,print(decimal(X)),TypeError: 'module' object is not callable
1620,2022-05-17 01:10:20,print(decimal(X)),TypeError: 'module' object is not callable
1621,2022-05-17 01:11:17,print(a+a*a+a*a*a),TypeError: can't multiply sequence by non-int of type 'str'
1622,2022-05-17 01:16:20,"  model.fit(X_train, y_train)",KeyboardInterrupt: 
1623,2022-05-17 01:18:18,    print('-1'),KeyboardInterrupt: 
1624,2022-05-17 01:18:22,S = str(input()),KeyboardInterrupt: 
1625,2022-05-17 01:20:07,"y = x.quantize(Decimal('0'), rounding=ROUND_HALF_UP)",AttributeError: 'float' object has no attribute 'quantize'
1626,2022-05-17 01:20:31,"y = x.quantize(Decimal('0'), rounding=ROUND_HALF_UP)",AttributeError: 'str' object has no attribute 'quantize'
1627,2022-05-17 01:22:19,if X[a+1]>=5:,TypeError: '>=' not supported between instances of 'str' and 'int'
1628,2022-05-17 01:25:08,x = floar(input()),NameError: name 'floar' is not defined
1629,2022-05-17 01:25:47,x = floar(input()),NameError: name 'floar' is not defined
1630,2022-05-17 01:26:54,"x, y = map(int, input().split())",ValueError: too many values to unpack (expected 2)
1631,2022-05-17 01:36:21,S-int(input()),NameError: name 'S' is not defined
1632,2022-05-17 01:40:00,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
1633,2022-05-17 01:43:59,"a=[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z]",NameError: name 'C' is not defined
1634,2022-05-17 01:45:06,"a=[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z]",NameError: name 'C' is not defined
1635,2022-05-17 01:48:13,for i in range():,"TypeError: range expected 1 arguments, got 0"
1636,2022-05-17 01:49:21,for a in range():,"TypeError: range expected 1 arguments, got 0"
1637,2022-05-17 03:26:31,    print(a[a.find(S[x])+N%26]),TypeError: not all arguments converted during string formatting
1638,2022-05-17 03:27:16,    print(S[x]),IndexError: string index out of range
1639,2022-05-17 03:30:49,    print(S[x]),IndexError: string index out of range
1640,2022-05-17 03:35:56,    print(a.find(S[x])+N%26),TypeError: not all arguments converted during string formatting
1641,2022-05-17 03:36:22,    print(a.find(S[x])+N),TypeError: unsupported operand type(s) for +: 'int' and 'str'
1642,2022-05-17 04:08:58,  S[i] = chr(s_num),TypeError: 'str' object does not support item assignment
1643,2022-05-17 04:42:59,df_uid_all[0],KeyError: 0
1644,2022-05-17 04:54:04,    k_l.append([i.j]),AttributeError: 'str' object has no attribute 'j'
1645,2022-05-17 04:54:14,    k_l.append([i.j]),AttributeError: 'str' object has no attribute 'j'
1646,2022-05-17 04:54:33,    k_l.append([i.j]),AttributeError: 'str' object has no attribute 'j'
1647,2022-05-17 04:54:43,"    k_l.append(i,j)",TypeError: append() takes exactly one argument (2 given)
1648,2022-05-17 04:58:02,"    k_l.append([sprit(i,j)])",NameError: name 'sprit' is not defined
1649,2022-05-17 04:58:09,"    k_l.append([split(i,j)])",NameError: name 'split' is not defined
1650,2022-05-17 04:58:34,"    k_l.append([i,j].split())",AttributeError: 'list' object has no attribute 'split'
1651,2022-05-17 05:00:46,    k_l[0].append(),TypeError: append() takes exactly one argument (0 given)
1652,2022-05-17 05:00:57,    k_l[2].append(),IndexError: list index out of range
1653,2022-05-17 05:01:02,    k_l.append(),TypeError: append() takes exactly one argument (0 given)
1654,2022-05-17 05:04:42,"    k_l[c].append(i,j)",TypeError: append() takes exactly one argument (2 given)
1655,2022-05-17 05:06:16,len(set(k_l)),TypeError: unhashable type: 'list'
1656,2022-05-17 05:06:25,set(k_l),TypeError: unhashable type: 'list'
1657,2022-05-17 05:35:10,"x, y = map(int, input().split())",ValueError: too many values to unpack (expected 2)
1658,2022-05-17 05:35:44,"x, y = map(int, input().split())",ValueError: too many values to unpack (expected 2)
1659,2022-05-17 05:35:56,"x, y = map(int, input().split())",ValueError: too many values to unpack (expected 2)
1660,2022-05-17 05:37:36,keys_list(df_key),TypeError: 'list' object is not callable
1661,2022-05-17 07:55:14,        if s == sample_list[j][0] and s_next == sample_list[j][1]:,KeyboardInterrupt: 
1662,2022-05-17 07:55:37,df_uid_all.columns = column_list,"ValueError: Length mismatch: Expected axis has 1601 elements, new values have 41 elements"
1663,2022-05-17 07:57:14,print(df_uid_all),TypeError: unhashable type: 'list'
1664,2022-05-17 07:58:08,print(df_uid_all),TypeError: unhashable type: 'list'
1665,2022-05-17 07:58:19,pd.read_csv('boston.csv '),FileNotFoundError: [Errno 2] No such file or directory: 'boston.csv '
1666,2022-05-17 08:07:44,        if s == sample_list[j][0] and s_next == sample_list[j][1]:,IndexError: string index out of range
1667,2022-05-17 08:08:29,        if s == sample_list[j][0] and s_next == sample_list[j][1]:,IndexError: string index out of range
1668,2022-05-17 08:09:13,        if s == sample_list[j][0] and s_next == sample_list[j][1]:,IndexError: string index out of range
1669,2022-05-17 08:10:27,        if s == sample_list[j][0] and s_next == sample_list[j][1]:,IndexError: string index out of range
1670,2022-05-17 08:10:45,        if s == sample_list[j][0] and s_next == sample_list[j][1]:,IndexError: string index out of range
1671,2022-05-17 08:11:05,        if s == sample_list[j][0] and s_next == sample_list[j][1]:,IndexError: string index out of range
1672,2022-05-17 08:19:06,sample_list = k_l,NameError: name 'k_l' is not defined
1673,2022-05-17 08:23:26,for i in range(column_list) :,TypeError: 'list' object cannot be interpreted as an integer
1674,2022-05-17 08:34:46,    means = Nan,NameError: name 'Nan' is not defined
1675,2022-05-17 08:38:22,df_uid_all = df_uid_all.dropna(asix=1),TypeError: dropna() got an unexpected keyword argument 'asix'
1676,2022-05-17 08:55:53,X_train = X_train_all[sample_list],"KeyError: ""None of [Index([            ('p', 'p'),             ('p', 'r'),             ('p', '*'),\n               ('p', 'Enter'),    ('p', 'ArrowRight'),             ('p', 'u'),\n                   ('p', 's'),             ('p', ']'),             ('p', 't'),\n                   ('p', 'y'),\n       ...\n               ('Shift', '/'),         ('Shift', '['),         ('Shift', 'h'),\n       ('Shift', 'ArrowLeft'),         ('Shift', 'b'),         ('Shift', 'w'),\n               ('Shift', ','),         ('Shift', 'm'),         ('Shift', '2'),\n           ('Shift', 'Shift')],\n      dtype='object', length=1600)] are in the [columns]"""
1677,2022-05-17 09:00:17,pd.set_option('display.max_columns'),ValueError: Must provide an even number of non-keyword arguments
1678,2022-05-17 09:10:33,"df_uid_all1[""e → g""][0]",KeyError: 0
1679,2022-05-17 09:11:49,"if df_uid_all1[""e → g""]==962.636364	:","ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
1680,2022-05-17 09:12:24,"if df_uid_all1[[""e → g""]==962.636364]	:",KeyError: False
1681,2022-05-17 09:12:50,"if df_uid_all1[df_uid_all1[""e → g""]==962.636364]	:","ValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
1682,2022-05-17 09:15:26,"X_train_all_name, X_test_all_name = train_test_split(df_all_name,test_size = 0.3)","ValueError: With n_samples=0, test_size=0.3 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters."
1683,2022-05-17 09:28:20,X_train = X_train_all[sample_list],"KeyError: 'None of [Index([         (\'""\', \'""\'),          (\'""\', \'u\'),          (\'""\', \'2\'),\n                (\'""\', \'b\'),          (\'""\', \'x\'),  (\'""\', \'ArrowLeft\'),\n                (\'""\', \'/\'),          (\'""\', \'>\'),          (\'""\', \'c\'),\n                (\'""\', \'o\'),\n       ...\n            (\'t\', \'Shift\'),          (\'t\', \'=\'), (\'t\', \'ArrowRight\'),\n                (\'t\', \'d\'),          (\'t\', \'[\'),          (\'t\', \'0\'),\n                (\'t\', \'m\'),          (\'t\', \',\'),          (\'t\', \'g\'),\n                (\'t\', \'t\')],\n      dtype=\'object\', length=1600)] are in the [columns]'"
1684,2022-05-17 09:32:33,"    print(""str = ""+ str_list)","TypeError: can only concatenate str (not ""list"") to str"
1685,2022-05-17 11:36:11,df,NameError: name 'df' is not defined
1686,2022-05-17 11:46:01,"X_train_all_name, X_test_all_name = train_test_split(df_all_name,test_size = 0.3)","ValueError: With n_samples=0, test_size=0.3 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters."
1687,2022-05-17 11:47:17,"X_train_all_name, X_test_all_name = train_test_split(df_all_name,test_size = 0.3)","ValueError: With n_samples=0, test_size=0.3 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters."
1688,2022-05-17 12:23:10,keys_list = list(set(keys_list(key)))       # 重複をなくす,NameError: name 'key' is not defined
1689,2022-05-17 12:25:01,keys_list = list(set(keys_list(key)))       # 重複をなくす,NameError: name 'key' is not defined
1690,2022-05-17 12:27:41,keys_list = list(set(keys_list(key)))       # 重複をなくす,NameError: name 'key' is not defined
1691,2022-05-17 12:28:50,keys_list = list(set(keys_list(key)))       # 重複をなくす,NameError: name 'key' is not defined
1692,2022-05-17 12:42:09,"X_train_all_name, X_test_all_name = train_test_split(df_all_name,test_size = 0.3)","ValueError: With n_samples=0, test_size=0.3 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters."
1693,2022-05-17 13:22:46,"mean_list_all = make_mean_list(sample_list, df_keys['keys'])",NameError: name 'make_mean_list' is not defined
1694,2022-05-17 13:24:47,if S[-2::]==er:,NameError: name 'er' is not defined
1695,2022-05-17 14:15:35,"mean_list_all = make_mean_list(sample_list, df_keys['keys'])",NameError: name 'make_mean_list' is not defined
1696,2022-05-17 14:27:07,for key in Series:,NameError: name 'Series' is not defined
1697,2022-05-17 14:32:28,    if sl == s:,NameError: name 's' is not defined
1698,2022-05-17 14:33:32,for key in Series:,NameError: name 'Series' is not defined
1699,2022-05-17 14:40:45,mean_lists = [mean_list(S[k]) for k in range(len(sample_list))],NameError: name 'sample_list' is not defined
1700,2022-05-17 14:42:20,for key in Series:,NameError: name 'Series' is not defined
1701,2022-05-17 14:43:53,for key in Series:,NameError: name 'Series' is not defined
1702,2022-05-17 14:54:15,"X_train_all_name, X_test_all_name = train_test_split(df_all_name,test_size = 0.3)","ValueError: With n_samples=0, test_size=0.3 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters."
1703,2022-05-17 14:58:40,      S[j].append(num),NameError: name 'S' is not defined
1704,2022-05-17 15:00:00,for _ in range(len(sample_list)):,NameError: name 'sample_list' is not defined
1705,2022-05-17 15:02:01,"  str_list, num_list = data_sep(df_keys['keys'][i])",KeyError: 184
1706,2022-05-17 15:07:58,  S[3].append([]),IndexError: list index out of range
1707,2022-05-17 15:08:38,  S[3].append([]),IndexError: list index out of range
1708,2022-05-17 15:16:06,SS[3][S[0]],"TypeError: list indices must be integers or slices, not list"
1709,2022-05-17 15:16:13,SS[3][S],"TypeError: list indices must be integers or slices, not list"
1710,2022-05-17 15:25:17,          SS[index(key)][i].append(num),NameError: name 'index' is not defined
1711,2022-05-17 15:26:00,          SS[Series.index(key)][i].append(num),TypeError: 'RangeIndex' object is not callable
1712,2022-05-17 15:31:53,    means = sum(s_list) / len(s_list),TypeError: unsupported operand type(s) for +: 'int' and 'list'
1713,2022-05-17 15:52:05,print(SS),NameError: name 'SS' is not defined
1714,2022-05-17 15:53:44,    SS[key].append(S),IndexError: list index out of range
1715,2022-05-17 15:59:38,print(SS),NameError: name 'SS' is not defined
1716,2022-05-17 16:03:03,"mean_list_all = make_mean_list(sample_list, df_keys['keys'],df_keys)",TypeError: make_mean_list() takes 2 positional arguments but 3 were given
1717,2022-05-17 16:10:39,      SS[0][j].append(num),NameError: name 'SS' is not defined
1718,2022-05-17 16:11:14,    uid_meanlist = [int(uid_list[i])] + mean_list_all[i],"TypeError: can only concatenate list (not ""int"") to list"
1719,2022-05-18 01:45:51,print(n[1]),IndexError: string index out of range
1720,2022-05-18 01:54:02,for i in N:,TypeError: 'int' object is not iterable
1721,2022-05-18 01:54:33,    print(sum(x)),NameError: name 'x' is not defined
1722,2022-05-18 01:55:07,  if len(x) == 1:,TypeError: object of type 'int' has no len()
1723,2022-05-18 02:03:24,"X_train_pr_name[:,1:8]","TypeError: '(slice(None, None, None), slice(1, 8, None))' is an invalid key"
1724,2022-05-18 02:11:01,"S, T = map(int,input().split())",ValueError: invalid literal for int() with base 10: 'oder'
1725,2022-05-18 03:56:51,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
1726,2022-05-18 10:42:04,"X_train_all_name, X_test_all_name = train_test_split(df_all_name,test_size = 0.3)","ValueError: With n_samples=0, test_size=0.3 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters."
1727,2022-05-18 12:46:22,plt.figure(),NameError: name 'plt' is not defined
1728,2022-05-18 12:56:55,    means = sum(s_list) / len(s_list),TypeError: 'int' object is not iterable
1729,2022-05-18 12:57:22,mean_list_all.append(mean_lists),NameError: name 'mean_lists' is not defined
1730,2022-05-18 13:21:31,  print(SS[key]),IndexError: list index out of range
1731,2022-05-18 13:23:58,        SS[i][l].append(num),IndexError: list index out of range
1732,2022-05-18 13:26:07,      print(SS),KeyboardInterrupt: 
1733,2022-05-18 13:31:49,SS[0].sppend(0),AttributeError: 'list' object has no attribute 'sppend'
1734,2022-05-18 13:33:24,  if x[i]==t[i]:,NameError: name 't' is not defined
1735,2022-05-18 13:34:19,SS[0][1][2].append(0),IndexError: list index out of range
1736,2022-05-18 13:36:58,  SS.append(S[m]),NameError: name 'm' is not defined
1737,2022-05-18 13:37:06,SS[0][1].append(0),IndexError: list index out of range
1738,2022-05-18 13:43:17,    S[n].append([]),IndexError: list index out of range
1739,2022-05-18 13:43:33,    S[m].append([]),IndexError: list index out of range
1740,2022-05-18 13:48:13,        SS[i].append(num),IndexError: list index out of range
1741,2022-05-18 14:02:59,df_uid_all.columns = column_list,"ValueError: Length mismatch: Expected axis has 201 elements, new values have 41 elements"
1742,2022-05-18 14:14:18,df_uid_all.columns = column_list,"ValueError: Length mismatch: Expected axis has 201 elements, new values have 41 elements"
1743,2022-05-18 14:19:31,    means = sum(s_list) / len(s_list),TypeError: unsupported operand type(s) for +: 'int' and 'list'
1744,2022-05-18 14:21:11,df_uid_all,NameError: name 'df_uid_all' is not defined
1745,2022-05-18 14:21:17,df_uid_all,NameError: name 'df_uid_all' is not defined
1746,2022-05-18 14:22:07,"X_train_all_name, X_test_all_name = train_test_split(df_all_name,test_size = 0.3)","ValueError: With n_samples=0, test_size=0.3 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters."
1747,2022-05-18 14:32:33,"X_train_all_name, X_test_all_name = train_test_split(df_all_name,test_size = 0.3)","ValueError: With n_samples=0, test_size=0.3 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters."
1748,2022-05-18 14:34:17,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
1749,2022-05-18 14:41:43,df_uid_all.columns/values,NameError: name 'values' is not defined
1750,2022-05-18 14:43:07,print((np.a+np.c)/x+y),NameError: name 'np' is not defined
1751,2022-05-18 14:44:07,print((sum(a)+sum(c))/x+y),TypeError: unsupported operand type(s) for +: 'int' and 'str'
1752,2022-05-18 14:48:25,"prit(a,c)",NameError: name 'prit' is not defined
1753,2022-05-18 15:02:36,    mean_lists = [mean_list(SS[k][m]) for m in range(len(sample_list))],NameError: name 'SS' is not defined
1754,2022-05-18 15:06:20,    return val - (sum(l))/max(l),TypeError: unsupported operand type(s) for +: 'int' and 'list'
1755,2022-05-18 15:08:15,    return val - int(sum(l))/int(max(l)),TypeError: unsupported operand type(s) for +: 'int' and 'list'
1756,2022-05-18 15:09:08,    return val - int(sum(l))/int(max(l)),TypeError: unsupported operand type(s) for +: 'int' and 'list'
1757,2022-05-18 15:10:21,    return val - int(sum(l))/int(max(l)),TypeError: unsupported operand type(s) for +: 'int' and 'str'
1758,2022-05-18 16:00:59,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
1759,2022-05-18 16:01:19,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
1760,2022-05-18 16:05:52,y_pred = model.predict(X_test),NotFittedError: This RandomForestClassifier instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1761,2022-05-18 16:06:06,"  model.fit(X_train, y_train)",KeyboardInterrupt: 
1762,2022-05-18 23:28:24,"print(n.translate('1','9'))",TypeError: translate() takes exactly one argument (2 given)
1763,2022-05-19 02:21:32,"    ax.imshow(mnist.data.values[i].reshape((28, 28)), cmap=plt.cm.gray)",AttributeError: 'numpy.ndarray' object has no attribute 'values'
1764,2022-05-19 02:25:09,df = pd.read_csv('bento.csv'),NameError: name 'pd' is not defined
1765,2022-05-19 03:05:12,df = pd.read_csv('cancer.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'cancer.csv'
1766,2022-05-19 03:05:46,df = pd.read_csv('cancer.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'cancer.csv'
1767,2022-05-19 03:06:59,df = pd.read_csv('cancer.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'cancer.csv'
1768,2022-05-19 03:09:59,y = df['target'],KeyError: 'target'
1769,2022-05-19 03:10:39,df = pd.read_csv('ja.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'ja.csv'
1770,2022-05-19 03:10:59,y = df['target'],KeyError: 'target'
1771,2022-05-19 03:11:32,df = pd.read_csv('cancer.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'cancer.csv'
1772,2022-05-19 03:12:04,df = pd.read_csv('cancer.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'cancer.csv'
1773,2022-05-19 03:12:08,df = pd.read_csv('cancer.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'cancer.csv'
1774,2022-05-19 03:12:34,df =pd.read_csv('cancer.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'cancer.csv'
1775,2022-05-19 03:12:42,df = pd.read_csv('cancer.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'cancer.csv'
1776,2022-05-19 03:12:50,X = df[df.columns[1:]]  # target 以外,NameError: name 'df' is not defined
1777,2022-05-19 03:13:21,"    X, y, test_size=0.3, random_state=0)",NameError: name 'X' is not defined
1778,2022-05-19 03:13:47,y = df['target'],KeyError: 'target'
1779,2022-05-19 03:14:02,"    X, y, test_size=0.3, random_state=0)",TypeError: Singleton array array(27) cannot be considered a valid collection.
1780,2022-05-19 03:19:36,print(f'再現率 {recall:.5f}'),NameError: name 'recall' is not defined
1781,2022-05-19 03:20:22,df = pd.read_csv('cancer.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'cancer.csv'
1782,2022-05-19 03:46:49,"X_train_all_name, X_test_all_name = train_test_split(df_all_name,test_size = 0.3)","ValueError: With n_samples=0, test_size=0.3 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters."
1783,2022-05-19 03:50:04,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
1784,2022-05-19 03:50:43,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
1785,2022-05-19 06:09:29,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0] and y_pred=['0']. Make sure that the predictions provided by the classifier coincides with the true labels.
1786,2022-05-19 06:09:57,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float32')."
1787,2022-05-19 06:11:15,"X_train_all_name, X_test_all_name = train_test_split(df_all_name,test_size = 0.3)","ValueError: With n_samples=0, test_size=0.3 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters."
1788,2022-05-19 06:15:53,"cm = confusion_matrix(y_test, y_pred)",NameError: name 'confusion_matrix' is not defined
1789,2022-05-19 06:15:58,"for j in range(1,n):",NameError: name 'n' is not defined
1790,2022-05-19 06:16:13,  ans +=j *a[j]-sum_a,TypeError: unsupported operand type(s) for -: 'int' and 'list'
1791,2022-05-19 06:16:38,  ans +=j*a[j] - sum_a,TypeError: unsupported operand type(s) for -: 'int' and 'list'
1792,2022-05-19 06:18:11,   ans +=j*a[j] - sum_a,TypeError: unsupported operand type(s) for -: 'int' and 'list'
1793,2022-05-19 06:19:33,   ans +=j*a[j] - sum_a,TypeError: unsupported operand type(s) for -: 'int' and 'list'
1794,2022-05-19 06:23:47,y_pred = model.predict(X_test),NotFittedError: This RandomForestClassifier instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
1795,2022-05-19 06:28:38,"print('name の訓練データ数：',len(X_train_name))",NameError: name 'X_train_name' is not defined
1796,2022-05-19 06:29:10,"print('name の訓練データ数：',len(X_train_name))",NameError: name 'X_train_name' is not defined
1797,2022-05-19 06:30:06,"  model.fit(X_train, y_train)",KeyboardInterrupt: 
1798,2022-05-19 06:30:16,y_pred = model.predict(X_test),AttributeError: 'list' object has no attribute 'take'
1799,2022-05-19 06:34:03,  print(white),NameError: name 'white' is not defined
1800,2022-05-19 06:40:10,pca = PCA(n_components=2)  # ２次元に,NameError: name 'PCA' is not defined
1801,2022-05-19 06:40:32,"sns.scatterplot(data=df3, x='pc1', y='pc2', hue='target')",NameError: name 'df3' is not defined
1802,2022-05-19 06:46:22,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
1803,2022-05-19 06:50:29,"sns.scatterplot(data=X_train_pr, x='pc1', y='pc2', hue='target')",ValueError: Could not interpret value `pc1` for parameter `x`
1804,2022-05-19 07:07:57,  print(S[str(n)]+'...'),TypeError: string indices must be integers
1805,2022-05-19 07:30:05,print(list.sort(list[0])),TypeError: sort() takes no positional arguments
1806,2022-05-19 07:30:26,print(list.sort[0]),TypeError: 'builtin_function_or_method' object is not subscriptable
1807,2022-05-19 07:41:58,X = int(input()),ValueError: invalid literal for int() with base 10: '3.456'
1808,2022-05-19 07:42:35,print(round(int(X))),ValueError: invalid literal for int() with base 10: '3.456'
1809,2022-05-19 07:44:08,Y = int(X),ValueError: invalid literal for int() with base 10: '3.456'
1810,2022-05-19 07:47:51,X = int(input()),ValueError: invalid literal for int() with base 10: '3.456'
1811,2022-05-19 07:48:08,m = round(X),TypeError: type str doesn't define __round__ method
1812,2022-05-19 07:48:22,m = round(int(X)),ValueError: invalid literal for int() with base 10: '3.456'
1813,2022-05-19 08:52:13,"print(max(list[e,f,g,h]))",TypeError: 'type' object is not subscriptable
1814,2022-05-19 09:25:51,"s,t=map(input().split())",TypeError: map() must have at least two arguments.
1815,2022-05-19 09:26:04,print(ts),NameError: name 'ts' is not defined
1816,2022-05-19 13:21:12,"get_ipython().run_cell_magic('atcoder', 'https://www.javadrive.jp/python/for/index1.html', 'X, Y = map(int,input().split())\nwhile X < Y:\n  X += 10\nprint(X/10)')","KogiError: {""translated"": ""\u554f\u984c\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3002"", ""reason"": ""\u554f\u984c\u306e\u6307\u5b9a\u65b9\u6cd5\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u3059"", ""hint"": ""\u554f\u984c\u30da\u30fc\u30b8\u306eURL\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044"", ""solution"": ""%%atcoder \u554f\u984c\u30da\u30fc\u30b8\u306eURL""}"
1817,2022-05-19 13:28:34, print((Y-X)/10),KeyboardInterrupt: 
1818,2022-05-19 13:31:53, print(format((Y-X)/10)),KeyboardInterrupt: 
1819,2022-05-19 13:34:07," print(format((Y-X)/10),'0f')",KeyboardInterrupt: 
1820,2022-05-19 13:34:45, print(m.ceil((Y-X)/10)),NameError: name 'm' is not defined
1821,2022-05-19 13:35:27, print(math.ceil((Y-X)/10)),KeyboardInterrupt: 
1822,2022-05-19 13:37:00,,KeyboardInterrupt: 
1823,2022-05-19 13:38:48,,KeyboardInterrupt: 
1824,2022-05-19 14:34:50,  n = int( len(X_train_all_any) * ratio )  # 最終的に欲しいデータ数,"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
1825,2022-05-19 14:36:53,"data = lis.reshape(19,4)","ValueError: cannot reshape array of size 80 into shape (19,4)"
1826,2022-05-19 14:43:19,"with open('/content/drive/MyDrive/2022OJT_season1/'+ FILE_NAME, 'w') as fp:",NameError: name 'FILE_NAME' is not defined
1827,2022-05-19 14:44:21,"print('正解率(test)', model.score(X_test, y_test))",TypeError: Labels in y_true and y_pred should be of the same type. Got y_true=[0 1] and y_pred=['0' '1']. Make sure that the predictions provided by the classifier coincides with the true labels.
1828,2022-05-19 14:49:47,,ValueError: Cannot take a larger sample than population when 'replace=False'
1829,2022-05-19 14:50:47,,ValueError: Cannot take a larger sample than population when 'replace=False'
1830,2022-05-19 14:52:12,,ValueError: Cannot take a larger sample than population when 'replace=False'
1831,2022-05-19 14:55:28,,ValueError: Cannot take a larger sample than population when 'replace=False'
1832,2022-05-19 14:56:45,,ValueError: Cannot take a larger sample than population when 'replace=False'
1833,2022-05-20 08:49:14,                if l[i][k]+l[j-i][l-k]>=l[j-i][l-k]+l[i][k]:,TypeError: 'int' object is not subscriptable
1834,2022-05-20 08:49:42,                if int(l[i][k])+int(l[j-i][l-k])>=int(l[j-i][l-k])+int(l[i][k]):,TypeError: 'int' object is not subscriptable
1835,2022-05-20 08:53:13,                print(int(l[i][k])+int(l[j-i][l-k])>=int(l[j-i][k])+int(l[i][l-k])),TypeError: 'int' object is not subscriptable
1836,2022-05-20 08:53:27,                print(int(l[i][k])+int(l[j-i][l-k])),TypeError: 'int' object is not subscriptable
1837,2022-05-20 08:53:42,                print(int(l[i][k])),TypeError: 'int' object is not subscriptable
1838,2022-05-20 08:53:57,                print(l[i][k]),TypeError: 'int' object is not subscriptable
1839,2022-05-20 09:22:47,"l = [input().split("" "") for i in range(x)]",KeyboardInterrupt: 
1840,2022-05-20 09:23:13,    z=int(input()),ValueError: invalid literal for int() with base 10: 'fg'
1841,2022-05-20 09:35:46,drive.mount('/content/drive'),MessageError: Error: credential propagation was unsuccessful
1842,2022-05-21 05:01:39,    ans = int(x[0]),TypeError: 'int' object is not subscriptable
1843,2022-05-21 05:02:55,"for i in range(1, N+1):","TypeError: can only concatenate str (not ""int"") to str"
1844,2022-05-21 05:03:35,  if A <= i <= B:,TypeError: '<=' not supported between instances of 'str' and 'int'
1845,2022-05-21 05:04:30,  if len(x) == 1:,TypeError: object of type 'int' has no len()
1846,2022-05-21 05:05:23,  if len(x) == 1:,TypeError: object of type 'int' has no len()
1847,2022-05-21 05:06:21,"N, A, B = map(str, input().split())",ValueError: too many values to unpack (expected 3)
1848,2022-05-21 05:06:28,  elif len(x) == 2:,TypeError: object of type 'int' has no len()
1849,2022-05-21 05:06:55,    ans = int(x[0]) + int(x[1]),TypeError: 'int' object is not subscriptable
1850,2022-05-21 05:08:04,print(int(s[0])) + int(s[1]),TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
1851,2022-05-21 05:13:16,    ans = int(x[0]) + int(x[1]),TypeError: 'int' object is not subscriptable
1852,2022-05-21 05:15:30,  if int(A) <= i <= int(B):,TypeError: '<=' not supported between instances of 'int' and 'NoneType'
1853,2022-05-21 05:15:55,  if int(A) <= i <= int(B):,TypeError: '<=' not supported between instances of 'int' and 'NoneType'
1854,2022-05-21 05:16:20,  if int(A) <= int(i) <= int(B):,"TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'"
1855,2022-05-21 05:26:27,    sum += n,TypeError: unsupported operand type(s) for +=: 'function' and 'int'
1856,2022-05-21 05:53:11,print(ceil(a)),"TypeError: must be real number, not function"
1857,2022-05-21 06:13:01,"N, P = map(str, input().split())",ValueError: too many values to unpack (expected 2)
1858,2022-05-21 06:13:20,"n, j = 0",TypeError: cannot unpack non-iterable int object
1859,2022-05-21 06:13:44,for i in range (N-1):,TypeError: unsupported operand type(s) for -: 'str' and 'int'
1860,2022-05-21 06:14:16,  if a[j] < P:,TypeError: '<' not supported between instances of 'str' and 'int'
1861,2022-05-21 06:14:37,  if int(a[j]) < P:,ValueError: invalid literal for int() with base 10: '80 60 40 0'
1862,2022-05-21 06:15:23,  if int(a[j]) < P:,ValueError: invalid literal for int() with base 10: '80 60 40 0'
1863,2022-05-22 04:27:57,"mean_list_all = make_mean_list1(sample_list, df_keys['keys'])",NameError: name 'make_mean_list1' is not defined
1864,2022-05-22 05:09:37,k_l_column = uid + k_l_column,NameError: name 'uid' is not defined
1865,2022-05-22 05:11:13,"    k_l_column[c].append(i+"" → ""+j)",AttributeError: 'str' object has no attribute 'append'
1866,2022-05-23 04:30:59,"pd,read_csv('boston.csv')",NameError: name 'read_csv' is not defined
1867,2022-05-23 04:35:13,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1868,2022-05-23 04:36:37,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1869,2022-05-23 04:37:10,"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)",NameError: name 'X' is not defined
1870,2022-05-23 04:39:24,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1871,2022-05-23 04:41:24,y=y,NameError: name 'y' is not defined
1872,2022-05-23 04:42:10,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1873,2022-05-23 04:42:39,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
1874,2022-05-23 04:42:50,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1875,2022-05-23 04:43:11,"model.fit(X_train,y_train)",NameError: name 'model' is not defined
1876,2022-05-23 04:43:36,vec = model.fit_transform(words),NameError: name 'words' is not defined
1877,2022-05-23 04:43:49,    words.append(wakachi(name)),NameError: name 'wakachi' is not defined
1878,2022-05-23 04:43:52,"model.fit(X_train,y_train)",ValueError: could not convert string to float: '2014-2-25'
1879,2022-05-23 04:44:03,from janome.tokenizer import Tokenizer,ModuleNotFoundError: No module named 'janome'
1880,2022-05-23 04:44:15,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1881,2022-05-23 04:44:50,from janome.tokenizer import Tokenizer,ModuleNotFoundError: No module named 'janome'
1882,2022-05-23 04:44:58,"model.fit(X, y)",ValueError: could not convert string to float: '月'
1883,2022-05-23 04:47:26,"    model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1884,2022-05-23 04:48:10,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1885,2022-05-23 04:48:52,"    model.fit(X, y)",ValueError: could not convert string to float: '快晴'
1886,2022-05-23 04:50:31,train['week'].value_counts(),NameError: name 'train' is not defined
1887,2022-05-23 04:52:10,df.show(),AttributeError: 'DataFrame' object has no attribute 'show'
1888,2022-05-23 04:52:59,df_name.show(),AttributeError: 'DataFrame' object has no attribute 'show'
1889,2022-05-23 04:53:30,df['kcal'].discribe(),AttributeError: 'Series' object has no attribute 'discribe'
1890,2022-05-23 04:54:23,df['kal'].describe,KeyError: 'kal'
1891,2022-05-23 04:54:59,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1892,2022-05-23 04:56:15,"model.fit(X, y)",ValueError: could not convert string to float: '月'
1893,2022-05-23 04:58:28,"model.fit(X, y)",ValueError: could not convert string to float: '月'
1894,2022-05-23 05:00:53,model.fit(X.y),TypeError: fit() missing 1 required positional argument: 'y'
1895,2022-05-23 05:01:52,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1896,2022-05-23 05:02:06,"X = df['kcal','temperature']  # 価格以外を全て説明変数に","KeyError: ('kcal', 'temperature')"
1897,2022-05-23 05:02:07,"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)",NameError: name 'X' is not defined
1898,2022-05-23 05:02:07,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1899,2022-05-23 05:02:28,"X = df[['kcal'],['temperature']]  # 価格以外を全て説明変数に","TypeError: '(['kcal'], ['temperature'])' is an invalid key"
1900,2022-05-23 05:02:29,df_name.show(),AttributeError: 'DataFrame' object has no attribute 'show'
1901,2022-05-23 05:02:36,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1902,2022-05-23 05:02:40,"model.fit(X, z)",ValueError: could not convert string to float: '2013-11-18'
1903,2022-05-23 05:02:40,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1904,2022-05-23 05:02:54,"plt.scatter(df['payday'], df['tempreture'])",KeyError: 'tempreture'
1905,2022-05-23 05:03:09,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1906,2022-05-23 05:03:19,"model.fit(X, y)","ValueError: Input contains NaN, infinity or a value too large for dtype('float64')."
1907,2022-05-23 05:03:43,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1908,2022-05-23 05:03:49,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1909,2022-05-23 05:04:18,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1910,2022-05-23 05:04:33,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[ 90 101 118 120 130 135 145 140 151 116 151 153 151 171 134 165 155 157
 109 111 160 145 145 151 134 122 121  80 131 128 129  87 129 134 107  85
 126 129 126 107  92 126 120 121 105  92 139 121 126 111  91 137 111  84
  86 137  99 113  85 113 129 104 104  90  69 131 100 110  77  73 123  89
  68  80  70 129  90  72 100 102  77  51  55 106  84 125  99 100  90 107
  96  88  87 128  92  82  57  57  56 109  78  63  56  80  54  97  64  47
  88  59  58  73  70  64  58 126  70  71 104  54  65  77  79  74  64 119
  74  59  47  64  93  74  56  50  72 121  76  63  66  56  57  72  61  64
  49  74  65  54  50  53  63  82  56  54  48 124  65  51  53  53  55  53
  56  62  83  65  52  58  60  38  75  54  58  63 129  45  40  56  53  56
  54 100  55  68  62  56  39  65  68  53  54  43  68  63  54  53 115  56
  49  46  45  29  59  50  45  56  40].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1911,2022-05-23 05:04:41,"model.fit(X, y)",ValueError: could not convert string to float: '月'
1912,2022-05-23 05:05:06,"    model.fit(X, y)",ValueError: could not convert string to float: '快晴'
1913,2022-05-23 05:05:11,"model.fit(X, y)",ValueError: could not convert string to float: '月'
1914,2022-05-23 05:05:14,"model.fit(X, z)",ValueError: could not convert string to float: '2013-11-18'
1915,2022-05-23 05:05:20,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[404.40963855 404.40963855 404.40963855 404.40963855 404.40963855
 404.40963855 404.40963855 404.40963855 404.40963855 404.40963855
 404.40963855 404.40963855 404.40963855 404.40963855 404.40963855
 404.40963855 404.40963855 404.40963855 404.40963855 404.40963855
 404.40963855 404.40963855 404.40963855 404.40963855 404.40963855
 404.40963855 404.40963855 404.40963855 404.         462.
 435.         440.         376.         450.         415.
 430.         375.         447.         426.         400.
 418.         415.         445.         450.         448.
 460.         445.         430.         420.         435.
 425.         423.         415.         438.         432.
 416.         426.         405.         426.         410.
 408.         396.         384.         436.         428.
 407.         413.         393.         409.         396.
 385.         397.         370.         372.         360.
 382.         400.         392.         372.         350.
 407.         392.         315.         404.40963855 349.
 377.         380.         390.         350.         387.
 353.         376.         362.         404.40963855 340.
 370.         330.         333.         325.         375.
 382.         340.         360.         404.40963855 342.
 368.         415.         420.         415.         405.
 434.         400.         428.         430.         403.
 404.40963855 406.         425.         430.         428.
 400.         430.         423.         414.         438.
 404.40963855 420.         418.         424.         405.
 430.         417.         426.         413.         440.
 404.40963855 440.         427.         426.         430.
 407.         421.         430.         420.         414.
 404.40963855 435.         362.         363.         412.
 432.         354.         370.         388.         386.
 404.40963855 418.         324.         434.         418.
 401.         409.         355.         410.         404.40963855
 432.         449.         441.         386.         380.
 410.         400.         410.         415.         404.40963855
 411.         400.         396.         385.         423.
 405.         404.40963855 412.         400.         410.
 396.         398.         380.         440.         408.
 405.         380.         385.         460.         450.
 385.         404.40963855 438.         430.         395.
 400.         395.         408.         394.         404.40963855
 404.         398.        ].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1916,2022-05-23 05:05:26,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1917,2022-05-23 05:05:37,"r2 = r2_score(y, y_pred)",NameError: name 'y' is not defined
1918,2022-05-23 05:06:02,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
1919,2022-05-23 05:06:51,"model.fit(X, y)",ValueError: could not convert string to float: '月'
1920,2022-05-23 05:07:30,y = df['住宅価格'],KeyError: '住宅価格'
1921,2022-05-23 05:08:14,X = df[df.columns[:-1]] ,AttributeError: 'int' object has no attribute 'columns'
1922,2022-05-23 05:08:22,"    model.fit(X, y)",ValueError: could not convert string to float: '快晴'
1923,2022-05-23 05:08:27,"df.drop('datetime', axis=1, inplace=True)","KeyError: ""['datetime'] not found in axis"""
1924,2022-05-23 05:08:30,"    model.fit(X, y)",ValueError: could not convert string to float: '月'
1925,2022-05-23 05:08:38,df.info(),AttributeError: 'int' object has no attribute 'info'
1926,2022-05-23 05:08:38,"X = df['y','soldout'] ","KeyError: ('y', 'soldout')"
1927,2022-05-23 05:08:54,df.head(),AttributeError: 'int' object has no attribute 'head'
1928,2022-05-23 05:08:59,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[ 90 101 118 120 130 135 145 140 151 116 151 153 151 171 134 165 155 157
 109 111 160 145 145 151 134 122 121  80 131 128 129  87 129 134 107  85
 126 129 126 107  92 126 120 121 105  92 139 121 126 111  91 137 111  84
  86 137  99 113  85 113 129 104 104  90  69 131 100 110  77  73 123  89
  68  80  70 129  90  72 100 102  77  51  55 106  84 125  99 100  90 107
  96  88  87 128  92  82  57  57  56 109  78  63  56  80  54  97  64  47
  88  59  58  73  70  64  58 126  70  71 104  54  65  77  79  74  64 119
  74  59  47  64  93  74  56  50  72 121  76  63  66  56  57  72  61  64
  49  74  65  54  50  53  63  82  56  54  48 124  65  51  53  53  55  53
  56  62  83  65  52  58  60  38  75  54  58  63 129  45  40  56  53  56
  54 100  55  68  62  56  39  65  68  53  54  43  68  63  54  53 115  56
  49  46  45  29  59  50  45  56  40].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1929,2022-05-23 05:09:09,y = df['temprature'],KeyError: 'temprature'
1930,2022-05-23 05:09:09,"model.fit(X, y)",ValueError: could not convert string to float: '月'
1931,2022-05-23 05:09:31,df.head(),AttributeError: 'int' object has no attribute 'head'
1932,2022-05-23 05:09:38,df.info(),AttributeError: 'int' object has no attribute 'info'
1933,2022-05-23 05:09:55,"X = df['soldout','kcal','payday','temperature']  ","KeyError: ('soldout', 'kcal', 'payday', 'temperature')"
1934,2022-05-23 05:10:02,"    model.fit(X, y)","ValueError: Expected 2D array, got scalar array instead:
array=<bound method Series.map of 0      月
1      火
2      水
3      木
4      金
      ..
202    水
203    木
204    金
205    月
206    火
Name: week, Length: 207, dtype: object>.
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1935,2022-05-23 05:10:10,df.info(),AttributeError: 'int' object has no attribute 'info'
1936,2022-05-23 05:10:48,df=index_datetime,NameError: name 'index_datetime' is not defined
1937,2022-05-23 05:10:56,"X = df[df['soldout'],df['kcal'],df['payday'],df['temperature']]","TypeError: '(0      0
1      1
2      0
3      1
4      1
      ..
202    1
203    0
204    0
205    1
206    0
Name: soldout, Length: 207, dtype: int64, 0      404.409639
1      404.409639
2      404.409639
3      404.409639
4      404.409639
          ...    
202    408.000000
203    394.000000
204    404.409639
205    404.000000
206    398.000000
Name: kcal, Length: 207, dtype: float64, 0      0.0
1      0.0
2      0.0
3      0.0
4      0.0
      ... 
202    0.0
203    0.0
204    0.0
205    0.0
206    0.0
Name: payday, Length: 207, dtype: float64, 0      19.8
1      17.0
2      15.5
3      15.2
4      16.1
       ... 
202    24.8
203    25.4
204    27.1
205    26.6
206    28.1
Name: temperature, Length: 207, dtype: float64)' is an invalid key"
1938,2022-05-23 05:11:11,"model.fit(X, y)",ValueError: could not convert string to float: '月'
1939,2022-05-23 05:11:20,df['kcal'].describe(),TypeError: 'int' object is not subscriptable
1940,2022-05-23 05:11:27,"X = df[df['soldout'],df['kcal'],df['payday'],df['temperature']]","TypeError: '(0      0
1      1
2      0
3      1
4      1
      ..
202    1
203    0
204    0
205    1
206    0
Name: soldout, Length: 207, dtype: int64, 0      404.409639
1      404.409639
2      404.409639
3      404.409639
4      404.409639
          ...    
202    408.000000
203    394.000000
204    404.409639
205    404.000000
206    398.000000
Name: kcal, Length: 207, dtype: float64, 0      0.0
1      0.0
2      0.0
3      0.0
4      0.0
      ... 
202    0.0
203    0.0
204    0.0
205    0.0
206    0.0
Name: payday, Length: 207, dtype: float64, 0      19.8
1      17.0
2      15.5
3      15.2
4      16.1
       ... 
202    24.8
203    25.4
204    27.1
205    26.6
206    28.1
Name: temperature, Length: 207, dtype: float64)' is an invalid key"
1941,2022-05-23 05:12:00,"model.fit(X_train, y_train)","ValueError: Expected 2D array, got 1D array instead:
array=[396.         404.40963855 435.         408.         426.
 370.         387.         404.40963855 418.         430.
 432.         400.         423.         405.         398.
 415.         426.         400.         415.         333.
 412.         404.40963855 404.40963855 428.         380.
 404.40963855 445.         421.         408.         420.
 384.         404.40963855 410.         430.         394.
 450.         404.40963855 404.40963855 372.         430.
 400.         410.         398.         325.         404.40963855
 404.40963855 414.         409.         438.         425.
 430.         404.40963855 340.         440.         370.
 428.         404.40963855 415.         396.         435.
 420.         377.         404.40963855 404.40963855 386.
 404.40963855 372.         382.         386.         404.
 404.40963855 409.         349.         430.         434.
 400.         418.         376.         396.         404.40963855
 428.         360.         430.         405.         407.
 404.40963855 400.         449.         445.         368.
 426.         423.         404.40963855 426.         413.
 438.         401.         424.         415.         404.
 403.         410.         354.         440.         410.
 418.         412.         376.         441.         430.
 408.         362.         462.         375.         315.
 411.         350.         404.40963855 363.         395.
 370.         392.         404.40963855 432.         392.
 450.         404.40963855 404.40963855 400.         426.
 407.         350.         385.         390.         375.
 404.40963855 404.40963855 404.40963855 385.         393.
 385.         425.         430.         410.        ].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1942,2022-05-23 05:12:01,"    model.fit(X, y)",ValueError: Found array with dim 3. Estimator expected <= 2.
1943,2022-05-23 05:12:10,"X = df['soldout','kcal','temperature']  # 価格以外を全て説明変数に","KeyError: ('soldout', 'kcal', 'temperature')"
1944,2022-05-23 05:12:35,"model.fit(X, y)",ValueError: could not convert string to float: '月'
1945,2022-05-23 05:12:47,"X = df[df['soldout'],df['kcal'],df['temperature']]  # 価格以外を全て説明変数に","TypeError: '(0      0
1      1
2      0
3      1
4      1
      ..
202    1
203    0
204    0
205    1
206    0
Name: soldout, Length: 207, dtype: int64, 0      404
1      404
2      404
3      404
4      404
      ... 
202    408
203    394
204    404
205    404
206    398
Name: kcal, Length: 207, dtype: int64, 0      19.8
1      17.0
2      15.5
3      15.2
4      16.1
       ... 
202    24.8
203    25.4
204    27.1
205    26.6
206    28.1
Name: temperature, Length: 207, dtype: float64)' is an invalid key"
1946,2022-05-23 05:13:07,X = df[df['soldout']],"KeyError: ""None of [Int64Index([0, 1, 0, 1, 1, 1, 0, 1, 0, 0,\n            ...\n            0, 0, 0, 0, 0, 1, 0, 0, 1, 0],\n           dtype='int64', length=207)] are in the [columns]"""
1947,2022-05-23 05:13:12,"model.fit(X, y)",ValueError: could not convert string to float: '月'
1948,2022-05-23 05:13:20,"model.fit(X, y)",ValueError: could not convert string to float: '厚切りイカフライ'
1949,2022-05-23 05:13:31,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404
 404 404 404 404 404 404 404 404 404 404 404 462 435 440 376 450 415 430
 375 447 426 400 418 415 445 450 448 460 445 430 420 435 425 423 415 438
 432 416 426 405 426 410 408 396 384 436 428 407 413 393 409 396 385 397
 370 372 360 382 400 392 372 350 407 392 315 404 349 377 380 390 350 387
 353 376 362 404 340 370 330 333 325 375 382 340 360 404 342 368 415 420
 415 405 434 400 428 430 403 404 406 425 430 428 400 430 423 414 438 404
 420 418 424 405 430 417 426 413 440 404 440 427 426 430 407 421 430 420
 414 404 435 362 363 412 432 354 370 388 386 404 418 324 434 418 401 409
 355 410 404 432 449 441 386 380 410 400 410 415 404 411 400 396 385 423
 405 404 412 400 410 396 398 380 440 408 405 380 385 460 450 385 404 438
 430 395 400 395 408 394 404 404 398].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1950,2022-05-23 05:13:39,"sns.countplot(x='weather', data=df)",ValueError: Could not interpret input 'weather'
1951,2022-05-23 05:13:51,"model.fit(X, y)",ValueError: Found array with dim 3. Estimator expected <= 2.
1952,2022-05-23 05:14:02,"sns.countplot(x='weather', data=df)",ValueError: Could not interpret input 'weather'
1953,2022-05-23 05:14:03,"r2 = r2_score(y, y_pred)",NameError: name 'y_pred' is not defined
1954,2022-05-23 05:14:08,"X = df[['week'],['y'],['kcal']] ","TypeError: '(['week'], ['y'], ['kcal'])' is an invalid key"
1955,2022-05-23 05:14:30,,"ValueError: `bins` must increase monotonically, when an array"
1956,2022-05-23 05:14:58,"model.fit(X, y)",ValueError: Found array with dim 3. Estimator expected <= 2.
1957,2022-05-23 05:15:14,,"ValueError: `bins` must increase monotonically, when an array"
1958,2022-05-23 05:15:15,"X = df[df.columns[3,5,11]]  ","IndexError: too many indices for array: array is 1-dimensional, but 3 were indexed"
1959,2022-05-23 05:15:27,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404
 404 404 404 404 404 404 404 404 404 404 404 462 435 440 376 450 415 430
 375 447 426 400 418 415 445 450 448 460 445 430 420 435 425 423 415 438
 432 416 426 405 426 410 408 396 384 436 428 407 413 393 409 396 385 397
 370 372 360 382 400 392 372 350 407 392 315 404 349 377 380 390 350 387
 353 376 362 404 340 370 330 333 325 375 382 340 360 404 342 368 415 420
 415 405 434 400 428 430 403 404 406 425 430 428 400 430 423 414 438 404
 420 418 424 405 430 417 426 413 440 404 440 427 426 430 407 421 430 420
 414 404 435 362 363 412 432 354 370 388 386 404 418 324 434 418 401 409
 355 410 404 432 449 441 386 380 410 400 410 415 404 411 400 396 385 423
 405 404 412 400 410 396 398 380 440 408 405 380 385 460 450 385 404 438
 430 395 400 395 408 394 404 404 398].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1960,2022-05-23 05:16:01,df['weather'].map({,KeyError: 'weather'
1961,2022-05-23 05:16:11,,"ValueError: `bins` must increase monotonically, when an array"
1962,2022-05-23 05:17:09,"model.fit(X, y)",ValueError: could not convert string to float: '快晴'
1963,2022-05-23 05:17:21,"X = df[['week'],['weathere'],['kcal']] ","TypeError: '(['week'], ['weathere'], ['kcal'])' is an invalid key"
1964,2022-05-23 05:17:23,"X = df[['week'],['weatherr'],['kcal']] ","TypeError: '(['week'], ['weatherr'], ['kcal'])' is an invalid key"
1965,2022-05-23 05:17:26,"X = df[['week'],['weather'],['kcal']] ","TypeError: '(['week'], ['weather'], ['kcal'])' is an invalid key"
1966,2022-05-23 05:17:33,X=x[x.dtypes=='int64'],IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).
1967,2022-05-23 05:17:35,X = df['tempoture'] #一つ選ぶ,KeyError: 'tempoture'
1968,2022-05-23 05:17:54,"plt.scatter(dfdf['y'],['week'])",NameError: name 'dfdf' is not defined
1969,2022-05-23 05:18:07,from janome.tokenizer import Tokenizer,ModuleNotFoundError: No module named 'janome'
1970,2022-05-23 05:18:11,"    rho = corr(df[column], df['y'])",NameError: name 'corr' is not defined
1971,2022-05-23 05:18:16,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[19.8 17.  15.5 15.2 16.1 14.6 17.9 14.7 17.7 12.1 13.8 13.9 13.5 13.8
 14.9  9.1  7.1 11.  12.3 13.9 11.3 10.8  7.8  6.8  8.4 11.5  8.   7.3
  7.3  9.8 10.9  5.1  5.8  2.9  7.   7.8  6.5 10.4  7.4  8.5 10.1  5.1
 12.6 10.3 15.3 14.1 15.9  3.8  3.   4.2  5.5  7.8  6.3  6.4  1.2 11.6
  6.8  7.3  5.4  8.5  6.6 10.5 11.5  8.5 17.7  7.8  8.3  6.1  6.7  7.
  7.6  8.7 14.8 15.2 11.5 14.  18.9 12.6  7.5 17.4 18.9 18.7 12.4 18.5
 17.5 16.1 18.2 14.3 17.8 13.8 20.1 19.  21.3 16.5 16.4 19.7 21.5 20.1
 11.4 16.4 18.8 19.4 19.9 20.8 22.7 17.5 24.  23.3 18.9 21.  23.4 22.7
 18.6 26.  19.3 23.8 22.8 23.9 17.4 19.  19.8 23.9 23.7 25.7 26.  26.9
 30.6 27.  27.5 21.5 19.9 25.  25.5 22.3 21.3 29.5 28.1 27.6 21.9 27.5
 26.5 26.9 23.7 25.2 25.2 25.4 25.5 28.3 28.8 27.  22.1 24.  29.7 24.6
 28.8 33.9 30.9 30.3 30.9 30.1 25.6 30.2 32.  32.5 33.6 28.9 30.4 30.6
 32.5 32.7 32.7 34.3 34.6 32.1 31.1 32.4 29.4 32.2 33.3 33.3 33.  33.1
 26.  26.2 21.  21.6 25.1 23.4 29.1 26.7 26.5 30.2 23.1 26.8 25.  21.9
 27.3 28.8 25.  24.1 23.6 25.2 24.8 25.4 27.1 26.6 28.1].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1972,2022-05-23 05:18:27,"X = df[df.columns[""soldout"",""name"",""kcal"",""weather"",""precipitation"",""tempreature""]] ","IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"
1973,2022-05-23 05:18:31,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[19.8 17.  15.5 15.2 16.1 14.6 17.9 14.7 17.7 12.1 13.8 13.9 13.5 13.8
 14.9  9.1  7.1 11.  12.3 13.9 11.3 10.8  7.8  6.8  8.4 11.5  8.   7.3
  7.3  9.8 10.9  5.1  5.8  2.9  7.   7.8  6.5 10.4  7.4  8.5 10.1  5.1
 12.6 10.3 15.3 14.1 15.9  3.8  3.   4.2  5.5  7.8  6.3  6.4  1.2 11.6
  6.8  7.3  5.4  8.5  6.6 10.5 11.5  8.5 17.7  7.8  8.3  6.1  6.7  7.
  7.6  8.7 14.8 15.2 11.5 14.  18.9 12.6  7.5 17.4 18.9 18.7 12.4 18.5
 17.5 16.1 18.2 14.3 17.8 13.8 20.1 19.  21.3 16.5 16.4 19.7 21.5 20.1
 11.4 16.4 18.8 19.4 19.9 20.8 22.7 17.5 24.  23.3 18.9 21.  23.4 22.7
 18.6 26.  19.3 23.8 22.8 23.9 17.4 19.  19.8 23.9 23.7 25.7 26.  26.9
 30.6 27.  27.5 21.5 19.9 25.  25.5 22.3 21.3 29.5 28.1 27.6 21.9 27.5
 26.5 26.9 23.7 25.2 25.2 25.4 25.5 28.3 28.8 27.  22.1 24.  29.7 24.6
 28.8 33.9 30.9 30.3 30.9 30.1 25.6 30.2 32.  32.5 33.6 28.9 30.4 30.6
 32.5 32.7 32.7 34.3 34.6 32.1 31.1 32.4 29.4 32.2 33.3 33.3 33.  33.1
 26.  26.2 21.  21.6 25.1 23.4 29.1 26.7 26.5 30.2 23.1 26.8 25.  21.9
 27.3 28.8 25.  24.1 23.6 25.2 24.8 25.4 27.1 26.6 28.1].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1974,2022-05-23 05:18:38,df=sample(150),NameError: name 'sample' is not defined
1975,2022-05-23 05:18:49,df=de.sample(150),NameError: name 'de' is not defined
1976,2022-05-23 05:18:53,"X = df[['week'],['weather'],['kcal']] ","TypeError: '(['week'], ['weather'], ['kcal'])' is an invalid key"
1977,2022-05-23 05:19:09,X = df[df.columns[dropna(axis=1)]] ,NameError: name 'dropna' is not defined
1978,2022-05-23 05:19:16,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[19.8 17.  15.5 15.2 16.1 14.6 17.9 14.7 17.7 12.1 13.8 13.9 13.5 13.8
 14.9  9.1  7.1 11.  12.3 13.9 11.3 10.8  7.8  6.8  8.4 11.5  8.   7.3
  7.3  9.8 10.9  5.1  5.8  2.9  7.   7.8  6.5 10.4  7.4  8.5 10.1  5.1
 12.6 10.3 15.3 14.1 15.9  3.8  3.   4.2  5.5  7.8  6.3  6.4  1.2 11.6
  6.8  7.3  5.4  8.5  6.6 10.5 11.5  8.5 17.7  7.8  8.3  6.1  6.7  7.
  7.6  8.7 14.8 15.2 11.5 14.  18.9 12.6  7.5 17.4 18.9 18.7 12.4 18.5
 17.5 16.1 18.2 14.3 17.8 13.8 20.1 19.  21.3 16.5 16.4 19.7 21.5 20.1
 11.4 16.4 18.8 19.4 19.9 20.8 22.7 17.5 24.  23.3 18.9 21.  23.4 22.7
 18.6 26.  19.3 23.8 22.8 23.9 17.4 19.  19.8 23.9 23.7 25.7 26.  26.9
 30.6 27.  27.5 21.5 19.9 25.  25.5 22.3 21.3 29.5 28.1 27.6 21.9 27.5
 26.5 26.9 23.7 25.2 25.2 25.4 25.5 28.3 28.8 27.  22.1 24.  29.7 24.6
 28.8 33.9 30.9 30.3 30.9 30.1 25.6 30.2 32.  32.5 33.6 28.9 30.4 30.6
 32.5 32.7 32.7 34.3 34.6 32.1 31.1 32.4 29.4 32.2 33.3 33.3 33.  33.1
 26.  26.2 21.  21.6 25.1 23.4 29.1 26.7 26.5 30.2 23.1 26.8 25.  21.9
 27.3 28.8 25.  24.1 23.6 25.2 24.8 25.4 27.1 26.6 28.1].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1979,2022-05-23 05:19:22,X = df[df.columns[df.dropna(axis=1)]] ,"IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"
1980,2022-05-23 05:19:27,"model.fit(X, y)",ValueError: Found array with dim 3. Estimator expected <= 2.
1981,2022-05-23 05:20:07,n=input(),KeyboardInterrupt: 
1982,2022-05-23 05:20:26,y = df['販売数'],KeyError: '販売数'
1983,2022-05-23 05:20:41,,"TypeError: ufunc 'true_divide' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''"
1984,2022-05-23 05:21:02,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404
 404 404 404 404 404 404 404 404 404 404 404 462 435 440 376 450 415 430
 375 447 426 400 418 415 445 450 448 460 445 430 420 435 425 423 415 438
 432 416 426 405 426 410 408 396 384 436 428 407 413 393 409 396 385 397
 370 372 360 382 400 392 372 350 407 392 315 404 349 377 380 390 350 387
 353 376 362 404 340 370 330 333 325 375 382 340 360 404 342 368 415 420
 415 405 434 400 428 430 403 404 406 425 430 428 400 430 423 414 438 404
 420 418 424 405 430 417 426 413 440 404 440 427 426 430 407 421 430 420
 414 404 435 362 363 412 432 354 370 388 386 404 418 324 434 418 401 409
 355 410 404 432 449 441 386 380 410 400 410 415 404 411 400 396 385 423
 405 404 412 400 410 396 398 380 440 408 405 380 385 460 450 385 404 438
 430 395 400 395 408 394 404 404 398].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1985,2022-05-23 05:21:07,"X = df['soldout','kcal','payday','temperature']  # 価格以外を全て説明変数に","KeyError: ('soldout', 'kcal', 'payday', 'temperature')"
1986,2022-05-23 05:21:14,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404
 404 404 404 404 404 404 404 404 404 404 404 462 435 440 376 450 415 430
 375 447 426 400 418 415 445 450 448 460 445 430 420 435 425 423 415 438
 432 416 426 405 426 410 408 396 384 436 428 407 413 393 409 396 385 397
 370 372 360 382 400 392 372 350 407 392 315 404 349 377 380 390 350 387
 353 376 362 404 340 370 330 333 325 375 382 340 360 404 342 368 415 420
 415 405 434 400 428 430 403 404 406 425 430 428 400 430 423 414 438 404
 420 418 424 405 430 417 426 413 440 404 440 427 426 430 407 421 430 420
 414 404 435 362 363 412 432 354 370 388 386 404 418 324 434 418 401 409
 355 410 404 432 449 441 386 380 410 400 410 415 404 411 400 396 385 423
 405 404 412 400 410 396 398 380 440 408 405 380 385 460 450 385 404 438
 430 395 400 395 408 394 404 404 398].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1987,2022-05-23 05:21:24,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404
 404 404 404 404 404 404 404 404 404 404 404 462 435 440 376 450 415 430
 375 447 426 400 418 415 445 450 448 460 445 430 420 435 425 423 415 438
 432 416 426 405 426 410 408 396 384 436 428 407 413 393 409 396 385 397
 370 372 360 382 400 392 372 350 407 392 315 404 349 377 380 390 350 387
 353 376 362 404 340 370 330 333 325 375 382 340 360 404 342 368 415 420
 415 405 434 400 428 430 403 404 406 425 430 428 400 430 423 414 438 404
 420 418 424 405 430 417 426 413 440 404 440 427 426 430 407 421 430 420
 414 404 435 362 363 412 432 354 370 388 386 404 418 324 434 418 401 409
 355 410 404 432 449 441 386 380 410 400 410 415 404 411 400 396 385 423
 405 404 412 400 410 396 398 380 440 408 405 380 385 460 450 385 404 438
 430 395 400 395 408 394 404 404 398].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1988,2022-05-23 05:21:25,"X = df[['week','kacl']]  ","KeyError: ""['kacl'] not in index"""
1989,2022-05-23 05:21:34,X=df.dtypes[x.dtypes=='int64'],IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).
1990,2022-05-23 05:21:39,"X = df[df.columns[""name"",""weather""]] ","IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"
1991,2022-05-23 05:21:39,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[0 1 0 1 1 1 0 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 1 1
 1 1 0 1 1 0 1 1 1 1 1 1 1 1 0 0 0 1 1 0 0 1 0 1 0 0 1 0 0 1 1 0 1 0 0 0 1
 1 0 1 1 1 0 0 0 1 0 0 1 0 1 1 0 1 1 0 1 0 0 0 0 1 0 1 0 1 0 0 1 0 0 1 0 1
 0 1 1 1 0 1 0 1 1 0 1 0 1 1 0 0 0 0 1 0 1 0 1 1 0 1 0 1 0 0 0 0 1 0 0 0 0
 1 0 0 1 0 1 0 0 1 0 1 1 1 0 1 1 0 1 0 0 0 0 1 1 1 0 0 0 1 0 1 0 0 1 0 0 0
 0 0 1 1 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1992,2022-05-23 05:22:23,"X = df[['week'],['weather'],['kcal']] ","TypeError: '(['week'], ['weather'], ['kcal'])' is an invalid key"
1993,2022-05-23 05:22:37,y = df['販売数'],KeyError: '販売数'
1994,2022-05-23 05:22:41,"model.fit(X, y)","ValueError: Expected 2D array, got 1D array instead:
array=[19.8 17.  15.5 15.2 16.1 14.6 17.9 14.7 17.7 12.1 13.8 13.9 13.5 13.8
 14.9  9.1  7.1 11.  12.3 13.9 11.3 10.8  7.8  6.8  8.4 11.5  8.   7.3
  7.3  9.8 10.9  5.1  5.8  2.9  7.   7.8  6.5 10.4  7.4  8.5 10.1  5.1
 12.6 10.3 15.3 14.1 15.9  3.8  3.   4.2  5.5  7.8  6.3  6.4  1.2 11.6
  6.8  7.3  5.4  8.5  6.6 10.5 11.5  8.5 17.7  7.8  8.3  6.1  6.7  7.
  7.6  8.7 14.8 15.2 11.5 14.  18.9 12.6  7.5 17.4 18.9 18.7 12.4 18.5
 17.5 16.1 18.2 14.3 17.8 13.8 20.1 19.  21.3 16.5 16.4 19.7 21.5 20.1
 11.4 16.4 18.8 19.4 19.9 20.8 22.7 17.5 24.  23.3 18.9 21.  23.4 22.7
 18.6 26.  19.3 23.8 22.8 23.9 17.4 19.  19.8 23.9 23.7 25.7 26.  26.9
 30.6 27.  27.5 21.5 19.9 25.  25.5 22.3 21.3 29.5 28.1 27.6 21.9 27.5
 26.5 26.9 23.7 25.2 25.2 25.4 25.5 28.3 28.8 27.  22.1 24.  29.7 24.6
 28.8 33.9 30.9 30.3 30.9 30.1 25.6 30.2 32.  32.5 33.6 28.9 30.4 30.6
 32.5 32.7 32.7 34.3 34.6 32.1 31.1 32.4 29.4 32.2 33.3 33.3 33.  33.1
 26.  26.2 21.  21.6 25.1 23.4 29.1 26.7 26.5 30.2 23.1 26.8 25.  21.9
 27.3 28.8 25.  24.1 23.6 25.2 24.8 25.4 27.1 26.6 28.1].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1995,2022-05-23 05:23:12,"model.fit(X, y)",ValueError: could not convert string to float: '--'
1996,2022-05-23 05:23:24,X = df[df.dropna(axis=1)] ,"ValueError: Boolean array expected for the condition, not object"
1997,2022-05-23 05:23:41,"model.fit(X_train, y_train)","ValueError: Expected 2D array, got 1D array instead:
array=[104 134 129 129  99  56 107 111  65  93  86  54 137  54  40  64  66  73
  63  57  53 134  80  70  65 160 139  72  59  64 104 118 113  56  50 121
 151  83  80  49  45  62  39  56 120 128  74  53  56  91  64  90  92  76
  82  69  74 126  73 111 126 125  45 171  48 151 100  78  60  56 145  77
  84  77  53  40  53  88  56 153  54  56  85 113 131 101  65  52 120  97
  56  56 157 126  50  84  55  47 107 131  58  62  82  87  75  59  55 129
  58  61  53  54 128 109  55  45 102 126  50  46  68  72 122  65  51  54
 129 115 107  85  57  90 123 100 126 145 116  80  53 110  68  71 121  58].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
1998,2022-05-23 05:23:48,"print('R2(テスト):', r2_score(y_test, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [104, 83]"
1999,2022-05-23 05:23:54,"X = df[['完売フラグ','気温']]  # 価格以外を全て説明変数に","KeyError: ""['完売フラグ'] not in index"""
2000,2022-05-23 05:24:00,from janome.tokenizer import Tokenizer,ModuleNotFoundError: No module named 'janome'
2001,2022-05-23 05:24:03,"print('R2(テスト):', r2_score(y_test, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [85, 83]"
2002,2022-05-23 05:24:15,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
2003,2022-05-23 05:24:27,"X = df[['kcal'],['temperature']] #一つ選ぶ","TypeError: '(['kcal'], ['temperature'])' is an invalid key"
2004,2022-05-23 05:24:43,"model.fit(X_train, y_train)","ValueError: Expected 2D array, got 1D array instead:
array=[104 134 129 129  99  56 107 111  65  93  86  54 137  54  40  64  66  73
  63  57  53 134  80  70  65 160 139  72  59  64 104 118 113  56  50 121
 151  83  80  49  45  62  39  56 120 128  74  53  56  91  64  90  92  76
  82  69  74 126  73 111 126 125  45 171  48 151 100  78  60  56 145  77
  84  77  53  40  53  88  56 153  54  56  85 113 131 101  65  52 120  97
  56  56 157 126  50  84  55  47 107 131  58  62  82  87  75  59  55 129
  58  61  53  54 128 109  55  45 102 126  50  46  68  72 122  65  51  54
 129 115 107  85  57  90 123 100 126 145 116  80  53 110  68  71 121  58].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
2005,2022-05-23 05:24:45,"X = df[['df_week','kacl']]  ","KeyError: ""None of [Index(['df_week', 'kacl'], dtype='object')] are in the [columns]"""
2006,2022-05-23 05:24:46,"X = df[['kcal'],['temperature']] #一つ選ぶ","TypeError: '(['kcal'], ['temperature'])' is an invalid key"
2007,2022-05-23 05:24:58,"X = df[df.columns[:-1]],index_datetime",NameError: name 'index_datetime' is not defined
2008,2022-05-23 05:25:12,"model.fit(X, y)",ValueError: Found array with dim 3. Estimator expected <= 2.
2009,2022-05-23 05:25:15,from janome.tokenizer import Tokenizer,ModuleNotFoundError: No module named 'janome'
2010,2022-05-23 05:25:19,"model.fit(X, y)",ValueError: Found array with dim 3. Estimator expected <= 2.
2011,2022-05-23 05:25:29,"X_train = pd.get_dummies(train[['week', 'temperature']])",NameError: name 'train' is not defined
2012,2022-05-23 05:25:37,import janome,ModuleNotFoundError: No module named 'janome'
2013,2022-05-23 05:25:40,"model.fit(X, y)",ValueError: Unable to convert array of bytes/strings into decimal numbers with dtype='numeric'
2014,2022-05-23 05:25:49,from sklearn.metrics import datetime,ImportError: cannot import name 'datetime' from 'sklearn.metrics' (/usr/local/lib/python3.7/dist-packages/sklearn/metrics/__init__.py)
2015,2022-05-23 05:25:54,"model.fit(X, y)",ValueError: Unable to convert array of bytes/strings into decimal numbers with dtype='numeric'
2016,2022-05-23 05:25:59,"model.fit(X, y)",ValueError: Unable to convert array of bytes/strings into decimal numbers with dtype='numeric'
2017,2022-05-23 05:26:00,"r2 = r2_score(y, y_pred)",NameError: name 'y_pred' is not defined
2018,2022-05-23 05:26:31,"df.drop('datetime', axis=1, inplace=True)","KeyError: ""['datetime'] not found in axis"""
2019,2022-05-23 05:26:31,"model.fit(X, y)",ValueError: Found array with dim 4. Estimator expected <= 2.
2020,2022-05-23 05:26:39,"X = df[['week'],['weather'],['temperature']]  # 価格以外を全て説明変数に","TypeError: '(['week'], ['weather'], ['temperature'])' is an invalid key"
2021,2022-05-23 05:26:57,"model.fit(X, y)",ValueError: Unable to convert array of bytes/strings into decimal numbers with dtype='numeric'
2022,2022-05-23 05:27:11,"model.fit(X, y)",ValueError: could not convert string to float: '厚切りイカフライ'
2023,2022-05-23 05:27:15,"model.fit(X, y)",ValueError: could not convert string to float: '快晴'
2024,2022-05-23 05:27:26,"X = df[['week'],['weather'],['temperature']] ","TypeError: '(['week'], ['weather'], ['temperature'])' is an invalid key"
2025,2022-05-23 05:27:32,"model.fit(X, y)",ValueError: Unable to convert array of bytes/strings into decimal numbers with dtype='numeric'
2026,2022-05-23 05:28:02,"X = df[df.columns[""soldout"",""kcal"",""payday"",""temperature""]]","IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"
2027,2022-05-23 05:28:12,"model.fit(X, y)",ValueError: could not convert string to float: '快晴'
2028,2022-05-23 05:28:29,"model.fit(X, y)",ValueError: could not convert string to float: '月'
2029,2022-05-23 05:29:07,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
2030,2022-05-23 05:29:15,"df_weather = pd.get_dummies(df['weather'], dummy_na=False, columns=['weather'])",KeyError: 'weather'
2031,2022-05-23 05:29:22,de['name'],NameError: name 'de' is not defined
2032,2022-05-23 05:30:19,df.groupby('天気')['y'].median(),KeyError: 'Column not found: y'
2033,2022-05-23 05:30:43,"X = df[df.columns[soldout,kcal,payday,temperature]]",NameError: name 'soldout' is not defined
2034,2022-05-23 05:30:54,df.head(df['neme']),KeyError: 'neme'
2035,2022-05-23 05:30:59,X = df[df.columns[soldout]],NameError: name 'soldout' is not defined
2036,2022-05-23 05:31:03,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
2037,2022-05-23 05:31:43,df_week = show(),NameError: name 'show' is not defined
2038,2022-05-23 05:31:46,"X = df[['week','kacl']]  ","KeyError: ""['kacl'] not in index"""
2039,2022-05-23 05:31:54,df_week.info,AttributeError: 'int' object has no attribute 'info'
2040,2022-05-23 05:31:56,"model.fit(X, y)",ValueError: Unable to convert array of bytes/strings into decimal numbers with dtype='numeric'
2041,2022-05-23 05:32:08,"model.fit(X, y)",ValueError: could not convert string to float: '快晴'
2042,2022-05-23 05:32:23,"X = df[df.columns[""kcal""]]","IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"
2043,2022-05-23 05:33:12,"model.fit(X, y)",ValueError: could not convert string to float: '快晴'
2044,2022-05-23 05:33:30,"df['week'] = pd.get_dummies(df['week'], dummy_na=False, columns=['week'])",ValueError: Columns must be same length as key
2045,2022-05-23 05:33:40,"df['week'] = pd.get_dummies(df['week'], dummy_na=False, columns=['week'])",ValueError: Columns must be same length as key
2046,2022-05-23 05:34:00,"X = df[['week','kacl']]  ","KeyError: ""['kacl'] not in index"""
2047,2022-05-23 05:34:03,"model.fit(X, y)",ValueError: could not convert string to float: '月'
2048,2022-05-23 05:34:19,"model.fit(X, y)",ValueError: could not convert string to float: '月'
2049,2022-05-23 05:34:47,"df.drop('datetime','week', axis=1, inplace=True)",TypeError: drop() got multiple values for argument 'axis'
2050,2022-05-23 05:34:59,"df.drop('datetime', axis=1, inplace=True)","KeyError: ""['datetime'] not found in axis"""
2051,2022-05-23 05:35:00,df['week'] = df['df_week'],KeyError: 'df_week'
2052,2022-05-23 05:35:19,"sns.countplot(x='曜日', data=df)",ValueError: Could not interpret input '曜日'
2053,2022-05-23 05:35:30,"df.drop('datetie', axis=1, inplace=True)","KeyError: ""['datetie'] not found in axis"""
2054,2022-05-23 05:35:53,y_pred = model.predict(X),NotFittedError: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.
2055,2022-05-23 05:36:01,"sns.countplot(x='曜日', data=df)",ValueError: Could not interpret input '曜日'
2056,2022-05-23 05:36:03,"print('R2(訓練):', r2_score(y_train, model.predict(X_train)))","ValueError: X has 4 features, but LinearRegression is expecting 2 features as input."
2057,2022-05-23 05:36:06,"df.drop('datetie', axis=1, inplace=True)","KeyError: ""['datetie'] not found in axis"""
2058,2022-05-23 05:36:08,"X = df[df['soldout','kcal']]  # 価格以外を全て説明変数に","KeyError: ('soldout', 'kcal')"
2059,2022-05-23 05:36:26,"print('R2(テスト):', r2_score(y_test, y_pred))","ValueError: Found input variables with inconsistent numbers of samples: [83, 207]"
2060,2022-05-23 05:36:57,"X = df[df.columns['soldout','kcal']]  # 価格以外を全て説明変数に","IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"
2061,2022-05-23 05:37:07,"df.drop('rewarks', axis=1, inplace=True)","KeyError: ""['rewarks'] not found in axis"""
2062,2022-05-23 05:37:07,"model.fit(X, y)",ValueError: Unable to convert array of bytes/strings into decimal numbers with dtype='numeric'
2063,2022-05-23 05:37:16,"    model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
2064,2022-05-23 05:37:34,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
2065,2022-05-23 05:37:44,df['曜日（月～金'].map({,KeyError: '曜日（月～金'
2066,2022-05-23 05:38:01,"model.fit(X, y)",ValueError: could not convert string to float: '特になし'
2067,2022-05-23 05:38:33,df['week'] = df['week'].fillna(df['week'].df_week),AttributeError: 'Series' object has no attribute 'df_week'
2068,2022-05-23 05:38:36,"df.drop('rewarks', axis=1, inplace=True)","KeyError: ""['rewarks'] not found in axis"""
2069,2022-05-23 05:38:52,"model.fit(X_train,y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float64')."
2070,2022-05-23 05:38:56,"df.drop('string', axis=1, inplace=True)","KeyError: ""['string'] not found in axis"""
2071,2022-05-23 05:39:00,"model.fit(X, y)",ValueError: could not convert string to float: '月'
2072,2022-05-23 05:40:02,df['week'] = df['week'].fillna(df['week'].map()),TypeError: map() missing 1 required positional argument: 'arg'
2073,2022-05-23 05:40:14,"df.drop('', axis=1, inplace=True)","KeyError: ""[''] not found in axis"""
2074,2022-05-23 05:40:31,"model.fit(X, y)",ValueError: could not convert string to float: '--'
2075,2022-05-23 05:40:43,df=df+df[Weather],"KeyError: ""None of [Float64Index([0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, nan, 2.0, 0.0,\n              ...\n              nan, 3.0, 3.0, 2.0, nan, 3.0, 3.0, nan, 0.0, 0.0],\n             dtype='float64', length=207)] are in the [columns]"""
2076,2022-05-23 05:41:23,"df.drop('precipation', axis=1, inplace=True)","KeyError: ""['precipation'] not found in axis"""
2077,2022-05-23 05:42:52,df['remark'] = df['remark'].map({,KeyError: 'remark'
2078,2022-05-23 05:43:00,"model.fit(X_train,y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float64')."
2079,2022-05-23 05:43:37,df['weather_num'],KeyError: 'weather_num'
2080,2022-05-23 05:44:00,"df['week'] = df_week = pd.get_dummies(df['week'], dummy_na=False, columns=['week'])",ValueError: Columns must be same length as key
2081,2022-05-23 05:44:11,"df[['kcal','wether_num','temperature']]","KeyError: ""['wether_num'] not in index"""
2082,2022-05-23 05:44:31,"df['kcal','weather','temperature']","KeyError: ('kcal', 'weather', 'temperature')"
2083,2022-05-23 05:44:33,"X = df[['week'],['weather'],['temperature']] ","TypeError: '(['week'], ['weather'], ['temperature'])' is an invalid key"
2084,2022-05-23 05:44:39,"df[['week','weather_num','temprature']]","KeyError: ""['weather_num', 'temprature'] not in index"""
2085,2022-05-23 05:44:50,"X = df[['week_num'],['weather_num'],['temperature']] ","TypeError: '(['week_num'], ['weather_num'], ['temperature'])' is an invalid key"
2086,2022-05-23 05:44:53,"df[['week','weather_num','temperature']]","KeyError: ""['weather_num'] not in index"""
2087,2022-05-23 05:44:58,"df['kcal','weather','temperature']","KeyError: ('kcal', 'weather', 'temperature')"
2088,2022-05-23 05:45:45,"X = df[['week_num'],['weather_num'],['temperature']['kcal']] ","TypeError: list indices must be integers or slices, not str"
2089,2022-05-23 05:45:54,X = df[df.columns['kcal']],"IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"
2090,2022-05-23 05:45:57,"df[['kcal','weather_num','tempreture']]","KeyError: ""['weather_num', 'tempreture'] not in index"""
2091,2022-05-23 05:46:00,"X = df[['week_num'],['weather_num'],['temperature'],['kcal']] ","TypeError: '(['week_num'], ['weather_num'], ['temperature'], ['kcal'])' is an invalid key"
2092,2022-05-23 05:46:04,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
2093,2022-05-23 05:46:35,"df[['kcal','weather_num','tempreture']]","KeyError: ""['tempreture'] not in index"""
2094,2022-05-23 05:46:48,"X = df[['week_num'],['weather_num'],['temperature'],['kcal']] ","TypeError: '(['week_num'], ['weather_num'], ['temperature'], ['kcal'])' is an invalid key"
2095,2022-05-23 05:46:57,"model.fit(X, y)",ValueError: could not convert string to float: '快晴'
2096,2022-05-23 05:47:39,"model.fit(X_train,y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float64')."
2097,2022-05-23 05:48:00,"model.fit(X, y)",ValueError: could not convert string to float: '--'
2098,2022-05-23 05:48:10,"df[['week_num'],['weather_num'],['temperature'],['kcal']]","TypeError: '(['week_num'], ['weather_num'], ['temperature'], ['kcal'])' is an invalid key"
2099,2022-05-23 05:48:50,"model.fit(X, y)",ValueError: could not convert string to float: '快晴'
2100,2022-05-23 05:49:00,df_columns,NameError: name 'df_columns' is not defined
2101,2022-05-23 05:49:11,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float64')."
2102,2022-05-23 05:49:41,"model.fit(X_train, y_train)","ValueError: Input contains NaN, infinity or a value too large for dtype('float64')."
2103,2022-05-23 05:49:42,"X = df[['week_num','tempreture']]  ","KeyError: ""['tempreture'] not in index"""
2104,2022-05-23 05:49:43,"    model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
2105,2022-05-23 05:49:53,"X = df[df.columns['kcal','tempreature']] ","IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"
2106,2022-05-23 05:50:00,"pd.concat([df.head, df_name], axis=1)",TypeError: cannot concatenate object of type '<class 'method'>'; only Series and DataFrame objs are valid
2107,2022-05-23 05:50:07,"X = df[df.columns['kcal','tempreature']] ","IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"
2108,2022-05-23 05:50:08,"model.fit(X, y)",ValueError: could not convert string to float: '快晴'
2109,2022-05-23 05:50:09,df_head,NameError: name 'df_head' is not defined
2110,2022-05-23 05:50:29,"X = df[df.columns['kcal','tempreature']] ","IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"
2111,2022-05-23 05:50:29,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
2112,2022-05-23 05:50:41,y_pred = model.predict(X),ValueError: could not convert string to float: '厚切りイカフライ'
2113,2022-05-23 05:50:43,"pd.concat([df, df_name], axis=1)",InvalidIndexError: Reindexing only valid with uniquely valued Index objects
2114,2022-05-23 05:51:07,"X = df[df.columns['y','kcal','tempreature']] ","IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"
2115,2022-05-23 05:51:15,"model.fit(X, y)",ValueError: Unable to convert array of bytes/strings into decimal numbers with dtype='numeric'
2116,2022-05-23 05:51:18,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
2117,2022-05-23 05:51:38,"X = df['kcal','tempreature'] ","KeyError: ('kcal', 'tempreature')"
2118,2022-05-23 05:51:58,"X = df(['kcal','tempreature']) ",TypeError: 'DataFrame' object is not callable
2119,2022-05-23 05:52:21,"X = df(['kcal','soldout']) ",TypeError: 'DataFrame' object is not callable
2120,2022-05-23 05:52:50,"X = df(['kcal','	payday']) ",TypeError: 'DataFrame' object is not callable
2121,2022-05-23 05:52:59,"X = df(['kcal','payday']) ",TypeError: 'DataFrame' object is not callable
2122,2022-05-23 05:55:26,"model.fit(X, y)",ValueError: could not convert string to float: 'なし'
2123,2022-05-23 05:55:52,"columns = df['kcal', 'weather_num', 'week_num', 'temperature']","KeyError: ('kcal', 'weather_num', 'week_num', 'temperature')"
2124,2022-05-23 05:55:57,a.dtype,AttributeError: 'DataFrame' object has no attribute 'dtype'
2125,2022-05-23 05:56:43,df[columns],"ValueError: Boolean array expected for the condition, not int64"
2126,2022-05-23 05:56:46,"X = df(['kcal','temperature']) ",TypeError: 'DataFrame' object is not callable
2127,2022-05-23 05:57:00,"model.fit(X, y)",ValueError: could not convert string to float: '快晴'
2128,2022-05-23 05:57:06,"model.fit(X, y)","ValueError: Input contains NaN, infinity or a value too large for dtype('float64')."
2129,2022-05-23 05:57:15,"model.fit(X, y)",ValueError: could not convert string to float: '2013-11-18'
2130,2022-05-23 05:58:06,"model.fit(X, y)","ValueError: Input contains NaN, infinity or a value too large for dtype('float64')."
2131,2022-05-23 05:58:16,"model.fit(X, y)",ValueError: Unable to convert array of bytes/strings into decimal numbers with dtype='numeric'
2132,2022-05-23 05:58:52,"model.fit(X_train, y_train)",NameError: name 'X_train' is not defined
2133,2022-05-23 05:59:49,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
2134,2022-05-23 06:00:45,info(),NameError: name 'info' is not defined
2135,2022-05-23 06:02:24,"plt.scatter(y, y_pred, c='red', alpha=0.3)",ValueError: x and y must be the same size
2136,2022-05-23 06:14:46,X_train = X_train_all[sample_list],"KeyError: ""None of [Index([        ('c', 'c'),         ('c', ')'),         ('c', 't'),\n               ('c', 'b'),         ('c', 'e'), ('c', 'Backspace'),\n               ('c', '2'),         ('c', 'i'),         ('c', 's'),\n               ('c', 'p'),\n       ...\n               ('g', '*'),         ('g', 'r'),     ('g', 'Enter'),\n       ('g', 'ArrowLeft'),         ('g', ']'),         ('g', 'f'),\n               ('g', 'l'),         ('g', '='),         ('g', 'n'),\n               ('g', 'g')],\n      dtype='object', length=1600)] are in the [columns]"""
2137,2022-05-23 06:15:05,"print(n.replace(1,9))","TypeError: replace() argument 1 must be str, not int"
2138,2022-05-23 06:15:10,"print(n.replace(1,9))","TypeError: replace() argument 1 must be str, not int"
2139,2022-05-23 06:15:38,"print(n.replace(1,9))","TypeError: replace() argument 1 must be str, not int"
2140,2022-05-23 06:15:38,"get_ipython().run_cell_magic('', 'atcoder https://atcoder.jp/contests/abc223/tasks/abc223_a', ""x = int(input())\nif x % 100 == 0:\n  print('Yes')\nelse:\n  print('No')"")",UsageError: Cell magic `%%` not found.
2141,2022-05-23 06:15:52,"print(n.replace(1,9))","TypeError: replace() argument 1 must be str, not int"
2142,2022-05-23 06:15:56,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc214/tasks/abc214_b', '')","UsageError: %%atcoder is a cell magic, but the cell body is empty."
2143,2022-05-23 06:16:02,"get_ipython().run_cell_magic('atcoderhttps://atcoder.jp/contests/abc111/tasks/abc111_a', '', 'n=str(input())\nprint(n.replace(1,9))')",UsageError: Cell magic `%%atcoderhttps://atcoder.jp/contests/abc111/tasks/abc111_a` not found.
2144,2022-05-23 06:16:15,"print(n.replace(1,9))","TypeError: replace() argument 1 must be str, not int"
2145,2022-05-23 06:16:34,"print(n.replace(1,9))","TypeError: replace() argument 1 must be str, not int"
2146,2022-05-23 06:16:47,"print(n.replace(1,9))",AttributeError: 'int' object has no attribute 'replace'
2147,2022-05-23 06:16:52,if x/1000>=1:,TypeError: unsupported operand type(s) for /: 'str' and 'int'
2148,2022-05-23 06:17:07,"print(n.replace(1,9))","TypeError: replace() argument 1 must be str, not int"
2149,2022-05-23 06:17:08,"  print(0,a)",NameError: name 'a' is not defined
2150,2022-05-23 06:18:00,"get_ipython().run_cell_magic('https://atcoder.jp/contests/abc183/tasks/abc183_a', '', 'def relu(x):\n  return x * (x > 0.0)')",UsageError: Cell magic `%%https://atcoder.jp/contests/abc183/tasks/abc183_a` not found.
2151,2022-05-23 06:18:08,"get_ipython().run_cell_magic('', 'https://atcoder.jp/contests/abc183/tasks/abc183_a', 'def relu(x):\n  return x * (x > 0.0)')",UsageError: Cell magic `%%` not found.
2152,2022-05-23 06:18:35,"  print[0,x]",TypeError: 'function' object is not subscriptable
2153,2022-05-23 06:18:55,X_train = X_train_all[sample_list],"KeyError: ""None of [Index([('ArrowRight', 'ArrowRight'),          ('ArrowRight', '='),\n                ('ArrowRight', 'h'),      ('ArrowRight', 'SPACE'),\n                ('ArrowRight', 'b'),          ('ArrowRight', 'r'),\n                ('ArrowRight', ','),          ('ArrowRight', 'g'),\n                ('ArrowRight', 'm'),          ('ArrowRight', ']'),\n       ...\n                         (')', 'f'),                   (')', '0'),\n                         (')', '['),                   (')', 'y'),\n                         (')', 'c'),                   (')', 't'),\n                         (')', 'x'),           (')', 'Backspace'),\n                         (')', 'n'),                   (')', ')')],\n      dtype='object', length=1600)] are in the [columns]"""
2154,2022-05-23 06:20:46,if X%100==0 and X==n0:,NameError: name 'n0' is not defined
2155,2022-05-23 06:21:29,"K,S=map(input().split())",TypeError: map() must have at least two arguments.
2156,2022-05-23 06:21:48,"K,S=map(str,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2157,2022-05-23 06:22:17,"get_ipython().run_cell_magic('', 'atcoder abc181_b', 'n=int(input())\nsum=0\nfor i in range(n):\n  a,b=map(int,input().split())\n  sum+=(b-a+1)*(b+a)/2\nprint(sum)')",UsageError: Cell magic `%%` not found.
2158,2022-05-23 06:22:56,X_train = X_train_all[k_l],"KeyError: ""None of [Index([         ('a', 'a'), ('a', 'ArrowRight'),          ('a', 'g'),\n                ('a', 'f'),  ('a', 'Backspace'),          ('a', 'r'),\n                ('a', 't'),          ('a', 'h'),          ('a', '.'),\n        ('a', 'ArrowLeft'),\n       ...\n                ('(', ']'),          ('(', 'y'),      ('(', 'Shift'),\n                ('(', 'w'),          ('(', '='),          ('(', '2'),\n                ('(', 'p'),          ('(', 'u'),          ('(', ')'),\n                ('(', '(')],\n      dtype='object', length=1600)] are in the [columns]"""
2159,2022-05-23 06:23:09,X_train = X_train_all[k_l],"KeyError: ""None of [Index([         ('a', 'a'), ('a', 'ArrowRight'),          ('a', 'g'),\n                ('a', 'f'),  ('a', 'Backspace'),          ('a', 'r'),\n                ('a', 't'),          ('a', 'h'),          ('a', '.'),\n        ('a', 'ArrowLeft'),\n       ...\n                ('(', ']'),          ('(', 'y'),      ('(', 'Shift'),\n                ('(', 'w'),          ('(', '='),          ('(', '2'),\n                ('(', 'p'),          ('(', 'u'),          ('(', ')'),\n                ('(', '(')],\n      dtype='object', length=1600)] are in the [columns]"""
2160,2022-05-23 06:23:31,"S.replace('x','0')",AttributeError: 'list' object has no attribute 'replace'
2161,2022-05-23 06:23:42,"get_ipython().run_cell_magic('actcoder', 'https://atcoder.jp/contests/abc168/tasks/abc168_b', 'K=int(input())\nS=str(input())\np=S[0:K]\ns=len(S)\nif s<=K:\n  print(S)\nelse:\n  print(p,end="""",\'...\')')",UsageError: Cell magic `%%actcoder` not found.
2162,2022-05-23 06:23:53,"N, X = map(int, input().split())",KeyboardInterrupt: 
2163,2022-05-23 06:23:54,while X>=Y:,KeyboardInterrupt: 
2164,2022-05-23 06:24:10,N = int(input()),KeyboardInterrupt: 
2165,2022-05-23 06:24:48,"S.replace('x','0')",AttributeError: 'list' object has no attribute 'replace'
2166,2022-05-23 06:25:00,if S[3]==S[4] and S[5]==S[6]:,IndexError: string index out of range
2167,2022-05-23 06:25:12,X_train = X_train_all[k_l_column[1:]],"KeyError: '[\'a → g\', \'a → f\', \'a → h\', \'a → .\', \'a → 0\', \'a → *\', \'a → >\', \'a → x\', \'a → Enter\', \'a → ""\', \'a → ,\', \'a → c\', \'a → e\', \'a → d\', \'a → SPACE\', \'a → o\', \'a → /\', \'a → ]\', \'a → Shift\', \'a → w\', \'a → =\', \'a → 2\', \'a → p\', \'a → u\', \'a → )\', \'a → (\', \'ArrowRight → g\', \'ArrowRight → r\', \'ArrowRight → *\', \'ArrowRight → s\', \'ArrowRight → >\', \'ArrowRight → ""\', \'ArrowRight → c\', \'ArrowRight → d\', \'ArrowRight → n\', \'ArrowRight → l\', \'ArrowRight → =\', \'ArrowRight → 2\', \'ArrowRight → u\', \'ArrowRight → )\', \'ArrowRight → (\', \'g → g\', \'g → f\', \'g → r\', \'g → .\', \'g → 0\', \'g → *\', \'g → s\', \'g → m\', \'g → >\', \'g → x\', \'g → ""\', \'g → ,\', \'g → b\', \'g → c\', \'g → d\', \'g → n\', \'g → l\', \'g → /\', \'g → ]\', \'g → y\', \'g → w\', \'g → =\', \'g → 2\', \'g → p\', \'g → )\', \'g → (\', \'f → a\', \'f → f\', \'f → r\', \'f → t\', \'f → .\', \'f → ArrowLeft\', \'f → 0\', \'f → *\', \'f → s\', \'f → m\', \'f → >\', \'f → Enter\', \'f → ""\', \'f → ,\', \'f → b\', \'f → c\', \'f → e\', \'f → d\', \'f → n\', \'f → l\', \'f → [\', \'f → /\', \'f → ]\', \'f → y\', \'f → w\', \'f → =\', \'f → 2\', \'f → p\', \'f → u\', \'f → )\', \'f → (\', \'Backspace → *\', \'Backspace → =\', \'Backspace → (\', \'r → r\', \'r → .\', \'r → 0\', \'r → *\', \'r → m\', \'r → >\', \'r → x\', \'r → Enter\', \'r → ""\', \'r → ,\', \'r → b\', \'r → c\', \'r → d\', \'r → l\', \'r → [\', \'r → /\', \'r → ]\', \'r → y\', \'r → w\', \'r → =\', \'r → 2\', \'r → p\', \'r → )\', \'r → (\', \'t → r\', \'t → 0\', \'t → *\', \'t → >\', \'t → x\', \'t → ""\', \'t → ,\', \'t → b\', \'t → d\', \'t → o\', \'t → l\', \'t → [\', \'t → ]\', \'t → w\', \'t → =\', \'t → 2\', \'t → u\', \'t → )\', \'t → (\', \'h → a\', \'h → h\', \'h → ArrowLeft\', \'h → 0\', \'h → *\', \'h → m\', \'h → >\', \'h → x\', \'h → Enter\', \'h → ""\', \'h → b\', \'h → c\', \'h → d\', \'h → n\', \'h → o\', \'h → l\', \'h → [\', \'h → ]\', \'h → =\', \'h → 2\', \'h → p\', \'h → u\', \'h → )\', \'h → (\', \'. → a\', \'. → g\', \'. → f\', \'. → r\', \'. → t\', \'. → h\', \'. → .\', \'. → ArrowLeft\', \'. → 0\', \'. → *\', \'. → m\', \'. → >\', \'. → x\', \'. → Enter\', \'. → ""\', \'. → ,\', \'. → b\', \'. → c\', \'. → e\', \'. → n\', \'. → l\', \'. → [\', \'. → /\', \'. → ]\', \'. → y\', \'. → w\', \'. → =\', \'. → 2\', \'. → )\', \'. → (\', \'ArrowLeft → g\', \'ArrowLeft → *\', \'ArrowLeft → >\', \'ArrowLeft → ""\', \'ArrowLeft → b\', \'ArrowLeft → c\', \'ArrowLeft → n\', \'ArrowLeft → l\', \'ArrowLeft → /\', \'ArrowLeft → =\', \'ArrowLeft → 2\', \'ArrowLeft → u\', \'ArrowLeft → )\', \'ArrowLeft → (\', \'0 → a\', \'0 → g\', \'0 → f\', \'0 → r\', \'0 → t\', \'0 → h\', \'0 → .\', \'0 → ArrowLeft\', \'0 → *\', \'0 → s\', \'0 → m\', \'0 → i\', \'0 → >\', \'0 → x\', \'0 → ""\', \'0 → ,\', \'0 → b\', \'0 → c\', \'0 → e\', \'0 → d\', \'0 → n\', \'0 → o\', \'0 → l\', \'0 → [\', \'0 → /\', \'0 → y\', \'0 → w\', \'0 → =\', \'0 → 2\', \'0 → p\', \'0 → u\', \'0 → )\', \'0 → (\', \'* → a\', \'* → f\', \'* → r\', \'* → t\', \'* → .\', \'* → 0\', \'* → *\', \'* → s\', \'* → m\', \'* → i\', \'* → >\', \'* → Enter\', \'* → ""\', \'* → ,\', \'* → b\', \'* → c\', \'* → e\', \'* → d\', \'* → n\', \'* → o\', \'* → l\', \'* → [\', \'* → /\', \'* → ]\', \'* → y\', \'* → w\', \'* → =\', \'* → 2\', \'* → p\', \'* → u\', \'* → )\', \'* → (\', \'s → g\', \'s → f\', \'s → r\', \'s → t\', \'s → h\', \'s → .\', \'s → 0\', \'s → *\', \'s → s\', \'s → m\', \'s → >\', \'s → x\', \'s → Enter\', \'s → ""\', \'s → c\', \'s → /\', \'s → ]\', \'s → y\', \'s → w\', \'s → =\', \'s → 2\', \'s → p\', \'s → )\', \'s → (\', \'m → ArrowRight\', \'m → f\', \'m → r\', \'m → h\', \'m → .\', \'m → ArrowLeft\', \'m → 0\', \'m → *\', \'m → i\', \'m → >\', \'m → x\', \'m → Enter\', \'m → ""\', \'m → ,\', \'m → b\', \'m → c\', \'m → e\', \'m → d\', \'m → SPACE\', \'m → o\', \'m → l\', \'m → [\', \'m → /\', \'m → ]\', \'m → y\', \'m → =\', \'m → 2\', \'m → p\', \'m → u\', \'m → )\', \'m → (\', \'i → a\', \'i → 0\', \'i → *\', \'i → >\', \'i → ""\', \'i → ,\', \'i → c\', \'i → o\', \'i → l\', \'i → [\', \'i → ]\', \'i → y\', \'i → w\', \'i → =\', \'i → 2\', \'i → )\', \'i → (\', \'> → a\', \'> → ArrowRight\', \'> → g\', \'> → f\', \'> → r\', \'> → t\', \'> → h\', \'> → .\', \'> → ArrowLeft\', \'> → 0\', \'> → *\', \'> → s\', \'> → m\', \'> → i\', \'> → >\', \'> → x\', \'> → Enter\', \'> → ""\', \'> → ,\', \'> → b\', \'> → c\', \'> → e\', \'> → d\', \'> → n\', \'> → o\', \'> → l\', \'> → [\', \'> → /\', \'> → ]\', \'> → y\', \'> → w\', \'> → 2\', \'> → p\', \'> → u\', \'> → )\', \'> → (\', \'x → a\', \'x → g\', \'x → f\', \'x → r\', \'x → t\', \'x → h\', \'x → ArrowLeft\', \'x → 0\', \'x → *\', \'x → s\', \'x → m\', \'x → >\', \'x → Enter\', \'x → ""\', \'x → ,\', \'x → b\', \'x → c\', \'x → e\', \'x → n\', \'x → o\', \'x → l\', \'x → [\', \'x → /\', \'x → ]\', \'x → y\', \'x → w\', \'x → =\', \'x → 2\', \'x → p\', \'x → u\', \'x → )\', \'x → (\', \'Enter → a\', \'Enter → g\', \'Enter → f\', \'Enter → t\', \'Enter → h\', \'Enter → .\', \'Enter → 0\', \'Enter → *\', \'Enter → s\', \'Enter → m\', \'Enter → >\', \'Enter → x\', \'Enter → ""\', \'Enter → ,\', \'Enter → b\', \'Enter → c\', \'Enter → e\', \'Enter → d\', \'Enter → n\', \'Enter → SPACE\', \'Enter → l\', \'Enter → [\', \'Enter → /\', \'Enter → ]\', \'Enter → y\', \'Enter → w\', \'Enter → =\', \'Enter → u\', \'Enter → )\', \'Enter → (\', \'"" → g\', \'"" → f\', \'"" → r\', \'"" → h\', \'"" → 0\', \'"" → *\', \'"" → m\', \'"" → i\', \'"" → >\', \'"" → x\', \'"" → b\', \'"" → c\', \'"" → e\', \'"" → d\', \'"" → n\', \'"" → l\', \'"" → /\', \'"" → y\', \'"" → w\', \'"" → =\', \'"" → u\', \'"" → (\', \', → g\', \', → f\', \', → r\', \', → h\', \', → .\', \', → 0\', \', → *\', \', → m\', \', → i\', \', → >\', \', → x\', \', → Enter\', \', → ""\', \', → b\', \', → c\', \', → e\', \', → d\', \', → n\', \', → o\', \', → l\', \', → [\', \', → /\', \', → ]\', \', → y\', \', → w\', \', → =\', \', → 2\', \', → p\', \', → u\', \', → )\', \', → (\', \'b → ArrowRight\', \'b → g\', \'b → r\', \'b → h\', \'b → .\', \'b → ArrowLeft\', \'b → 0\', \'b → *\', \'b → m\', \'b → >\', \'b → x\', \'b → Enter\', \'b → ""\', \'b → ,\', \'b → b\', \'b → n\', \'b → SPACE\', \'b → o\', \'b → [\', \'b → /\', \'b → ]\', \'b → y\', \'b → Shift\', \'b → w\', \'b → =\', \'b → 2\', \'b → p\', \'b → u\', \'b → )\', \'b → (\', \'c → a\', \'c → ArrowRight\', \'c → g\', \'c → f\', \'c → r\', \'c → t\', \'c → .\', \'c → ArrowLeft\', \'c → 0\', \'c → *\', \'c → s\', \'c → m\', \'c → i\', \'c → >\', \'c → x\', \'c → Enter\', \'c → ""\', \'c → ,\', \'c → b\', \'c → c\', \'c → n\', \'c → l\', \'c → [\', \'c → /\', \'c → ]\', \'c → y\', \'c → Shift\', \'c → w\', \'c → =\', \'c → 2\', \'c → p\', \'c → u\', \'c → )\', \'c → (\', \'e → .\', \'e → 0\', \'e → *\', \'e → m\', \'e → >\', \'e → x\', \'e → ""\', \'e → b\', \'e → c\', \'e → n\', \'e → [\', \'e → ]\', \'e → =\', \'e → 2\', \'e → p\', \'e → )\', \'e → (\', \'d → a\', \'d → ArrowRight\', \'d → g\', \'d → t\', \'d → .\', \'d → ArrowLeft\', \'d → 0\', \'d → *\', \'d → s\', \'d → m\', \'d → >\', \'d → x\', \'d → Enter\', \'d → ""\', \'d → ,\', \'d → b\', \'d → c\', \'d → d\', \'d → n\', \'d → SPACE\', \'d → o\', \'d → l\', \'d → /\', \'d → ]\', \'d → y\', \'d → Shift\', \'d → w\', \'d → =\', \'d → 2\', \'d → p\', \'d → u\', \'d → )\', \'d → (\', \'n → h\', \'n → 0\', \'n → *\', \'n → >\', \'n → x\', \'n → Enter\', \'n → ""\', \'n → ,\', \'n → e\', \'n → d\', \'n → o\', \'n → [\', \'n → /\', \'n → ]\', \'n → w\', \'n → =\', \'n → 2\', \'n → p\', \'n → u\', \'n → )\', \'n → (\', \'SPACE → a\', \'SPACE → r\', \'SPACE → 0\', \'SPACE → >\', \'SPACE → ""\', \'SPACE → b\', \'SPACE → n\', \'SPACE → [\', \'SPACE → ]\', \'SPACE → =\', \'SPACE → 2\', \'SPACE → p\', \'SPACE → )\', \'SPACE → (\', \'o → a\', \'o → g\', \'o → f\', \'o → h\', \'o → .\', \'o → ArrowLeft\', \'o → 0\', \'o → *\', \'o → s\', \'o → >\', \'o → x\', \'o → Enter\', \'o → ""\', \'o → ,\', \'o → b\', \'o → c\', \'o → d\', \'o → n\', \'o → SPACE\', \'o → o\', \'o → l\', \'o → [\', \'o → /\', \'o → ]\', \'o → y\', \'o → Shift\', \'o → w\', \'o → =\', \'o → 2\', \'o → p\', \'o → u\', \'o → )\', \'o → (\', \'l → a\', \'l → ArrowRight\', \'l → g\', \'l → f\', \'l → r\', \'l → t\', \'l → h\', \'l → .\', \'l → ArrowLeft\', \'l → 0\', \'l → *\', \'l → m\', \'l → >\', \'l → x\', \'l → Enter\', \'l → ""\', \'l → ,\', \'l → b\', \'l → c\', \'l → n\', \'l → SPACE\', \'l → o\', \'l → l\', \'l → [\', \'l → /\', \'l → ]\', \'l → y\', \'l → Shift\', \'l → =\', \'l → 2\', \'l → p\', \'l → u\', \'l → )\', \'l → (\', \'[ → a\', \'[ → ArrowRight\', \'[ → g\', \'[ → f\', \'[ → r\', \'[ → t\', \'[ → h\', \'[ → .\', \'[ → *\', \'[ → m\', \'[ → i\', \'[ → >\', \'[ → x\', \'[ → Enter\', \'[ → ""\', \'[ → ,\', \'[ → b\', \'[ → c\', \'[ → e\', \'[ → d\', \'[ → n\', \'[ → SPACE\', \'[ → l\', \'[ → [\', \'[ → /\', \'[ → y\', \'[ → w\', \'[ → =\', \'[ → p\', \'[ → u\', \'[ → )\', \'[ → (\', \'/ → a\', \'/ → ArrowRight\', \'/ → g\', \'/ → f\', \'/ → r\', \'/ → t\', \'/ → .\', \'/ → 0\', \'/ → *\', \'/ → m\', \'/ → i\', \'/ → >\', \'/ → x\', \'/ → Enter\', \'/ → ""\', \'/ → ,\', \'/ → b\', \'/ → c\', \'/ → e\', \'/ → d\', \'/ → n\', \'/ → o\', \'/ → l\', \'/ → [\', \'/ → ]\', \'/ → y\', \'/ → w\', \'/ → =\', \'/ → p\', \'/ → u\', \'/ → )\', \'/ → (\', \'] → a\', \'] → g\', \'] → f\', \'] → r\', \'] → t\', \'] → h\', \'] → 0\', \'] → *\', \'] → s\', \'] → m\', \'] → i\', \'] → >\', \'] → x\', \'] → ""\', \'] → b\', \'] → c\', \'] → e\', \'] → d\', \'] → n\', \'] → SPACE\', \'] → o\', \'] → l\', \'] → /\', \'] → ]\', \'] → y\', \'] → w\', \'] → =\', \'] → 2\', \'] → p\', \'] → u\', \'] → )\', \'] → (\', \'y → a\', \'y → g\', \'y → f\', \'y → r\', \'y → h\', \'y → .\', \'y → 0\', \'y → *\', \'y → s\', \'y → m\', \'y → i\', \'y → >\', \'y → x\', \'y → ""\', \'y → ,\', \'y → b\', \'y → c\', \'y → d\', \'y → n\', \'y → o\', \'y → l\', \'y → [\', \'y → /\', \'y → ]\', \'y → y\', \'y → w\', \'y → =\', \'y → 2\', \'y → p\', \'y → u\', \'y → )\', \'y → (\', \'Shift → a\', \'Shift → g\', \'Shift → r\', \'Shift → ,\', \'Shift → b\', \'Shift → c\', \'Shift → e\', \'Shift → d\', \'Shift → n\', \'Shift → l\', \'Shift → w\', \'Shift → u\', \'w → a\', \'w → ArrowRight\', \'w → g\', \'w → f\', \'w → r\', \'w → t\', \'w → .\', \'w → ArrowLeft\', \'w → 0\', \'w → *\', \'w → s\', \'w → m\', \'w → >\', \'w → x\', \'w → Enter\', \'w → ""\', \'w → ,\', \'w → b\', \'w → c\', \'w → d\', \'w → n\', \'w → SPACE\', \'w → o\', \'w → [\', \'w → /\', \'w → ]\', \'w → y\', \'w → Shift\', \'w → =\', \'w → 2\', \'w → p\', \'w → u\', \'w → )\', \'w → (\', \'= → a\', \'= → ArrowRight\', \'= → g\', \'= → f\', \'= → r\', \'= → h\', \'= → .\', \'= → 0\', \'= → *\', \'= → s\', \'= → m\', \'= → i\', \'= → >\', \'= → x\', \'= → Enter\', \'= → ""\', \'= → ,\', \'= → b\', \'= → c\', \'= → e\', \'= → d\', \'= → n\', \'= → o\', \'= → l\', \'= → [\', \'= → /\', \'= → ]\', \'= → Shift\', \'= → w\', \'= → 2\', \'= → u\', \'= → )\', \'= → (\', \'2 → a\', \'2 → g\', \'2 → f\', \'2 → r\', \'2 → h\', \'2 → .\', \'2 → 0\', \'2 → *\', \'2 → s\', \'2 → m\', \'2 → i\', \'2 → >\', \'2 → x\', \'2 → ""\', \'2 → ,\', \'2 → b\', \'2 → c\', \'2 → d\', \'2 → n\', \'2 → SPACE\', \'2 → o\', \'2 → l\', \'2 → [\', \'2 → /\', \'2 → ]\', \'2 → y\', \'2 → w\', \'2 → =\', \'2 → 2\', \'2 → p\', \'2 → u\', \'2 → )\', \'2 → (\', \'p → g\', \'p → f\', \'p → h\', \'p → .\', \'p → ArrowLeft\', \'p → 0\', \'p → *\', \'p → m\', \'p → >\', \'p → x\', \'p → Enter\', \'p → ""\', \'p → ,\', \'p → b\', \'p → c\', \'p → d\', \'p → n\', \'p → SPACE\', \'p → l\', \'p → [\', \'p → /\', \'p → ]\', \'p → y\', \'p → Shift\', \'p → =\', \'p → 2\', \'p → )\', \'p → (\', \'u → a\', \'u → ArrowRight\', \'u → r\', \'u → t\', \'u → .\', \'u → 0\', \'u → *\', \'u → s\', \'u → m\', \'u → >\', \'u → x\', \'u → Enter\', \'u → ""\', \'u → ,\', \'u → b\', \'u → c\', \'u → e\', \'u → o\', \'u → l\', \'u → [\', \'u → /\', \'u → ]\', \'u → Shift\', \'u → w\', \'u → =\', \'u → 2\', \'u → )\', \'u → (\', \') → a\', \') → r\', \') → t\', \') → h\', \') → .\', \') → *\', \') → s\', \') → m\', \') → i\', \') → >\', \') → x\', \') → ""\', \') → c\', \') → e\', \') → d\', \') → o\', \') → l\', \') → /\', \') → y\', \') → =\', \') → 2\', \') → p\', \') → u\', \'( → g\', \'( → f\', \'( → r\', \'( → t\', \'( → .\', \'( → 0\', \'( → *\', \'( → i\', \'( → >\', \'( → Enter\', \'( → ""\', \'( → b\', \'( → d\', \'( → n\', \'( → o\', \'( → l\', \'( → /\', \'( → y\', \'( → =\', \'( → p\', \'( → u\'] not in index'"
2168,2022-05-23 06:26:25,print(x),NameError: name 'x' is not defined
2169,2022-05-23 06:27:02,"K,S=map(str, input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2170,2022-05-23 06:27:35,X_train = X_train_all[k_l],"KeyError: ""None of [Index([         ('a', 'a'), ('a', 'ArrowRight'),          ('a', 'g'),\n                ('a', 'f'),  ('a', 'Backspace'),          ('a', 'r'),\n                ('a', 't'),          ('a', 'h'),          ('a', '.'),\n        ('a', 'ArrowLeft'),\n       ...\n                ('(', ']'),          ('(', 'y'),      ('(', 'Shift'),\n                ('(', 'w'),          ('(', '='),          ('(', '2'),\n                ('(', 'p'),          ('(', 'u'),          ('(', ')'),\n                ('(', '(')],\n      dtype='object', length=1600)] are in the [columns]"""
2171,2022-05-23 06:27:40,"K,S=map(str, input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2172,2022-05-23 06:28:08,"K,S=map(int, input().split())","ValueError: invalid literal for int() with base 10: '7,acr'"
2173,2022-05-23 06:28:09,if (S[3])==(S[4]) and (S[5])==(S[6]):,IndexError: string index out of range
2174,2022-05-23 06:28:54,    X += 1,KeyboardInterrupt: 
2175,2022-05-23 06:29:26,"print(x[2],x[3],x[1])",IndexError: string index out of range
2176,2022-05-23 06:29:40,    X += 10,KeyboardInterrupt: 
2177,2022-05-23 06:29:43,x==-1,NameError: name 'x' is not defined
2178,2022-05-23 06:30:01,  print(X+S[0]),TypeError: 'int' object is not subscriptable
2179,2022-05-23 06:30:13,"model.fit(X, y)",ValueError: could not convert string to float: '月'
2180,2022-05-23 06:30:14,a=sort.a,NameError: name 'sort' is not defined
2181,2022-05-23 06:30:21,  print(int(X)+S[0]),TypeError: 'int' object is not subscriptable
2182,2022-05-23 06:30:29,  print(str(X)+S[0]),TypeError: 'int' object is not subscriptable
2183,2022-05-23 06:30:52,y= relu(x),NameError: name 'x' is not defined
2184,2022-05-23 06:31:07,c=x[3],IndexError: string index out of range
2185,2022-05-23 06:31:07,N[-1]=int(N),TypeError: 'str' object does not support item assignment
2186,2022-05-23 06:32:03,x==-1,NameError: name 'x' is not defined
2187,2022-05-23 06:33:09,y = x**2 - 2*x + 1,NameError: name 'x' is not defined
2188,2022-05-23 06:34:06,elif x[1]==0:,IndexError: list index out of range
2189,2022-05-23 06:34:19,  a+=N,KeyboardInterrupt: 
2190,2022-05-23 06:35:19,  print(0+S),TypeError: unsupported operand type(s) for +: 'int' and 'str'
2191,2022-05-23 06:35:24,print(0+n),TypeError: unsupported operand type(s) for +: 'int' and 'str'
2192,2022-05-23 06:35:43,print(0+n),TypeError: unsupported operand type(s) for +: 'int' and 'str'
2193,2022-05-23 06:36:20,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc183/tasks/abc183_a', '')","UsageError: %%atcoder is a cell magic, but the cell body is empty."
2194,2022-05-23 06:37:13,S=str(input()),KeyboardInterrupt: 
2195,2022-05-23 06:38:13,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc183/tasks/abc183_a', '')","UsageError: %%atcoder is a cell magic, but the cell body is empty."
2196,2022-05-23 06:39:06,df['weel'].map({,KeyError: 'weel'
2197,2022-05-23 06:39:30,"A,B=map(str,input().split())",KeyboardInterrupt: 
2198,2022-05-23 06:39:30,"get_ipython().run_cell_magic('atcoder', 'abc195_c', '')","UsageError: %%atcoder is a cell magic, but the cell body is empty."
2199,2022-05-23 06:39:32,  while a[i]<b[j]+ab and j<len(a):,IndexError: list index out of range
2200,2022-05-23 06:39:44,    return X,NameError: name 'X' is not defined
2201,2022-05-23 06:39:51,"A,B=map(str,input().split())",KeyboardInterrupt: 
2202,2022-05-23 06:39:54,print(ReLU(x)),NameError: name 'x' is not defined
2203,2022-05-23 06:40:13,x=int(input()),ValueError: invalid literal for int() with base 10: '1 1 7 2'
2204,2022-05-23 06:40:20,"X,Y=map(int,input().split())","ValueError: invalid literal for int() with base 10: '80,94'"
2205,2022-05-23 06:40:37,    if abs(b[j]-a[i])<ab:,IndexError: list index out of range
2206,2022-05-23 06:40:42,"A,B=map(str,input().split())",KeyboardInterrupt: 
2207,2022-05-23 06:40:51,"n=str(int,input())","TypeError: decoding to str: need a bytes-like object, type found"
2208,2022-05-23 06:41:02,x=int(input()),ValueError: invalid literal for int() with base 10: '1 1 7 2'
2209,2022-05-23 06:41:04,  while b[j]!=1: #a[i]<b[j]+ab and j<len(a):,IndexError: list index out of range
2210,2022-05-23 06:41:53,"X,Y=map(str,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2211,2022-05-23 06:42:11,"n=str(int,input())","TypeError: decoding to str: need a bytes-like object, type found"
2212,2022-05-23 06:42:17,"A, B = input().split()","ValueError: not enough values to unpack (expected 2, got 1)"
2213,2022-05-23 06:42:22,x=int(input()),ValueError: invalid literal for int() with base 10: '1 1 7 2'
2214,2022-05-23 06:42:27,0<= N <= 9999,TypeError: '<=' not supported between instances of 'int' and 'str'
2215,2022-05-23 06:43:19,  while b[j]!=1: #a[i]<b[j]+ab and j<len(a):,IndexError: list index out of range
2216,2022-05-23 06:43:39,x=int(input()),ValueError: invalid literal for int() with base 10: '1 1 7 2'
2217,2022-05-23 06:43:55,  while b[j]!=1: #a[i]<b[j]+ab and j<len(a):,IndexError: list index out of range
2218,2022-05-23 06:44:24,df['precipitaion'].value_counts(),KeyError: 'precipitaion'
2219,2022-05-23 06:44:42,N=str(input()),KeyboardInterrupt: 
2220,2022-05-23 06:45:15,N=str(input()),KeyboardInterrupt: 
2221,2022-05-23 06:45:24,x=int(print()),"TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'"
2222,2022-05-23 06:45:33,print(s[2]+s[3]+s[1]),IndexError: string index out of range
2223,2022-05-23 06:46:53,"S.replace('1','x').replace('9','1').replace('x','1')",NameError: name 'S' is not defined
2224,2022-05-23 06:46:57,"model.fit(X, y)",ValueError: could not convert string to float: '--'
2225,2022-05-23 06:48:25,   return int(A[x]) + int(B[x]),TypeError: 'int' object is not subscriptable
2226,2022-05-23 06:48:28,"get_ipython().run_cell_magic('atcoderhttps://atcoder.jp/contests/abc111/tasks/abc111_a', '', "" n=str(input())\nn.replace('1','x').replace('9','1').replace('x','9')"")",UsageError: Cell magic `%%atcoderhttps://atcoder.jp/contests/abc111/tasks/abc111_a` not found.
2227,2022-05-23 06:48:31,print(f(f(f(t)+t)+f(f(t)))),TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
2228,2022-05-23 06:48:47,get_ipython().magic('atcoder abc152_b'),"UsageError: Line magic function `%atcoder` not found (But cell magic `%%atcoder` exists, did you mean that instead?)."
2229,2022-05-23 06:50:20,s=int(input()),ValueError: invalid literal for int() with base 10: 'abc'
2230,2022-05-23 06:52:28,"if a.endwith(""ist""):",AttributeError: 'str' object has no attribute 'endwith'
2231,2022-05-23 06:57:09,    if N<=a:,KeyboardInterrupt: 
2232,2022-05-23 06:57:34,Al = len(A),TypeError: object of type 'int' has no len()
2233,2022-05-23 06:58:09,"X,Y=map(str, input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2234,2022-05-23 06:58:46,"print(int('A',K))",ValueError: invalid literal for int() with base 2: 'A'
2235,2022-05-23 06:58:51,"A,B=map(int(input()))",ValueError: invalid literal for int() with base 10: '100 80'
2236,2022-05-23 06:59:09,"A,B=map(input())",TypeError: map() must have at least two arguments.
2237,2022-05-23 06:59:33,if h>=5:,TypeError: '>=' not supported between instances of 'str' and 'int'
2238,2022-05-23 06:59:47,  print(int(X)+1),ValueError: invalid literal for int() with base 10: '3.456'
2239,2022-05-23 07:00:33,S=input(),KeyboardInterrupt: 
2240,2022-05-23 07:00:40,print(S[S-0]+S[0]),TypeError: unsupported operand type(s) for -: 'str' and 'int'
2241,2022-05-23 07:00:47,print(S[S-0]+S[0]),TypeError: unsupported operand type(s) for -: 'str' and 'int'
2242,2022-05-23 07:01:24,"C=int('A',K)",ValueError: invalid literal for int() with base 2: 'A'
2243,2022-05-23 07:01:32,"A,B=int(input())",ValueError: invalid literal for int() with base 10: '100 80'
2244,2022-05-23 07:01:43,S=input(),KeyboardInterrupt: 
2245,2022-05-23 07:01:52,k=int(X),ValueError: invalid literal for int() with base 10: '3.456'
2246,2022-05-23 07:02:12,"A,B=input()",ValueError: too many values to unpack (expected 2)
2247,2022-05-23 07:02:36,S=input(),KeyboardInterrupt: 
2248,2022-05-23 07:02:36,"X,Y=map(int, input().split())","ValueError: invalid literal for int() with base 10: '80,94'"
2249,2022-05-23 07:02:38,S=input(),KeyboardInterrupt: 
2250,2022-05-23 07:02:54,  print(int(X+1)),"TypeError: can only concatenate str (not ""int"") to str"
2251,2022-05-23 07:03:10,while x<N:,KeyboardInterrupt: 
2252,2022-05-23 07:03:21,  print(int(X)+1),ValueError: invalid literal for int() with base 10: '3.456'
2253,2022-05-23 07:03:28,X = df[['precioitation_num']],"KeyError: ""None of [Index(['precioitation_num'], dtype='object')] are in the [columns]"""
2254,2022-05-23 07:03:43,"A,B=map(int,input(),split())",NameError: name 'split' is not defined
2255,2022-05-23 07:03:46,"b=a.replace(1,9)","TypeError: replace() argument 1 must be str, not int"
2256,2022-05-23 07:03:51,print(round(X)),TypeError: type str doesn't define __round__ method
2257,2022-05-23 07:04:33,    if a>=N:,KeyboardInterrupt: 
2258,2022-05-23 07:05:25,  print(int(X)),ValueError: invalid literal for int() with base 10: '3.456'
2259,2022-05-23 07:05:39,  print(int(X)),ValueError: invalid literal for int() with base 10: '3.456'
2260,2022-05-23 07:05:57,"model.fit(X, y)","ValueError: Input contains NaN, infinity or a value too large for dtype('float64')."
2261,2022-05-23 07:05:59,Y=round(X),TypeError: type str doesn't define __round__ method
2262,2022-05-23 07:06:12,    x+=a,KeyboardInterrupt: 
2263,2022-05-23 07:06:53,  print(int(X)),ValueError: invalid literal for int() with base 10: '3.456'
2264,2022-05-23 07:06:58,    if x>=N:,KeyboardInterrupt: 
2265,2022-05-23 07:07:16,"model.fit(X, y)","ValueError: Input contains NaN, infinity or a value too large for dtype('float64')."
2266,2022-05-23 07:07:18,A[1],TypeError: 'int' object is not subscriptable
2267,2022-05-23 07:07:41,"model.fit(X, y)","ValueError: Input contains NaN, infinity or a value too large for dtype('float64')."
2268,2022-05-23 07:07:50,"print(n.trancelate(str.maketrance({'9':'1','1':'9'})))",AttributeError: 'str' object has no attribute 'trancelate'
2269,2022-05-23 07:08:01,"print(n.trancelate(str.maketrance({'9':'1','1':'9'})))",AttributeError: 'str' object has no attribute 'trancelate'
2270,2022-05-23 07:08:24,"a,b =map(str,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2271,2022-05-23 07:08:33,  print(int(y)),ValueError: invalid literal for int() with base 10: ''
2272,2022-05-23 07:08:52,print(ausum),NameError: name 'ausum' is not defined
2273,2022-05-23 07:08:57,"a,b =map(str,input().split())",KeyboardInterrupt: 
2274,2022-05-23 07:09:03,"a,b =map(str,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2275,2022-05-23 07:09:30,a1=a*b,TypeError: can't multiply sequence by non-int of type 'str'
2276,2022-05-23 07:09:42,"a,b =map(input().split())",TypeError: map() must have at least two arguments.
2277,2022-05-23 07:09:50,"n.replace(1,9)","TypeError: replace() argument 1 must be str, not int"
2278,2022-05-23 07:11:16,n=input(),KeyboardInterrupt: 
2279,2022-05-23 07:11:23,"n.replace(1,9)","TypeError: replace() argument 1 must be str, not int"
2280,2022-05-23 07:13:43,print(round(X)),TypeError: type str doesn't define __round__ method
2281,2022-05-23 07:14:53,  a+=1,KeyboardInterrupt: 
2282,2022-05-23 07:15:10,  a*=C,KeyboardInterrupt: 
2283,2022-05-23 07:15:23,  if A<=C:,KeyboardInterrupt: 
2284,2022-05-23 07:15:59,  a*=C,KeyboardInterrupt: 
2285,2022-05-23 07:16:16,N=raw.translate(n),NameError: name 'raw' is not defined
2286,2022-05-23 07:16:21,  a*=C,KeyboardInterrupt: 
2287,2022-05-23 07:16:44,  a+=1,KeyboardInterrupt: 
2288,2022-05-23 07:17:31,if N[2] == 2 or N[2] == 4 or N[2] == 5 or N[2] == 7 or N[2] == 9:,IndexError: string index out of range
2289,2022-05-23 07:17:41,  a*=C,KeyboardInterrupt: 
2290,2022-05-23 07:17:42,x=int(input()),ValueError: invalid literal for int() with base 10: '3.456'
2291,2022-05-23 07:17:50,n=input(),KeyboardInterrupt: 
2292,2022-05-23 07:17:57,"n=raw.translate(str.maketrans({'1':'9', '9':'1'}))",NameError: name 'raw' is not defined
2293,2022-05-23 07:18:01,"A.B=map(int,input().split())",NameError: name 'A' is not defined
2294,2022-05-23 07:18:22,x=int(input()),ValueError: invalid literal for int() with base 10: '3.456'
2295,2022-05-23 07:18:50,"A,B=map(int,input().split())","ValueError: invalid literal for int() with base 10: '123,456'"
2296,2022-05-23 07:18:58,if N[2] == '2' or N[2] == '4' or N[2] == '5' or N[2] == '7' or N[2] == '9':,IndexError: string index out of range
2297,2022-05-23 07:19:02,"n1=n.replace('1','*')",AttributeError: 'int' object has no attribute 'replace'
2298,2022-05-23 07:19:11,"A,B=map(str,input().split())",KeyboardInterrupt: 
2299,2022-05-23 07:19:21,  print(math.floor(x)),NameError: name 'math' is not defined
2300,2022-05-23 07:19:27,"A,B=map(str,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2301,2022-05-23 07:19:41,n=input(),KeyboardInterrupt: 
2302,2022-05-23 07:20:38,a=A[1]+A[2]+A[3],TypeError: 'int' object is not subscriptable
2303,2022-05-23 07:21:05,a=A[0]+A[1]+A[2],TypeError: 'int' object is not subscriptable
2304,2022-05-23 07:21:09,"A,B=map(str,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2305,2022-05-23 07:21:30,"A,B=map(int,input().split())","ValueError: invalid literal for int() with base 10: '123,345'"
2306,2022-05-23 07:22:26,a=A[0]+A[-1]+A[-2],TypeError: 'int' object is not subscriptable
2307,2022-05-23 07:22:34,S=input(),KeyboardInterrupt: 
2308,2022-05-23 07:22:47,"  print(S[0,K-1]+'...')",TypeError: unsupported operand type(s) for -: 'str' and 'int'
2309,2022-05-23 07:23:48,"s,t =map(int,input().split())",ValueError: invalid literal for int() with base 10: 'CSS'
2310,2022-05-23 07:23:53,"A,B,C=map(int,input().splirt())",AttributeError: 'str' object has no attribute 'splirt'
2311,2022-05-23 07:24:00,for letter in len(S):,TypeError: 'int' object is not iterable
2312,2022-05-23 07:24:12,  if A<=c<=B:,KeyboardInterrupt: 
2313,2022-05-23 07:24:16,"A,B=map(int,input().split())","ValueError: invalid literal for int() with base 10: '123,234'"
2314,2022-05-23 07:24:35,for letter in len(S):,TypeError: 'int' object is not iterable
2315,2022-05-23 07:24:39,"A,B=map(int,input().split())","ValueError: invalid literal for int() with base 10: '123,234'"
2316,2022-05-23 07:24:59,if S<=K:,TypeError: '<=' not supported between instances of 'str' and 'int'
2317,2022-05-23 07:25:00,  pirnt(C*a),NameError: name 'pirnt' is not defined
2318,2022-05-23 07:25:03,"A,B=map(int, input().split())","ValueError: invalid literal for int() with base 10: '123,234'"
2319,2022-05-23 07:25:10,for letter in len(S):,TypeError: 'int' object is not iterable
2320,2022-05-23 07:25:55,  print(int(x)+'+'),TypeError: unsupported operand type(s) for +: 'int' and 'str'
2321,2022-05-23 07:25:55,"A,B=map(int, input().split())","ValueError: invalid literal for int() with base 10: '123,112'"
2322,2022-05-23 07:27:32,  print(int(x)+'-'),TypeError: unsupported operand type(s) for +: 'int' and 'str'
2323,2022-05-23 07:28:09,print(x+'2'),TypeError: unsupported operand type(s) for +: 'int' and 'str'
2324,2022-05-23 07:28:24,  n+=1,KeyboardInterrupt: 
2325,2022-05-23 07:30:12,print(int(x)),ValueError: invalid literal for int() with base 10: '4 3'
2326,2022-05-23 07:30:40,"a,b=map(str,input().split())",KeyboardInterrupt: 
2327,2022-05-23 07:30:54,x=float(input()),ValueError: could not convert string to float: '4 3'
2328,2022-05-23 07:31:31,for i in C:,TypeError: 'int' object is not iterable
2329,2022-05-23 07:31:58,print(int(x)),ValueError: invalid literal for int() with base 10: '4 3'
2330,2022-05-23 07:32:06,for i in C+C:,TypeError: 'int' object is not iterable
2331,2022-05-23 07:32:39,  mi=[x for x in b if a[i]-ab<=ba[i]+ab],NameError: name 'ba' is not defined
2332,2022-05-23 07:32:51,  mi=[x for x in b if a[i]-ab<=b<=a[i]+ab],TypeError: '<=' not supported between instances of 'int' and 'list'
2333,2022-05-23 07:33:21,  bb=b[b.index[max()]],"TypeError: max expected 1 arguments, got 0"
2334,2022-05-23 07:33:37,    if abs(bb[j]-a[i])<ab:,IndexError: list index out of range
2335,2022-05-23 07:33:40,n = map(int(input().split())),"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
2336,2022-05-23 07:33:43,"A,B=map(int, input().split())","ValueError: invalid literal for int() with base 10: '123,234'"
2337,2022-05-23 07:33:55,n = map(int(input().split())),"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
2338,2022-05-23 07:33:57,"A,B=map(str, input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2339,2022-05-23 07:34:00,n = map(int(input().split())),"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
2340,2022-05-23 07:34:04,print(int(x)),ValueError: invalid literal for int() with base 10: '3.456'
2341,2022-05-23 07:34:41,"A,B=map(str, input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2342,2022-05-23 07:35:23,"A,B=map(str, input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2343,2022-05-23 07:35:40,"A,B=map(int, input().split())","ValueError: invalid literal for int() with base 10: '123,122'"
2344,2022-05-23 07:36:11,"a,b=map(int,input())",ValueError: invalid literal for int() with base 10: ' '
2345,2022-05-23 07:36:24,"a,b=map(str,input())",ValueError: too many values to unpack (expected 2)
2346,2022-05-23 07:36:25,  a+=1,KeyboardInterrupt: 
2347,2022-05-23 07:36:32,"A,B=map(str, input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2348,2022-05-23 07:36:41,"a,b=map(int,input().split)",TypeError: 'builtin_function_or_method' object is not iterable
2349,2022-05-23 07:36:52,"a,b=map(int,input())",ValueError: invalid literal for int() with base 10: ' '
2350,2022-05-23 07:37:34,  x=100+100*a/100,KeyboardInterrupt: 
2351,2022-05-23 07:37:37,"a,b=map(str,input())",ValueError: too many values to unpack (expected 2)
2352,2022-05-23 07:37:39,for i in C:,TypeError: 'int' object is not iterable
2353,2022-05-23 07:38:04,  if x>=X:,KeyboardInterrupt: 
2354,2022-05-23 07:38:12,if sum(x)%9:,TypeError: unsupported operand type(s) for +: 'int' and 'str'
2355,2022-05-23 07:39:44,print(round(X+0.5)),"TypeError: can only concatenate str (not ""float"") to str"
2356,2022-05-23 07:40:27,X=int(input()),ValueError: invalid literal for int() with base 10: '3.456'
2357,2022-05-23 07:41:13,"a,b=map(int,input())",ValueError: invalid literal for int() with base 10: ' '
2358,2022-05-23 07:41:46,"n,m=map(int,input().split())",KeyboardInterrupt: 
2359,2022-05-23 07:41:55,"a,b=map(int,input())",ValueError: invalid literal for int() with base 10: ' '
2360,2022-05-23 07:42:12,"K,S=map(str.input().split())",AttributeError: type object 'str' has no attribute 'input'
2361,2022-05-23 07:42:26,"A,B,C=map(int(input()))",ValueError: invalid literal for int() with base 10: '3 4 5'
2362,2022-05-23 07:43:13,"K,S=map(str,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2363,2022-05-23 07:43:16,"A,B,C=map(int,input.split())",AttributeError: 'function' object has no attribute 'split'
2364,2022-05-23 07:43:29,"A,B,C=map(int,input())",ValueError: invalid literal for int() with base 10: ' '
2365,2022-05-23 07:43:38,X=int(input()),ValueError: invalid literal for int() with base 10: '3.456'
2366,2022-05-23 07:43:54,while x==0:,NameError: name 'x' is not defined
2367,2022-05-23 07:44:09,"K,S=map(str,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2368,2022-05-23 07:44:10,"A,B,C=map(input.split())",AttributeError: 'function' object has no attribute 'split'
2369,2022-05-23 07:44:13,print(round(X)),TypeError: type str doesn't define __round__ method
2370,2022-05-23 07:44:20,  for i in range(j):,KeyboardInterrupt: 
2371,2022-05-23 07:44:21,"A,B,C=map(int,input.split())",AttributeError: 'function' object has no attribute 'split'
2372,2022-05-23 07:44:29,"N, X = map(int, input().split())",ValueError: invalid literal for int() with base 10: 'xox'
2373,2022-05-23 07:44:42,print(round(int(X))),ValueError: invalid literal for int() with base 10: '3.456'
2374,2022-05-23 07:45:26,X=input(),KeyboardInterrupt: 
2375,2022-05-23 07:45:32,if K>S:,TypeError: '>' not supported between instances of 'int' and 'str'
2376,2022-05-23 07:45:56,    if (b in a[i])==True:,TypeError: argument of type 'int' is not iterable
2377,2022-05-23 07:45:57,x=int(S),ValueError: invalid literal for int() with base 10: 'nikoandsolstice'
2378,2022-05-23 07:46:04,f=int(input()),ValueError: invalid literal for int() with base 10: '3.456'
2379,2022-05-23 07:46:05,  c=b*0.01*a,KeyboardInterrupt: 
2380,2022-05-23 07:46:07,x = [int(i) for i in list(x)],TypeError: 'int' object is not iterable
2381,2022-05-23 07:46:17,"N, X = map(int, input().split())",ValueError: invalid literal for int() with base 10: 'xox'
2382,2022-05-23 07:46:45,X=int(input()),KeyboardInterrupt: 
2383,2022-05-23 07:46:56,if lens(K)>lens(S):,NameError: name 'lens' is not defined
2384,2022-05-23 07:47:02,for i in y>n:,TypeError: 'bool' object is not iterable
2385,2022-05-23 07:47:10,"x=float(int,input().split())","TypeError: float expected at most 1 arguments, got 2"
2386,2022-05-23 07:47:30,  for i in range(n):,KeyboardInterrupt: 
2387,2022-05-23 07:47:31,for i in (y>n):,TypeError: 'bool' object is not iterable
2388,2022-05-23 07:47:33,n=int(N[2]),TypeError: 'int' object is not subscriptable
2389,2022-05-23 07:47:54,(N[2]),TypeError: 'int' object is not subscriptable
2390,2022-05-23 07:48:00,N[2],TypeError: 'int' object is not subscriptable
2391,2022-05-23 07:48:09,k=len(K),TypeError: object of type 'int' has no len()
2392,2022-05-23 07:48:13,n=int(N[2]),IndexError: string index out of range
2393,2022-05-23 07:48:28,X=int(input()),KeyboardInterrupt: 
2394,2022-05-23 07:48:28,for i in y>n:,TypeError: 'bool' object is not iterable
2395,2022-05-23 07:48:29,s=len(s),NameError: name 's' is not defined
2396,2022-05-23 07:49:59,x=int(input()),ValueError: invalid literal for int() with base 10: '3.456'
2397,2022-05-23 07:50:16,x=int(input().split()),"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
2398,2022-05-23 07:50:17,    if (a[i] in b)==True:,KeyboardInterrupt: 
2399,2022-05-23 07:50:24,"N, X = map(int, input().split())",ValueError: invalid literal for int() with base 10: 'xox'
2400,2022-05-23 07:50:30,x=float(input().split()),"TypeError: float() argument must be a string or a number, not 'list'"
2401,2022-05-23 07:50:52,    if (a[i] in b)==True:,KeyboardInterrupt: 
2402,2022-05-23 07:51:09,    if (a[i] in b)==True:,KeyboardInterrupt: 
2403,2022-05-23 07:51:25,,KeyboardInterrupt: 
2404,2022-05-23 07:52:06,"N, X = map(int, input().split())",ValueError: invalid literal for int() with base 10: 'xox'
2405,2022-05-23 08:04:08,"pd,read_csv('boston.csv')",NameError: name 'read_csv' is not defined
2406,2022-05-23 08:04:38,df = pd.read_csv('bento_train.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'
2407,2022-05-23 08:04:47,df = pd.read_csv('bento.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento.csv'
2408,2022-05-23 08:05:13,df = pd.read_csv('bento.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento.csv'
2409,2022-05-23 08:05:35,df = pd.read_csv('bento.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento.csv'
2410,2022-05-23 08:07:58,df = pd.read_csv('bento.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento.csv'
2411,2022-05-23 08:09:23,df = pd.read_csv('bento.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento.csv'
2412,2022-05-23 08:09:30,df = pd.read_csv('bento.csv'),FileNotFoundError: [Errno 2] No such file or directory: 'bento.csv'
2413,2022-05-23 09:40:04,for i in L:,TypeError: 'int' object is not iterable
2414,2022-05-23 09:40:34,"    X=df[df[X_L(i)],df[X_L(j)]]",TypeError: 'list' object is not callable
2415,2022-05-23 10:10:56,"df_uid_all[df_uid_all[""uid"" == 21916070]]",KeyError: False
2416,2022-05-23 10:13:14,"df_uid_all.query(""uid"" == 21916070) ","ValueError: expr must be a string to be evaluated, <class 'bool'> given"
2417,2022-05-23 10:52:21,df_uid_all.columns = k_l_column,"ValueError: Length mismatch: Expected axis has 1561 elements, new values have 1601 elements"
2418,2022-05-23 12:42:32,model = LinearRegression(),NameError: name 'LinearRegression' is not defined
2419,2022-05-23 12:43:44,"X = df[['weather_num','precipiation_num']]","KeyError: ""['precipiation_num'] not in index"""
2420,2022-05-23 12:47:07,"model.fit(X, y)",ValueError: could not convert string to float: '--'
2421,2022-05-23 13:01:49,"X = df[['temperature','soldout','precipitstion_num']]","KeyError: ""['precipitstion_num'] not in index"""
2422,2022-05-23 13:26:32,"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=0)",NameError: name 'train_test_split' is not defined
2423,2022-05-23 23:57:24,"S,T = map(int, input().split())",ValueError: invalid literal for int() with base 10: 'oder'
2424,2022-05-23 23:57:29,"X = df[['soldo','kcal','payday','temperature', 'weather_num','week_num', 'precipitation_num','event_num','remarks_num']]","KeyError: ""['soldo'] not in index"""
2425,2022-05-24 00:03:39,"model.fit(X_train, y_train)",ValueError: could not convert string to float: '--'
2426,2022-05-24 00:09:14,a=[input() for i in range(n+1)],KeyboardInterrupt: 
2427,2022-05-24 00:10:32,a=[input() for i in range(n+1)],KeyboardInterrupt: 
2428,2022-05-24 00:10:34,"s1=n.replace('1','9')",AttributeError: 'int' object has no attribute 'replace'
2429,2022-05-24 00:13:20,"get_ipython().run_cell_magic('atcoder', 'abc222_b]', 'import sys\nn,p=map(int,input().split())\na=[]\nfor l in sys.stdin:\n  a.append(int(l))\nprint(a)')","KogiError: {""translated"": ""\u554f\u984c\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3002"", ""reason"": ""\u554f\u984c\u306e\u6307\u5b9a\u65b9\u6cd5\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u3059"", ""hint"": ""\u554f\u984c\u30da\u30fc\u30b8\u306eURL\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044"", ""solution"": ""%%atcoder \u554f\u984c\u30da\u30fc\u30b8\u306eURL""}"
2430,2022-05-24 00:22:03,"S, T =map(input().split())",TypeError: map() must have at least two arguments.
2431,2022-05-24 00:22:54,"print(n.replace(1,9))",AttributeError: 'int' object has no attribute 'replace'
2432,2022-05-24 00:23:35,  print(K[:7]+'...'),TypeError: 'int' object is not subscriptable
2433,2022-05-24 00:24:18,a=list(map(input().split())),TypeError: map() must have at least two arguments.
2434,2022-05-24 00:25:11,"print(n.replace(1,9).replave(9,1))","TypeError: replace() argument 1 must be str, not int"
2435,2022-05-24 00:26:01,"print(n.replace(1,9).replace(9,1))","TypeError: replace() argument 1 must be str, not int"
2436,2022-05-24 00:26:13,"print(n.replace(1,9).replace(9,1))","TypeError: replace() argument 1 must be str, not int"
2437,2022-05-24 00:26:56,"print(n.replace(1,9).replace(9,1))","TypeError: replace() argument 1 must be str, not int"
2438,2022-05-24 00:27:03,"for i in filter(lambda x: x<p,a):",TypeError: '<' not supported between instances of 'str' and 'int'
2439,2022-05-24 00:27:49,  b=list(i),TypeError: 'int' object is not iterable
2440,2022-05-24 00:30:01,"print(sum(x<p for x in map(int,input.split())))",AttributeError: 'function' object has no attribute 'split'
2441,2022-05-24 00:33:25,"print(n.trancelate(str.maketrans({'1':'9','9':1})))",AttributeError: 'str' object has no attribute 'trancelate'
2442,2022-05-24 00:33:46,"S, T = map(int, input().split())",ValueError: invalid literal for int() with base 10: 'oder'
2443,2022-05-24 00:34:06,"print(n.trancelate(str.maketrans({'1':'9','9':1})))",AttributeError: 'str' object has no attribute 'trancelate'
2444,2022-05-24 00:34:14,"S, T = map(int, input().split())",ValueError: invalid literal for int() with base 10: 'oder'
2445,2022-05-24 00:35:51,"S, T= map(int, input().split())",ValueError: invalid literal for int() with base 10: 'oder'
2446,2022-05-24 00:36:53,"S, T= map(int, input().split())",ValueError: invalid literal for int() with base 10: 'oder'
2447,2022-05-24 00:37:35,"S, T = map(int, input().split())",ValueError: invalid literal for int() with base 10: 'oder'
2448,2022-05-24 00:38:06,"S, T= map(int, input().split())",ValueError: invalid literal for int() with base 10: 'oder'
2449,2022-05-24 00:38:36,"S, T = map(int, input().split())",ValueError: invalid literal for int() with base 10: 'oder'
2450,2022-05-24 00:39:16,"S, T = map(int, input().split())",ValueError: invalid literal for int() with base 10: 'oder'
2451,2022-05-24 00:39:33,"S, T = map(int, input().split())",ValueError: invalid literal for int() with base 10: 'oder'
2452,2022-05-24 00:41:50,str1 = S,NameError: name 'S' is not defined
2453,2022-05-24 00:43:45,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc220/tasks/abc220_a', '')","UsageError: %%atcoder is a cell magic, but the cell body is empty."
2454,2022-05-24 00:44:27,if S[-1]==r and S[-2]==e:,NameError: name 'r' is not defined
2455,2022-05-24 00:44:28,X=int(input()),KeyboardInterrupt: 
2456,2022-05-24 00:46:09,"a,b=map(int.input().split())",AttributeError: type object 'int' has no attribute 'input'
2457,2022-05-24 00:46:59,"A,B,C=map(int,input().split())",KeyboardInterrupt: 
2458,2022-05-24 00:47:22,"S =list(str, input())","TypeError: list expected at most 1 arguments, got 2"
2459,2022-05-24 00:47:32,print(join(S[1:X]) + S[0]),NameError: name 'join' is not defined
2460,2022-05-24 00:49:01,if K>=x:,TypeError: '>=' not supported between instances of 'str' and 'int'
2461,2022-05-24 00:49:04,"S, T= map(int, input().split())",ValueError: invalid literal for int() with base 10: 'oder'
2462,2022-05-24 00:49:23,"S, T= map(int, input().split())",ValueError: invalid literal for int() with base 10: 'oder'
2463,2022-05-24 00:49:31,K=int(input()),ValueError: invalid literal for int() with base 10: 'nikoandsolstice'
2464,2022-05-24 00:49:41,K=int(input()),ValueError: invalid literal for int() with base 10: 'nikoandsolstice'
2465,2022-05-24 00:50:38,"a, b = map(int(),input().split())",TypeError: 'int' object is not callable
2466,2022-05-24 00:51:02,"S, T= map(int, input().split())",ValueError: invalid literal for int() with base 10: 'oder'
2467,2022-05-24 00:56:05,"a,b=map(int,input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2468,2022-05-24 00:56:13,B=str(B),NameError: name 'B' is not defined
2469,2022-05-24 00:56:30,  A.add(x[2:]),AttributeError: 'dict' object has no attribute 'add'
2470,2022-05-24 00:56:38,  A.add(x[2:]),TypeError: unhashable type: 'list'
2471,2022-05-24 00:56:39,"a,b=map(int,input().split())",KeyboardInterrupt: 
2472,2022-05-24 00:56:57,  A.add(set(x[2:])),TypeError: unhashable type: 'set'
2473,2022-05-24 00:57:08,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc226/tasks/abc226_c', '')","UsageError: %%atcoder is a cell magic, but the cell body is empty."
2474,2022-05-24 00:57:25,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc226/tasks/abc226_c', '')","UsageError: %%atcoder is a cell magic, but the cell body is empty."
2475,2022-05-24 00:57:29,"print(x<p for x in map(int,input().split()))",KeyboardInterrupt: 
2476,2022-05-24 00:58:15,"if  S[1]==""1""or""9""  and  S[3]==""1""or""9"" and  S[2]==""1""or""9""  :",IndexError: string index out of range
2477,2022-05-24 00:58:49,if a[3]==a[4] and a[5]==a[6]:,IndexError: list index out of range
2478,2022-05-24 00:59:04,"print(Decimal(str(X).quantize(Decimal('0'),rounding=ROUND_HALF_UP)))",AttributeError: 'str' object has no attribute 'quantize'
2479,2022-05-24 00:59:04,"Sx,Sy,Gx,Gy=map(int, input().split(),'{:10}'.format(num))",NameError: name 'num' is not defined
2480,2022-05-24 00:59:37,if a[3]==a[4] and a[5]==a[6]:,IndexError: list index out of range
2481,2022-05-24 00:59:51,"print(Decimal(str(X).quantize(Decimal('0'),rounding=ROUND_HALF_UP)))",AttributeError: 'str' object has no attribute 'quantize'
2482,2022-05-24 01:00:18,B=str(B),NameError: name 'B' is not defined
2483,2022-05-24 01:00:34,B=str(B),NameError: name 'B' is not defined
2484,2022-05-24 01:00:46,x=A**b,TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
2485,2022-05-24 01:01:10,    print('0' + N),"TypeError: can only concatenate str (not ""int"") to str"
2486,2022-05-24 01:01:35,if N < 10:,TypeError: '<' not supported between instances of 'str' and 'int'
2487,2022-05-24 01:01:59,S= input(),KeyboardInterrupt: 
2488,2022-05-24 01:02:27,if 0 <= N < 10:,TypeError: '<=' not supported between instances of 'int' and 'str'
2489,2022-05-24 01:02:34,    print('0' + N),"TypeError: can only concatenate str (not ""int"") to str"
2490,2022-05-24 01:04:45,    if s[2*i-1].isupper() or 2*i-1>len(S):,IndexError: string index out of range
2491,2022-05-24 01:05:22,T=input(),KeyboardInterrupt: 
2492,2022-05-24 01:06:12,S=input(),KeyboardInterrupt: 
2493,2022-05-24 01:07:00,    if S[2*i-1].isupper() and S[2*i].islower():,IndexError: string index out of range
2494,2022-05-24 01:07:57,    if S[2*i-1].isupper() or S[2*i].islower():,IndexError: string index out of range
2495,2022-05-24 01:08:08,"X,Y = map(int, input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2496,2022-05-24 01:08:33,"X,Y = map(int, input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2497,2022-05-24 01:08:57,"s,t=input(),split()",NameError: name 'split' is not defined
2498,2022-05-24 01:09:09,"s,t=input(),split()",NameError: name 'split' is not defined
2499,2022-05-24 01:09:14,  return sum(list_x),TypeError: unsupported operand type(s) for +: 'int' and 'str'
2500,2022-05-24 01:09:35,"print(s.replace('1','9').replace('9','1'))",NameError: name 's' is not defined
2501,2022-05-24 01:09:38,  return sum(list_x),TypeError: unsupported operand type(s) for +: 'int' and 'str'
2502,2022-05-24 01:09:43,"X,Y = map(int, input().split())",KeyboardInterrupt: 
2503,2022-05-24 01:09:50,"X,Y = map(int, input().split())","ValueError: not enough values to unpack (expected 2, got 1)"
2504,2022-05-24 01:10:09,print(S[N:S-26]),TypeError: unsupported operand type(s) for -: 'str' and 'int'
2505,2022-05-24 01:11:49,print(round(X)),TypeError: type str doesn't define __round__ method
2506,2022-05-24 01:12:48,    if (S[2*i-1].isupper() or S[2*i].islower()) and 2*i-1>len(S):,IndexError: string index out of range
2507,2022-05-24 01:13:04,    if (S[2*i-1].isupper() or S[2*i].islower()) and 2*i-1<=len(S):,IndexError: string index out of range
2508,2022-05-24 01:13:21,N=str.input(),AttributeError: type object 'str' has no attribute 'input'
2509,2022-05-24 01:16:07,    if (S[2*i-1].isupper() or S[2*i].islower()) and 2*i-1<=len(S):,IndexError: string index out of range
2510,2022-05-24 01:16:18,T=input('文字列T:'),KeyboardInterrupt: 
2511,2022-05-24 01:17:08,    if (S[2*i-1].isupper() or S[2*i].islower()) and 2*i-1<=len(S):,IndexError: string index out of range
2512,2022-05-24 01:17:35,"n,p=map(int,input().split())",KeyboardInterrupt: 
2513,2022-05-24 01:17:38,    if (S[2*i-1].isupper() or S[2*i].islower()) and 2*i-1<=len(S):,IndexError: list index out of range
2514,2022-05-24 01:18:30,    if (S[2*i-1].isupper() or S[2*i].islower()) and 2*i-1<=len(S):,IndexError: list index out of range
2515,2022-05-24 01:18:44,"n,p=map(int,input().split())",KeyboardInterrupt: 
2516,2022-05-24 01:19:51,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc194/submissions/me', '\nA,B=map(int,input().split())\nX=A+B\nY=B\nif X>=15 and Y>=8:\n  print(1)\nelif X>=10 and Y>=3:\n  print(2)\nelif X>3:\n  print(3)\nelse:\n  print(4)')","KogiError: {""translated"": ""\u554f\u984c\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3002"", ""reason"": ""\u554f\u984c\u306e\u6307\u5b9a\u65b9\u6cd5\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u3059"", ""hint"": ""\u554f\u984c\u30da\u30fc\u30b8\u306eURL\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044"", ""solution"": ""%%atcoder \u554f\u984c\u30da\u30fc\u30b8\u306eURL""}"
2517,2022-05-24 01:20:05,"n,k=map(int,input().split())",ValueError: too many values to unpack (expected 2)
2518,2022-05-24 01:20:16,"n,k=map(int,input().split())",ValueError: too many values to unpack (expected 2)
2519,2022-05-24 01:20:21,str(223).split(''),ValueError: empty separator
2520,2022-05-24 01:20:35,if len(S) >=  K:,TypeError: '>=' not supported between instances of 'int' and 'str'
2521,2022-05-24 01:21:08,  money = math.floor(money * 1.01),NameError: name 'math' is not defined
2522,2022-05-24 01:21:10,if int(len(S)) >=  K:,TypeError: '>=' not supported between instances of 'int' and 'str'
2523,2022-05-24 01:21:33,  print(''.join(S[0:5] + '...')),"TypeError: can only concatenate list (not ""str"") to list"
2524,2022-05-24 01:21:33,  return sum(list_x),TypeError: unsupported operand type(s) for +: 'int' and 'str'
2525,2022-05-24 01:21:43,"s.translate(""1"", ""9"")",NameError: name 's' is not defined
2526,2022-05-24 01:22:17,X=float(input()),ValueError: could not convert string to float: '42.5-00'
2527,2022-05-24 01:24:37,"print(s(a), s(b))",NameError: name 'a' is not defined
2528,2022-05-24 01:24:38,T=input(),KeyboardInterrupt: 
2529,2022-05-24 01:25:12,"round(""n"" ,num1)",NameError: name 'num1' is not defined
2530,2022-05-24 01:25:13,T=input(),KeyboardInterrupt: 
2531,2022-05-24 01:25:32,T=input(),KeyboardInterrupt: 
2532,2022-05-24 01:27:03,"Sx,Sy,Gx,Gy=map(int, input().split())",ValueError: invalid literal for int() with base 10: '2]'
2533,2022-05-24 01:28:03,    print(int(X)) ,ValueError: invalid literal for int() with base 10: '3.456'
2534,2022-05-24 01:28:50,  print(int(X)+1),ValueError: invalid literal for int() with base 10: '99.500'
2535,2022-05-24 01:29:15,"r#ound(""n"" ,num1)",NameError: name 'r' is not defined
2536,2022-05-24 01:33:10,      print('Yes'),KeyboardInterrupt: 
2537,2022-05-24 01:33:18,print(*ans.replace(' ')),AttributeError: 'list' object has no attribute 'replace'
2538,2022-05-24 01:33:19,  x = [int(i) for i in item],TypeError: 'int' object is not iterable
2539,2022-05-24 01:34:03,"get_ipython().run_cell_magic('atcoder', 'https://atcoder.jp/contests/abc233/tasks/abc323_a', ""\nX, Y = map(int,input().split())\nif X>Y:\n  print('0')\nelse:\n  if (Y-X)%10 !=0:\n    print((X-Y)//10+1)\n  else:\n    print((X-Y)//10)"")","KogiError: {""translated"": ""\u554f\u984c\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3002"", ""reason"": ""\u554f\u984c\u306e\u6307\u5b9a\u65b9\u6cd5\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u3059"", ""hint"": ""\u554f\u984c\u30da\u30fc\u30b8\u306eURL\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044"", ""solution"": ""%%atcoder \u554f\u984c\u30da\u30fc\u30b8\u306eURL""}"
2540,2022-05-24 01:34:29,"A=list(map(int,input().split()))",KeyboardInterrupt: 
2541,2022-05-24 01:35:51,x=(Sx((Sy-Gy)/-(Sx+Gx))/(Sy-Gy)/(-Sx-Gx)),TypeError: 'int' object is not callable
2542,2022-05-24 01:36:11,Y=int(X[X.find('')+1]),ValueError: invalid literal for int() with base 10: '.'
2543,2022-05-24 01:36:35,x=((-Sx(Sy-Gy)/(Sx+Gx))/((Sy-Gy)/(-Sx-Gx))),TypeError: 'int' object is not callable
2544,2022-05-24 01:37:09,  x=int(i*1.01),KeyboardInterrupt: 
2545,2022-05-24 01:37:26,x=(((-Sx(Sy-Gy))/(Sx+Gx))/((Sy-Gy)/(-Sx-Gx))),TypeError: 'int' object is not callable
