数式を微分する	sympy.diff(e)
折れ線グラフのバツマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
自然数の順列の総数	math.perm(n)
実数の正弦の逆数	math.asin(x)
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
＜オプション＞トマト色を使う	color = 'tomato'
ヒストグラムを描画して、その色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
データフレームの列のヒストグラムを描画する	plt.hist(df[column])
黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
ヒストグラムを描画して、その色を貝殻に設定する	plt.hist(データ列, color='seashell')
＜オプション＞スラグレー色を使う	color = 'slategrey'
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
グラフをポスター用に設定する	sns.set(context='poster')
コマンド引数を列挙する	sys.argv[1:]
データフレームのカラムの日	df[col].dt.day
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
赤い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='r')
点線ヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
ヒストグラムを描画して、その色をオーキッドに設定する	plt.hist(データ列, color='orchid')
両端キューが空でないか調べる	len(deq) != 0
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
リストを濃い色のヒストグラムで描画する	plt.hist(xdata, color='deep')
＜オプション＞グラフの色をペールグリーンに設定する	color = 'palegreen'
リストとリストについて相関を可視化する	plt.scatter(xdata, ydata)
辞書からキーの値	aDict.get(key)
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
赤いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
明るいグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
リストに文字列を追加する	aList.append(element)
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
キーが辞書上で未定義か調べる	key not in aDict
スレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slateblue')
＜オプション＞グラフの色をスラグレーに設定する	color = 'slategrey'
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
データフレームをJSONLファイルに保存する	df.to_csv(filename)
データフレームを丸めて、整数型にする	df.round().astype(int)
データフレームがどの程度、分散しているか見る	df.var()
文字列中の部分文字列の出現をカウントする	s.count(sub)
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
＜オプション＞淡いピンク色色を使う	color = 'lightpink'
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
上位集合か調べる	aSet.issuperset(aSet2)
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
＜オプション＞コロンをセパレータで使う	sep = ':'
配列の内積	np.dot(aArray, aArray2)
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
データフレームのリストカラムの尖度	df[aList].skew()
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
グラフをスライド用に設定する	sns.set(context='talk')
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
要素ひとつのタプル	(element,)
無限大	math.inf
＜オプション＞グラフの色をアクアに設定する	color = 'aqua'
折れ線グラフのマーカーをバツにする	plt.plot(データ列, データ列2, marker='x')
グラフで日本語を表示できるようにする	sns.set(font='IPAexGothic')
折れ線グラフの丸マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
＜オプション＞グラフの色を紺に設定する	color = 'darkblue'
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
＜オプション＞グラフの色をビスクに設定する	color = 'bisque'
＜オプション＞グラフの色をプラムに設定する	color = 'plum'
データ列の分散	ds.var()
データフレームの列のユニークな値の個数	df[col].nunique()
＜オプション＞グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
折れ線グラフに左三角マーカーを使う	plt.plot(データ列, データ列2, marker='<')
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
プラム色の線グラフを描画する	plt.plot(データ列, データ列2, color='plum')
＜オプション＞グラフの色をダークバイオレットに設定する	color = 'darkviolet'
ハニーデュー色の線グラフを描画する	plt.plot(データ列, データ列2, color='honeydew')
二つのデータ列を並べて箱ひげ図にする	plt.boxplot([データ列, データ列2])
データフレームの列の名前の一覧を使う	df.columns
ゴールド色の線グラフを描画する	plt.plot(データ列, データ列2, color='gold')
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
折れ線グラフを描画して、その色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
ヒストグラムを描画して、その色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
変数について数式の積分を求める	sympy.integrate(e, z)
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
＜オプション＞チョコレート色を使う	color = 'chocolate'
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
シスル色の線グラフを描画する	plt.plot(データ列, データ列2, color='thistle')
カラーコードの丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
パウダーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='powderblue')
暗い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='dark')
＜オプション＞ライトスチールブルー色を使う	color = 'lightsteelblue'
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
オプションで、標準エラーに出力する	file = sys.stderr
データフレームのカラムの中央値	df[col].median()
＜オプション＞ダイアモンドマーカーを描画する	marker = 'D'
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
暗い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='dark')
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
パステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
白い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='w')
リストを配列に変換する	np.array(aList)
カウンタ同士で積集合演算する	aCounter & aCounter2
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
折れ線グラフを描画して、その色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
折れ線グラフを描画して、その色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
＜オプション＞バイナリモードを使う	mode = 'rb'
変数について数式の微分を行う	sympy.diff(e, z)
＜オプション＞改行コードを動作環境依存に設定する	newline = None
折れ線グラフを描画して、その色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
リストとリストについて破線グラフを描画して、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
折れ線グラフを描画して、その色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
データ列の秒	ds.dt.second
折れ線グラフのポイントマーカーを緑色にする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='g')
線幅nの折れ線グラフを描画する	plt.plot(xdata, ydata, linewidth=n)
連立方程式を解く	sympy.solve([e, e2])
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
変数をスワップする	x, y = y, x
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
ユーザが整数を入力する	int(input())
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
折れ線グラフを描画して、その色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
文字列を黒色にする	f'\033[30m{value}\033[0m'
空の集合	set()
実線ヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
データフレームの行を範囲指定して抽出する	df[start:end]
グラフの背景色を暗くする	sns.set(style='darkgrid')
＜オプション＞グラフの色をタンに設定する	color = 'tan'
＜オプション＞グラフの色をグリーンイエローに設定する	color = 'greenyellow'
＜オプション＞データ型を指定する	dtype = np.uint8
文字列を全て小文字に変換する	s.lower()
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
＜オプション＞ASCII文字に限定する	flag = re.ASCII
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
データフレームの先頭n行	df.head(n)
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
文字列を黄色にする	f'\033[33m{value}\033[0m'
nが3の倍数か調べる	n % 3 == 0
データフレームの分散	df.var()
オブジェクトのハッシュ値	hash(obj)
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
データ列とラベルを指定して、棒グラフを描画する	plt.bar(ラベル列, データ列)
黒い四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='k')
＜オプション＞ブール型を使う	dtype = np.int32
データフレームの要約統計量	df.describe()
＜オプション＞パレットトルコイズ色を使う	color = 'paleturquoise'
明るいグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='bright', color='r')
折れ線グラフの星マーカーを赤くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
アクアマリン色の線グラフを描画する	plt.plot(データ列, データ列2, color='aquamarine')
数式の簡略化を行う	sympy.sympify(e)
折れ線グラフの左三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
文字列をバイト列に変換する	bytes(s)
nにn2を加える	n + n2
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
折れ線グラフを描画して、その色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
nの二乗	n ** 2
空文字	''
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
＜オプション＞読み込みモードに設定する	mode = 'r'
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
startからendまでヒストグラムにする	plt.hist(データ列, range=(start, end))
折れ線グラフに黄色い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データフレームの中に文字列があるか調べる	df.isin([value])
辞書のキーとその値を列挙する	aDict.items()
year年の日付	datetime.date(year=year, month=1, day=1)
＜オプション＞グラフの色をロイヤルブルーに設定する	color = 'royalblue'
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
ヒストグラムを描画して、その色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
辞書をコピーする	aDict.copy()
辞書のキーを列挙する	aDict.keys()
＜オプション＞グラフの色をアクアマリンに設定する	color = 'aquamarine'
UNIXコマンドtextを実行する	os.system(text)
＜オプション＞グラフの色をライトグレーに設定する	color = 'lightgrey'
カウンタの項目を増やす	aCounter[element] += 1
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
＜オプション＞グラフの色をスラグレーに設定する	color = 'slategray'
数字を全部使う	string.digits
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
リストとリストで折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
実数が負の数か調べる	x < 0
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
リストのn番目の	aList[n]
リストとリストについての散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
ファイル全体を行単位で分割して読み込む	f.readlines()
ビン数をnに設定してヒストグラムを描画する	plt.hist(データ列, bins=n)
n2分のn	n / n2
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
整数nの八進表現	oct(n)
折れ線グラフを描画して、その色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
文字を文字コードに変換する	ord(ch)
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
＜オプション＞エンコーディングを文字コードtextに設定する	encoding = text
行列の行列式	np.linalg.det(aArray)
両端キューの中に要素が含まれてるか調べる	element in deq
＜オプション＞グラフの色をライトグリーンに設定する	color = 'lightseagreen'
データ列が何分か見る	ds.dt.minute
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
折れ線グラフを描画して、その色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
＜オプション＞グラフの色をマルーンに設定する	color = 'maroon'
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
イテラブルの全順列	itertools.permutations(iterable)
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
ヒストグラムを描画して、その色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
＜オプション＞三二ビット整数型を使う	dtype = np.int16
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
トマト色の線グラフを描画する	plt.plot(データ列, データ列2, color='tomato')
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
文字列中の部分文字列をカウントする	s.count(sub)
＜オプション＞グラフの色をシエナに設定する	color = 'sienna'
青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
＜オプション＞グラフの色を淡いピンク色に設定する	color = 'lightpink'
折れ線グラフを描画して、その色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
文字列の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
グラフを使う準備をする	from sympy import N
アクア色の線グラフを描画する	plt.plot(データ列, データ列2, color='aqua')
オブジェクトはリストクラスか調べる	isinstance(obj, list)
折れ線グラフを描画して、色を黄色くする	plt.plot(データ列, データ列2, color='y')
データ列をビン分割する	pd.cut(ds, aList)
赤い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
＜オプション＞星マーカーを使う	marker = '*'
配列の最大値	np.max(aArray)
文字列をカンマで区切って、列挙する	s.split(',')
数式を因数分解する	sympy.factor(e)
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
文字列はタイトルケースか調べる	s.istitle()
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
プラットフォームの符号付き整数の最大値	sys.maxsize
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
リストを反転する	reversed(aList)
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
リストを引数として展開して表示する	print(*aList)
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
両端キューの先頭	deq[0]
グラフの用途をポスターに設定する	sns.set(context='poster')
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
数式の部分分数化を行う	sympy.apart(e)
＜オプション＞グラフの色をライトコーラルに設定する	color = 'lightcoral'
集合からエラーなく要素を取り除く	aSet.discard(element)
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
ファイルから1文字、読み込む	f.read(1)
文字列をバイト配列に変換する	bytearray(s)
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
aListn番目から要素をポップする	aList.pop(n)
折れ線グラフを描画して、その色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
行列の値	aArray[行番号, 列番号]
データ列の時	ds.dt.hour
文字列の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
コマンドの第一引数を知る	sys.argv[1]
リストとリストについての散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
折れ線グラフに大きさnの四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markersize=n)
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
リストが空でないか調べる	len(aList) != 0
ヒストグラムを描画して、その色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
折れ線グラフに緑色のダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
nまたはn2	n or n2
リストとリストについて散布図を描画して、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
角度のラジアン	math.radians(degree)
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
ローングリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lawngreen')
＜オプション＞グラフの色をライムに設定する	color = 'lime'
リストの先頭のn要素を取り除く	aList[n:]
色差別ないグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
折れ線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
＜オプション＞マーカーをポイントに変更する	marker = '.'
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
＜オプション＞ミディアムパープル色を使う	color = 'mediumpurple'
文字列の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
数式を数値に変換する	float(e)
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
折れ線グラフの右三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
文字列が全てアスキー文字か調べる	s.isascii()
＜オプション＞大文字・小文字を無視する	flag = re.IGNORECASE
＜オプション＞グラフの色をフクシアに設定する	color = 'fuchsia'
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
折れ線グラフの星マーカーを黒くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
データフレームのリストカラムを丸める	df[aList].round()
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
カウンタを辞書に変換する	dict(aCounter)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
黒いダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='k')
両端キューを空にする	deq.clear()
日付を使う	import datetime
タプルを展開してプリントする	print(*aTuple)
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
辞書のキーを要素に設定する	aDict[key] = element
ヒストグラムを描画して、その色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
データフレームの標本標準偏差	df.std()
ヒストグラムを描画して、その色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
オーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='orchid')
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
アイボリー色の線グラフを描画する	plt.plot(データ列, データ列2, color='ivory')
両端キューの長さを制限する	collections.deque(maxlen=n)
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
配列をビン数nでビン分割する	pd.cut(aArray, n)
実数の余弦	math.cos(x)
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
ヒストグラムを描画して、その色をスラグレーに設定する	plt.hist(データ列, color='slategray')
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
グラフの描画で濃いカラーパレットを使う	sns.set(pallete='deep')
折れ線グラフを描画して、その色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
ライトコーラル色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightcoral')
カウンタの項目を列挙する	aCounter.keys()
グラフの描画で淡いカラーパレットを使う	sns.set(pallete='muted')
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
八進文字列を整数に変換する	int(s, 8)
部分集合か調べる	aSet.issubset(aSet2)
貝殻色の線グラフを描画する	plt.plot(データ列, データ列2, color='seashell')
＜オプション＞ミントクリーム色を使う	color = 'mintcream'
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
＜オプション＞グラフの種類を実線に設定する	linestyle = 'solid'
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
散布図に黒い右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c='k')
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
＜オプション＞ミディアムオーキッド色を使う	color = 'mediumorchid'
ミディアムブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumblue')
ファイルを一行ずつ読み込む	f.readline()
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
実数以上の最小の整数	math.ceil(x)
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
ライトグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgreen')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
ダークグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgrey')
＜オプション＞グラフの色をサーモンに設定する	color = 'salmon'
タン色の線グラフを描画する	plt.plot(データ列, データ列2, color='tan')
散布図に赤い左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='r')
＜オプション＞マーカーを丸に変更する	marker = 'o'
データ列を使う	import pandas as pd
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
nが奇数か調べる	n % 2 == 1
＜オプション＞グラフの色をブラックに設定する	color = 'black'
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
＜オプション＞読み込まない列番号をnamesで指定する	skiprows = names
配列を2次元1行に変形する	aArray.reshape(1, -1)
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
折れ線グラフの色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
折れ線グラフを描画して、色を白くする	plt.plot(データ列, データ列2, color='w')
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
アヤメのデータセットをロードする	sns.load_dataset('iris')
配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
nからn2までのスライス	slice(n, n2)
紺色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkblue')
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
データ列を折れ線グラフに描画して、マーカーをバツ印にする	plt.plot(データ列, データ列2, marker='x')
折れ線グラフを描画して、その色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
白いヒストグラムを描画する	plt.hist(データ列, color='w')
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
ヒストグラムを描画して、その色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
データフレームのカラムとカラムを折れ線グラフで描画する	plt.plot(df[col], df[col2])
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='r')
文字列中の小文字を大文字に変換する	s.upper()
折れ線グラフの丸マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='o', markersize=n)
真	True
パステル調のグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
文字列を代数計算の変数に変換する	sympy.Symbol(s)
折れ線グラフに星マーカーを使う	plt.plot(データ列, データ列2, marker='*')
ピーチパフ色の線グラフを描画する	plt.plot(データ列, データ列2, color='peachpuff')
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
折れ線グラフに大きさnの下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
折れ線グラフの四角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='g')
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
＜オプション＞ゴールデンロッド色を使う	color = 'goldenrod'
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
折れ線グラフを描画して、その色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
＜オプション＞グラフの色をアイボリーに設定する	color = 'ivory'
＜オプション＞ダークサーモン色を使う	color = 'darksalmon'
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
文字列の出力を改行なしに行う	print(value, end='')
リストとリストについて散布図を描画して、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
配列の合計値	np.sum(aArray)
リストとリストについての散布図を明るい色で描画する	plt.plot(xdata, ydata, c='bright')
折れ線グラフのバツマーカーを青くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
淡いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
オブジェクトのイテレータ	iter(obj)
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='palevioletred')
折れ線グラフに線幅nの左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
データフレームの重複を見る	df.duplicated()
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
＜オプション＞UTF8を使う	encoding = 'utf-8'
文字列が正規表現にマッチさせる	re.match(pattern, s)
二つの変数を同じ値にする	x = y = n
＜オプション＞マーカーを星に変更する	marker = '*'
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
＜オプション＞文字コードtextを使う	encoding = text
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
折れ線グラフの色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
＜オプション＞グラフの色をシスルに設定する	color = 'thistle'
オブジェクトを文字列に変換する	str(obj)
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
本日が何年か知る	datetime.datetime.today().year
ファイルとfilenameを結合する	os.path.join(filepath, filename)
茶色色の線グラフを描画する	plt.plot(データ列, データ列2, color='brown')
標準入力を使う	sys.stdin
数式を展開する	sympy.expand(e)
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
＜オプション＞ダイアモンドマーカーを使う	marker = 'D'
グラフの背景色を暗くする	sns.set(style='darkgrid')
散布図に大バツマーカーを使う	plt.plot(xdata, ydata, marker='X')
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
折れ線グラフの下三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
グラフの用途を論文に設定する	sns.set(context='paper')
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
辞書のキーを列挙する	list(aDict)
osモジュールをインポートする	import os
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
xを浮動小数点数に変換する	float(x)
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
＜オプション＞エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
折れ線グラフのマーカーを大バツにする	plt.plot(データ列, データ列2, marker='X')
辞書を浅くコピーする	dict(aDict)
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
＜オプション＞バッファリングを無効にする	buffering = 0
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
文字列を全て大文字に変換する	s.upper()
整数nがタプルのどれかか調べる	n in aTuple
＜オプション＞ダークスレートブルー色を使う	color = 'darkslateblue'
＜オプション＞符号なし８ビット整数型を使う	dtype = np.uint8
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='midnightblue')
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
折れ線グラフに大きさnの大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markersize=n)
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
整数nの十六進文字列	hex(n)[2:]
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
データフレームの相関行列	df.corr()
部分文字列を範囲を指定して探す	s.find(sub, start, end)
リストとリストについて散布図を描画して、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
要素が集合に含まれないか調べる	element not in aSet
＜オプション＞ピーチパフ色を使う	color = 'peachpuff'
リストとリストについてパステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
nが無限に続く数列	itertools.repeat(n)
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
折れ線グラフのダイアモンドマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
ファイルからファイル名を使う	os.path.basename(filepath)
リストを淡い色のヒストグラムで描画する	plt.hist(xdata, color='muted')
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
行列の演算をする	import numpy as np
スチールブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='steelblue')
オプションで、標準出力を使う	file = sys.stdout
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
両端キューの末尾に要素を追加する	deq.append(element)
折れ線グラフを描画して、色を赤くする	plt.plot(データ列, データ列2, color='r')
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
タプルをリストに変換する	list(aTuple)
実数を実数で割った余り	x % y
0からNまでの配列	np.arange(N)
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
＜オプション＞データ型を指定する	dtype = np.int16
丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o')
nとn2の値を足してnに代入する	n += n2
現在処理中の例外を情報	sys.exc_info()
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
散布図にバツマーカーを使う	plt.plot(xdata, ydata, marker='x')
ヒストグラムを描画して、その色を赤に設定する	plt.hist(データ列, color='red')
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
データフレームの各次元の大きさを見る	df.shape
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
イテラブルを両端キューに変換する	collections.deque(iterable)
折れ線グラフを描画して、その色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
文字列の無限イテラブル	itertools.repeat(element)
データ列とラベル列を指定して、横棒グラフを描画する	plt.barh(ラベル列, データ列)
＜オプション＞グラフの色をパウダーブルーに設定する	color = 'powderblue'
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
集合の補集合	aSet.difference(aSet2)
ヒストグラムを描画して、その色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslategrey')
nがn2で割り切れるか調べる	n % n2 == 0
散布図に色差別ない色のマーカーを使う	plt.plot(xdata, ydata, c='colorblind')
部分文字列か調べる	sub in s
＜オプション＞BOM付きを使う	encoding = 'utf_8_sig'
折れ線グラフに黄色いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
配列をヒストグラムにする	plt.hist(aArray)
データフレームのカラムが何月か見る	df[col].dt.month
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
文字列中から部分文字列を探す	s.find(sub)
カウンタからゼロカウントを取り除く	+aCounter
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
全要素を０で初期化された三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
二つの文字列は同じか調べる	s == s2
リストとリストを連結する	aList + aList2
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
縦棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
折れ線グラフを描画する	plt.plot(xdata, ydata)
＜オプション＞ダークバイオレット色を使う	color = 'darkviolet'
タプル内の要素が全て真か調べる	all(aTuple)
折れ線グラフを描画して、その色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
ヒストグラムを描画して、その色をオレンジに設定する	plt.hist(データ列, color='orange')
折れ線グラフの色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
全要素を０で初期化されたブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
折れ線グラフに黄色い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
オプションで、出力先を標準エラーに設定する	file = sys.stderr
整数nを八進文字列に変換する	oct(n)[2:]
集合にイテラブルを追加更新する	aSet.update(iterable)
暗いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
タプルをミュータブルにする	list(aTuple)
実数の床	math.floor(x)
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
文字列を二分する	s.partition(sep)
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
ミントクリーム色の線グラフを描画する	plt.plot(データ列, データ列2, color='mintcream')
集合から全ての要素を取り除く	aSet.clear()
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
リストを縦軸、リストを横軸と指定して、折れ線グラフを描画する	plt.plot(xdata, ydata)
データ列の曜日が何日目か見る	ds.dt.dayofweek
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
文字列を全て小文字に変換する	s.casefold()
リストとリストのカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
nから無限にカウントアップする	itertools.count(start=n)
数式を方程式として解く	sympy.solve(e)
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
コーラル色の線グラフを描画する	plt.plot(データ列, データ列2, color='coral')
ヒストグラムを描画して、その色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
破線ヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
リストとリストについての散布図にカラーコードの三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
全ての印字可能な文字	string.printable
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
パステル調のグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
黒いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
リストとリストのカラーコードの暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
赤い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='r')
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列, データ列2, color='blueviolet')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
xの印字可能な文字列	ascii(x)
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
折れ線グラフを描画して、その色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
リストとリストについて散布図を描画して、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
ヒストグラムを描画して、その色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
日付データが何日か知る	aDate.day
リストの中の最大値	max(aList)
散布図に黒いバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c='k')
＜オプション＞グリーン色を使う	color = 'green'
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
リストとリストの折れ線グラフをuntitledとラベル付けして描画する	plt.plot(xdata, ydata, label=untitled)
折れ線グラフの四角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='s', markersize=n)
折れ線グラフの透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
折れ線グラフを描画して、その色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
カウンタの項目一覧	aCounter.keys()
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
両端キュー中の要素のインデックス	deq.index(element)
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkolivegreen')
日付データの月数	aDate.month
リストとリストのカラーコードの濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
リストとリストについての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
日付データの曜日を整数で使う	aDate.weekday()
グラフの色を濃くする	sns.set(pallete='deep')
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
文字列をセパレータで区切って、列挙する	s.split(sep)
実数の絶対値	math.fabs(x)
色差別ない色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='colorblind')
配列の行ごとの合計値	np.sum(aArray, axis=1)
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
折れ線グラフを描画して、その色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
折れ線グラフを描画して、その色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
カラーコードの三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
データ列とラベルを指定して、縦棒グラフを描画する	plt.bar(ラベル列, データ列)
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
＜オプション＞バツマーカーを使う	marker = 'x'
折れ線グラフを描画して、その色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
データ列をインポートする	import pandas as pd
リストとリストの黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
改行	'\n'
＜オプション＞シャルトリューズ色を使う	color = 'chartreuse'
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
リストとリストのカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='ghostwhite')
＜オプション＞ヘッダをnamesに設定する	header = names
nではない	not n
左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<')
実数を文字列に変換する	str(x)
＜オプション＞ターコイズ色を使う	color = 'turquoise'
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
ヒストグラムを描画して、その色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
グラフのサイズを設定する	plt.figure(figsize=(width, height))
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
＜オプション＞ハニーデュー色を使う	color = 'honeydew'
グラフの描画で色差別ないカラーパレットを使う	sns.set(pallete='colorblind')
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
＜オプション＞グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
イテラブルの長さnの順列	itertools.permutations(iterable, n)
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>')
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列, データ列2, color='rebeccapurple')
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
ファイルからストリームを読み込み、fileとする	file = open(filepath)
＜オプション＞ナバホホワイト色を使う	color = 'navajowhite'
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='k')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
ペールグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='palegreen')
データフレームから列を三つ選択する	df[[column, column2, column3]]
データフレームの尖度	df.skew()
配列の標準偏差	np.std(aArray)
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
グラフで使える色名の一覧	matplotlib.colors.cnames
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフの四角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
実数を複素数に変換する	complex(x)
ヒストグラムを描画して、その色をインディゴに設定する	plt.hist(データ列, color='indigo')
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
ふたつの集合の積集合	aSet.intersection(aSet2)
リストの全ての要素をクリアにする	aList.clear()
文字列がリストの要素でないか調べる	element not in aList
＜オプション＞フォレストグリーン色を使う	color = 'forestgreen'
集合をリストに変換する	list(aSet)
リストの重複を取り除く	sorted(set(aList), key=aList.index)
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
集合から任意の要素を取り出す	aSet.pop()
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
データ列の欠損値をxで埋める	ds.fillna(x)
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
＜オプション＞改行をセパレータで使う	sep = '\n'
＜オプション＞サドルブラウン色を使う	color = 'saddlebrown'
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
＜オプション＞グラフの種類を点線に設定する	linestyle = 'dotted'
ヒストグラムを描画して、その色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
データフレームのリストカラムの平均値	df[aList].mean()
明るいグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
二つのオブジェクトが等しいか調べる	obj == obj2
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
配列が何のデータ型か	aArray.dtype()
＜オプション＞グラフの色を紺碧に設定する	color = 'azure'
＜オプション＞読み込まないフッタをnに設定する	skipfooter = n
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
折れ線グラフを描画して、その色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
ヒストグラムを描画して、その色をアイボリーに設定する	plt.hist(データ列, color='ivory')
円周率	math.pi
データフレームのリストカラムの分散	df[aList].var()
データフレームから重複を削除する	df.drop_duplicates()
イテラブルの集合	set(iterable)
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
＜オプション＞ダークオリーブグリーン色を使う	color = 'darkolivegreen'
データ列が何月か見る	ds.dt.month
折れ線グラフを描画して、その色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
数式の微分を求める	sympy.diff(e)
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
空の辞書	{}
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
ファイルが存在するか調べる	os.path.exists(filepath)
データフレームの中の欠損値の合計を数える	df.isna().sum()
＜オプション＞グラフの色をシルバーに設定する	color = 'silver'
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
Pandasのバージョンを見る	print(pd.__version__)
ヒストグラムを描画して、その色をビスクに設定する	plt.hist(データ列, color='bisque')
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
カラーコードの四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
＜オプション＞グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
ピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='pink')
Pythonパスの一覧	sys.path
折れ線グラフを描画して、その色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
＜オプション＞バイナリ書き込みモードを使う	mode = 'wb'
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
＜オプション＞読み込むシートの名前をnamesに設定する	sheet_name = names
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(xdata, ydata, marker='v')
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
文字列リストを連結する	''.join(aStringList)
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
ディムグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dimgrey')
グラフの描画を見やすくする	import seaborn as sns
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
データ列を折れ線グラフに描画して、マーカーを四角印にする	plt.plot(データ列, データ列2, marker='s')
nをn2分の一にする	n /= n2
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
パステル調のグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
リストとリストについて散布図を描画して、マーカーの色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
日付データが金曜日か調べる	aDate.weekday() == 4
データ列を1000の位で丸める	ds.round(-3)
連立方程式の解を求める	sympy.solve([e, e2])
シアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='cyan')
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
折れ線グラフの色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
明るい色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='bright')
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
文字列を末尾から空白で区切る	s.rsplit()
スカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='skyblue')
淡い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='muted')
折れ線グラフの三角マーカーを青くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
グラフにグリッド線を入れる	plt.grid(True)
折れ線グラフの色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
日付データが日曜日か調べる	aDate.weekday() == 6
ヒストグラムを描画して、その色を紺碧に設定する	plt.hist(データ列, color='azure')
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
散布図に右三角マーカーを使う	plt.plot(xdata, ydata, marker='>')
折れ線グラフの左三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
ヒストグラムを描画して、その色をシスルに設定する	plt.hist(データ列, color='thistle')
ヒストグラムを描画する	plt.hist(データ列)
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
＜オプション＞グラフの色をディムグレーに設定する	color = 'dimgray'
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='r')
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
折れ線グラフを描画して、その色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
単位正方行列	np.identity(N)
＜オプション＞セパレータをスラッシュにする	sep = '/'
文字列の右側からタブを取り除く	s.rstrip('\t')
リストをn倍する	aList * n
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
＜オプション＞ディムグレー色を使う	color = 'dimgrey'
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
データ列のユニークな値	ds.unique()
折れ線グラフを描画して、その色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
ヒストグラムを描画して、その色をシエナに設定する	plt.hist(データ列, color='sienna')
文字列の両端から空白を取り除く	s.strip()
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x')
空の両端キュー	collections.deque()
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
配列の全要素の値を変更する	aArray[:, :] = 指定の値
実数の仮数	math.frexp(x)[0]
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
ヒストグラムの色を黒くする	plt.hist(データ列, color='k')
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
データフレームの列をヒストグラムにする	plt.hist(df[column])
＜オプション＞グラフの色を暗い赤に設定する	color = 'darkred'
濃い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='deep')
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
文字列が文字列リストに含まれるか調べる	s in aStringList
文字列を右トリムする	s.rstrip()
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
ヒストグラムを描画して、その色を青紫に設定する	plt.hist(データ列, color='violet')
ヒストグラムを描画して、その色を黄色に設定する	plt.hist(データ列, color='yellow')
データ列を折れ線グラフに描画して、マーカーを星印にする	plt.plot(データ列, データ列2, marker='*')
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
配列を中央値でビン分割する	pd.qcut(aArray, 2)
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
ディムグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dimgray')
ヒストグラムを描画して、その色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
散布図に黒いダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c='k')
三変数の最小値	min(x, y, z)
＜オプション＞ホワイトスモーク色を使う	color = 'whitesmoke'
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
実数を切り下げて整数に変換する	math.floor(x)
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
配列の形状	aArray.shape
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
折れ線グラフを描画して、その色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
折れ線グラフを描画して、その色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
NaN	math.nan
＜オプション＞グラフの色をオレンジに設定する	color = 'orange'
カウンタから辞書を引く	aCounter.subtract(aDict)
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
散布図に黒い左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='k')
文字列の左側からタブを取り除く	s.lstrip('\t')
タプルの末尾のn要素を取り除く	aTuple[:-n]
リストとリストについての散布図をパステル調の色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
赤いダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
折れ線グラフを点線で描画する	plt.plot(データ列, データ列2, linestyle='dotted')
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
nがn2以上か調べる	n >= n2
オレンジレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='orangered')
＜オプション＞ミスティローズ色を使う	color = 'mistyrose'
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
折れ線グラフを描画して、その色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
ヒストグラムを描画して、その色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
0からnまでのスライス	slice(n)
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
リストのn番目からn2番目までの部分	aList[n:n2]
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
ダークカーキ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkkhaki')
グラフの横軸のラベルをuntitledに設定する	plt.xlabel(untitled)
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
折れ線グラフに緑色の丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='g')
ヒストグラムを描画して、その色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
＜オプション＞グラフの色を青に設定する	color = 'blue'
リストとリストについて散布図を描画して、マーカーの色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
コマンドライン引数	sys.argv
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
行列の列	aArray[:, 列番号]
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
数式の積分を求める	sympy.integrate(e)
タプルの長さ	len(aTuple)
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
ターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='turquoise')
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
nからn2を引く	n - n2
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
折れ線グラフの星マーカーを青くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
グラフのカラーパレットをpalleteNameに設定する	sns.set(pallete=palleteName)
カラーコードのバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
カラーコードの右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
パステル調の色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
明るいグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
＜オプション＞アイボリー色を使う	color = 'ivory'
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
カラーコードの大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
二つのカラムを並べて箱ひげ図にする	plt.boxplot([df[column], df[column2]])
リストとリストの青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
折れ線グラフの色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
折れ線グラフを描画して、その色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
＜オプション＞レモンシフォン色を使う	color = 'lemonchiffon'
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
折れ線グラフを描画して、その色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
＜オプション＞グラフの色をローングリーンに設定する	color = 'lawngreen'
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
ヒストグラムを描画して、その色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
折れ線グラフを描画して、その色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
折れ線グラフを描画して、その色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
ゼロ埋めされた行列	np.zeros(行数, 列数)
折れ線グラフを描画して、その色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
＜オプション＞エンコーディングをSJISに設定する	encoding = 'shift_jis'
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
＜オプション＞グラフの色をグレーに設定する	color = 'gray'
横棒グラフを積み上げにする	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
実数がNaNか調べる	math.isnan(x)
リストとリストの色差別ないグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
折れ線グラフを描画して、その色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumslateblue')
n進文字列を整数に変換する	int(s, n)
有理数の分子	q.numerator
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
折れ線グラフのバツマーカーを黄色くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
＜オプション＞グラフの色をライトグレーに設定する	color = 'lightgray'
自分自身をモジュールとして	sys.modules[__name__]
オブジェクトをイテラブルに変換する	iter(obj)
最初のコマンド引数	sys.argv[1]
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
文字列が全てアルファベットか調べる	s.isalpha()
＜オプション＞マーカーを下三角に変更する	marker = 'v'
文字の文字コード	ord(ch)
ファイルパスのセパレータ記号	os.sep
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
＜オプション＞どの行もヘッダにしない	header = None
＜オプション＞グラフの色をネイビーに設定する	color = 'navy'
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
バリーウッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='burlywood')
日付データをタプルに変換する	aDate.timetuple()
黄色色の線グラフを描画する	plt.plot(データ列, データ列2, color='yellow')
真部分集合か調べる	aSet < aSet2
リストの末尾を取り除く	aList[:-1]
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
リストのn番目の要素を削除する	del aList[n]
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
＜オプション＞先頭のカラムをインデックスに設定する	index_col = 0
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
数式を簡単にする	sympy.sympify(e)
＜オプション＞グラフの色をダークグリーンに設定する	color = 'darkgreen'
ヒストグラムを描画して、その色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
日付データの年数	aDate.year
＜オプション＞グラフの色をロージーブラウンに設定する	color = 'rosybrown'
＜オプション＞先頭の行をヘッダに設定する	header = 0
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
データフレームを丸める	df.round()
ヒストグラムを描画して、その色を暗い赤に設定する	plt.hist(データ列, color='darkred')
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
行列の列ごとの標準偏差	np.std(aArray, axis=0)
＜オプション＞グラフの色をミントクリームに設定する	color = 'mintcream'
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列, データ列2, marker='D')
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
＜オプション＞マーカーを大バツに変更する	marker = 'X'
日付時刻データの日付	aDatetime.date()
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
散布図に赤い大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='r')
文字列中に部分文字列が含まれるか調べる	sub in s
両端キューの末尾から要素を取り除く	deq.pop()
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
リストとリストについての散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
＜オプション＞ビスク色を使う	color = 'bisque'
折れ線グラフを描画して、その色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
有理数の分母	q.denominator
nプラスn2	n + n2
タプルを逆順にする	aTuple[::-1]
折れ線グラフを描画して、その色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
リストをパステル調の色のヒストグラムで描画する	plt.hist(xdata, color='pastel')
リストとリストの折れ線グラフを描画して、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
ヒストグラムを描画して、その色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
黒い三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='k')
リストをイミュータブルにする	tuple(aList)
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
＜オプション＞ミディアムブルー色を使う	color = 'mediumblue'
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
リストとリストについて濃い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
散布図に赤い三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='r')
データフレームの第一四分位数	df.quantile(0.25)
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
文字列モジュールをインポートする	import string
＜オプション＞グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
リストの要素を逆順にする	aList[::-1]
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
文字列を文字コード列に変換する	[ord(ch) for ch in s]
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
実数が有限か調べる	math.isfinite(x)
＜オプション＞グラフの色をダークオーキッドに設定する	color = 'darkorchid'
整数nがリストのどれかか調べる	n in aList
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
リストとリストの折れ線グラフを描画する	plt.plot(xdata, ydata)
nの三乗	n ** 3
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
ヒストグラムを描画して、その色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
破線グラフの色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
日付時刻データのタイムゾーン	aDatetime.timetz()
nが2で割り切れるか調べる	n % 2 == 0
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
データフレームの重複した行を数える	df.duplicated().sum()
リストの変化を折れ線グラフで描画する	plt.plot(range(len(xdata)), xdata)
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
黒い右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='k')
numpyを使う	import numpy as np
青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
リストの要素をソートする	sorted(aList)
クリムゾン色の線グラフを描画する	plt.plot(データ列, データ列2, color='crimson')
データフレームを複数の列によってソートする	df.sort_values(by=column)
データ列を100の位で丸める	ds.round(-2)
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
データフレームの列の文字列長を列として使う	df[col].str.len()
データフレームのインデックスをリセットする	df.reset_index()
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslategray')
ファイルをオープンする]	open(filepath)
データ列のpercent分位数	ds.quantile(percent/100)
試しに何か動かす	print('Hello World')
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
リストのヒストグラムを描画する	plt.hist(aList)
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
スプリンググリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='springgreen')
ヒストグラムを描画して、透明度をxに設定する	plt.hist(データ列, alpha=x)
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
ヒストグラムを描画して、その色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
折れ線グラフを描画して、その色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
＜オプション＞グラフの色をターコイズに設定する	color = 'turquoise'
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
nがn2より大きいか調べる	n > n2
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
データフレームを'A'列によってまとめたグループ	df.groupby('A')
折れ線グラフに黄色い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
＜オプション＞データ型を指定する	dtype = np.int
折れ線グラフの色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
＜オプション＞ディープスカイブルー色を使う	color = 'deepskyblue'
データ列の日	ds.dt.day
グラフの色を色差別なくする	sns.set(pallete='colorblind')
実数を小数点以下で丸める	round(x, n)
＜オプション＞ネイビー色を使う	color = 'navy'
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*')
nマイナスn2	n - n2
コマンドラインフラグの状態	sys.flags
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
折れ線グラフの色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
行列の逆行列	np.linalg.inv(aArray)
折れ線グラフを描画して、その色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
リストとリストについての散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
＜オプション＞グラフの色をスカイブルーに設定する	color = 'skyblue'
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
nが正の数か調べる	n > 0
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightslategrey')
両端キューの先頭に要素を追加する	deq.appendleft(element)
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
＜オプション＞グラフの色をオリーブに設定する	color = 'olive'
＜オプション＞四角マーカーを描画する	marker = 's'
赤い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='r')
データ列を小数点以下n桁で丸める	ds.round(n)
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
＜オプション＞グラフの色を貝殻に設定する	color = 'seashell'
データフレームのカラムの年	df[col].dt.year
文字列を文字リストに変換する	list(s)
全要素を０で初期化された行列	np.zeros(行数, 列数)
＜オプション＞グラフの色をライトグリーンに設定する	color = 'lightgreen'
リストの長さ	len(aList)
nがn2か調べる	n == n2
＜オプション＞グラフの色をライトブルーに設定する	color = 'lightblue'
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
＜オプション＞黄色色を使う	color = 'yellow'
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
配列の要素ごとに加算する	aArray + aArray2
グラフの背景色を白くする	sns.set(style='whitegrid')
ミスティローズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='mistyrose')
空のタプル	()
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
カウンタの全数	aCounter.total()
折れ線グラフの色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
綺麗なグラフを描画する準備をする	import seaborn as sns
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
データフレームを使う	import pandas as pd
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
折れ線グラフを実線で描画する	plt.plot(データ列, データ列2, linestyle='solid')
データフレームの重複した行数のマスク	df.duplicated()
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
散布図に赤いポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='r')
折れ線グラフを描画して、その色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
＜オプション＞茶色色を使う	color = 'brown'
配列の行ごとの平均値	np.mean(aArray, axis=1)
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
ライムグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='limegreen')
ライム色の線グラフを描画する	plt.plot(データ列, データ列2, color='lime')
折れ線グラフを描画して、その色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
リストとリストについての散布図を淡い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
実数の二進対数	math.log2(x)
ライトグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgrey')
bとn2から成るペア	(n, n2)
＜オプション＞オーキッド色を使う	color = 'orchid'
ハローワールドとプリントする	print('Hello World')
折れ線グラフに大きさnの星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markersize=n)
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
オブジェクトは整数クラスか調べる	isinstance(obj, int)
折れ線グラフに右三角マーカーを使う	plt.plot(データ列, データ列2, marker='>')
ヒストグラムの線のスタイルを実線に設定する	plt.hist(データ列, linestyle='solid')
nをn2だけ増加させる	n += n2
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
ファイルからn文字、読み込む	f.read(n)
グラフに凡例を文字列と文字列と入れる	plt.legend([s, s2])
ヒストグラムを描画して、色を黒くする	plt.hist(データ列, color='k')
散布図に赤い丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c='r')
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
配列のデータ型	aArray.dtype()
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
実数を切り下げる	math.floor(x)
折れ線グラフを描画して、その色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
ヒストグラムでカラーマップを使う	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
両端キューに要素をプッシュする	deq.append(element)
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
折れ線グラフを描画して、その色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
ファイルのディレクトリ名	os.path.dirname(filepath)
データフレームを関数の値によってグループ化する	df.groupby(関数)
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
データフレームの列の種類	df.info()
濃いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
＜オプション＞ライトコーラル色を使う	color = 'lightcoral'
ファイルの絶対パス	os.path.abspath(filepath)
文字列は全て印字できるか調べる	s.isprintable()
＜オプション＞赤色を使う	color = 'red'
データ列の中に文字列があるか調べる	ds.isin([value])
実数を三乗する	x ** 3
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
＜オプション＞グラフの色をコーンズシルクに設定する	color = 'cornsilk'
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
折れ線グラフにラベルを付ける	plt.plot(xdata, ydata, label=untitled)
ライトグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgray')
集合に要素を追加する	aSet.add(element)
実数の逆正接	math.atan(x)
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
日付時刻データが何月か知る	aDatetime.month
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
行列の行列積	np.matmul(aArray, aArray2)
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
整数nのビット長	n.bit_length()
折れ線グラフの色を青くする	plt.plot(データ列, データ列2, color='b')
折れ線グラフを描画して、その色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
＜オプション＞ダークカーキ色を使う	color = 'darkkhaki'
折れ線グラフに黄色いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
ふたつの辞書を合体する	aDict | aDict2
ヒストグラムを描画して、その色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
startからendの範囲のヒストグラムを用いてリストを描画する	plt.hist(データ列, range=(start, end))
方程式として数式の変数の解を求める	sympy.solve(e, z)
データフレームの列の名前を付け直す	df.rename(columns={column: name})
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
＜オプション＞アリスブルー色を使う	color = 'aliceblue'
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
データフレームの指定された列を抽出する	df[column]
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
文字列をプリントする	print(value)
スクリプトの名前	sys.argv[0]
＜オプション＞欠損値は無視する	dropna = True
データ列の尖度	ds.skew()
データ列を使う	import pandas as pd
オプションで、標準エラーを出力にする	file = sys.stderr
ヒストグラムを描画して、その色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
リストとリストについての散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
折れ線グラフに大きさnの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
文字列を改行で区切る	s.splitlines()
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
＜オプション＞セパレータを文字列にする	sep = s
タプルの要素を逆順にする	aTuple[::-1]
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
＜オプション＞グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
＜オプション＞バイナリ書き込みモードに設定する	mode = 'wb'
タプルの末尾	aTuple[-1]
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
＜オプション＞グラフの色をディムグレーに設定する	color = 'dimgrey'
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
xを文字列に変換する	str(x)
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
カラーコードのダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
グローバル変数の一覧	globals()
＜オプション＞SJISを使う	encoding = 'shift_jis'
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
折れ線グラフにバツマーカーを使う	plt.plot(データ列, データ列2, marker='x')
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
ヒストグラムの色を赤くする	plt.hist(データ列, color='r')
数式の展開を行う	sympy.expand(e)
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
改行する	print()
文字列を緑色にする	f'\033[32m{value}\033[0m'
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='r')
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
データ列をビン数nでビン分割する	pd.cut(ds, n)
JSON形式の文字列をデータに変換する	json.loads(jsonString)
＜オプション＞オレンジ色を使う	color = 'orange'
nのn2乗	n ** n2
リストとリストについて散布図を描画して、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
書式を辞書でフォーマットする	formatText.format_map(aDict)
リストを中央値でビン分割する	pd.qcut(aList, 2)
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
＜オプション＞グラフの色をカーキに設定する	color = 'khaki'
データフレームの末尾n行を抽出する	df.tail(n)
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
最初のプログラムを書く	print('Hello World')
折れ線グラフを描画して、その色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
実数の逆双曲線正接	math.atanh(x)
淡いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
折れ線グラフを描画して、色を青くする	plt.plot(データ列, データ列2, color='b')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
itertoolsモジュールをインポートする	import itertools
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
標準入力から1行だけ読む	sys.stdin.readline()
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
折れ線グラフの線幅を指定する	plt.plot(xdata, ydata, linewidth=n)
リストをヒストグラムにする	plt.hist(aList)
ヒストグラムを描画して、その色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
ラジアンの角度	math.degrees(x)
ユニークな値を要素とする配列	np.unique(aArray)
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
カラーバーを描画する	plt.colorbar()
＜オプション＞グリーンイエロー色を使う	color = 'greenyellow'
両端キューのn番目	deq[n]
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
棒グラフの色をカラーコードに設定する	plt.bar(ラベル列, データ列, color=rgb)
時間を使う	import time
文字列が文字列リストのいづれか調べる	s in aStringList
リストのn番目以降の部分を取り出す	aList[n:]
折れ線グラフの色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
フローラルホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='floralwhite')
オリベドラブ色の線グラフを描画する	plt.plot(データ列, データ列2, color='olivedrab')
文字列が文字列より辞書順で前か調べる	s < s2
＜オプション＞グラフの色をナバホホワイトに設定する	color = 'navajowhite'
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
現在が何時か知る	datetime.date.today().hour
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
二進文字列を整数に変換する	int(s, 2)
サーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='salmon')
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
実数の逆双曲線余弦	math.acosh(x)
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
＜オプション＞グラフの色をラベンダーに設定する	color = 'lavender'
実数を切り上げる	math.ceil(x)
日付時刻データが何分か知る	aDatetime.minute
データフレームのどの値が頻出か見る	df.mode()
数式の数値を求める	float(e)
＜オプション＞ライトスレイグレー色を使う	color = 'lightslategrey'
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
文字列のn番目	s[n]
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
リストとリストについての散布図に三角マーカーを描画する	plt.plot(xdata, ydata, marker='^')
データフレームのカラムの平均値	df[col].mean()
リストの最初の文字列を探す	aList.index(element)
ライトシアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightcyan')
データフレームのカラムが何秒か見る	df[col].dt.second
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
nをn2で割った余り	n % n2
配列を転置する	aArray.T
＜オプション＞ライトグリーン色を使う	color = 'lightgreen'
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
全要素を1で初期化された行列	np.ones(行数, 列数, dtype=np.int)
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
＜オプション＞三角マーカーを使う	marker = '^'
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
＜オプション＞エンコーディングをUTF8に設定する	encoding = 'utf-8'
黒い丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c='k')
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
＜オプション＞グラフの色をダークグレーに設定する	color = 'darkgray'
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
データフレームの指定された列を配列に変換する	df[column].values
＜オプション＞ダーク・スラテグレー色を使う	color = 'darkslategrey'
スノー色の線グラフを描画する	plt.plot(データ列, データ列2, color='snow')
＜オプション＞ホットピンク色を使う	color = 'hotpink'
データフレームの指定された列を配列として抽出する	df[column].values
リストとリストの黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
折れ線グラフの色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
＜オプション＞グラフの色をスノーに設定する	color = 'snow'
＜オプション＞改行コードをUNIXに設定する	newline = '\n'
暗いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
＜オプション＞文字列の示すエンコーディングを使う	encoding = s
＜オプション＞アンティークホワイト色を使う	color = 'antiquewhite'
nを切り捨てながら半分にする	n //= 2
文字列の両端から部分文字列を取り除く	s.strip(sub)
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
＜オプション＞右三角マーカーを使う	marker = '>'
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
散布図にカラーコードの下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c=rgb)
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
＜オプション＞バイナリモードに設定する	mode = 'rb'
折れ線グラフの色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
赤い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='r')
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
＜オプション＞どのカラムもインデックスに設定しない	index_col = None
折れ線グラフを描画して、その色を白に設定する	plt.plot(データ列, データ列2, color='white')
インディアンレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='indianred')
日付データが日付データと同時か調べる	aDate == aDate2
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
折れ線グラフを描画して、その色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
データ列を中央値でビン分割する	pd.qcut(ds, 2)
ヒストグラムを描画して、その色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
折れ線グラフの左三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='<', markersize=n)
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
データフレームから型の列を抽出する	df.select_dtypes(ty)
リストとリストの濃いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
タプルの中の最小値	min(aTuple)
リストとリストについて散布図を描画して、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
散布図に星マーカーを使う	plt.plot(xdata, ydata, marker='*')
折れ線グラフを描画して、その色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
データフレームの歪度	df.kurt()
グラフの横軸にuntitledというラベルを付ける	plt.xlabel(untitled)
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
＜オプション＞ライム色を使う	color = 'lime'
折れ線グラフのマーカーを丸にする	plt.plot(データ列, データ列2, marker='o')
＜オプション＞デピンク色を使う	color = 'deeppink'
コマンドの第二引数を知る	sys.argv[1]
淡いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
二つの文字列を辞書順で比較する	s < s2
データ列とラベル列を指定して、積み上げ棒グラフを描画する	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='k')
リストとリストについての散布図にバツマーカーを描画する	plt.plot(xdata, ydata, marker='x')
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
文字列を右寄せにする	s.rjust(文字列幅)
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
nわるn2	n / n2
データフレームの中央値	df.median()
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='r')
折れ線グラフを描画して、その色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
折れ線グラフを描画して、その色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
折れ線グラフを描画して、その色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
＜オプション＞グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
配列の最小値	np.min(aArray)
カウンタを辞書で更新する	aCounter.update(aDict)
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
nがn2よりも大きいか調べる	n > n2
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkmagenta')
文字列から部分文字列を全て取り除く	s.replace(sub, '')
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
折れ線グラフに線幅nの星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
折れ線グラフを描画して、その色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
リストとリストについての散布図を暗い色で描画する	plt.plot(xdata, ydata, c='dark')
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
＜オプション＞ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
モカシン色の線グラフを描画する	plt.plot(データ列, データ列2, color='moccasin')
＜オプション＞改行コードを旧Macに設定する	newline = '\r'
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
リストの平均値	sum(aList)/len(aList)
折れ線グラフに黄色い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
＜オプション＞グラフの色をダークグレーに設定する	color = 'darkgrey'
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
日付データが土曜日か調べる	aDate.weekday() == 5
辞書のキー一覧	list(aDict)
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
nが何桁か	len(str(n))
データフレームを小数点以下n桁で丸める	df.round(n)
タプルのn番目からn2番目までの部分	aTuple[n:n2]
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
小麦色色の線グラフを描画する	plt.plot(データ列, データ列2, color='wheat')
データフレームのリストカラムの最頻値	df[aList].mode()
二つの変数をそれぞれ定義する	x, y = i, j
キーが辞書に存在するか調べる	key not in aDict
配列のユニークな要素	np.unique(aArray)
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
ヒストグラムを描画して、色を青くする	plt.hist(データ列, color='b')
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
再帰の上限を上げる	sys.setrecursionlimit(1000000)
数式を数値計算する	float(e)
eの実数乗	math.exp(x)
辞書からキーの値をエラーなく得る	aDict.get(key, None)
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
＜オプション＞ピンク色を使う	color = 'pink'
赤い星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c='r')
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
＜オプション＞青紫色を使う	color = 'violet'
ダークオーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkorchid')
データフレームから最後の列を除く	df[df.columns[:-1]]
リストをタプルに変換する	tuple(aList)
FIXME	np.linalg.eig(aArray)
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
カウンタの項目のカウント	aCounter[element]
アルファベットの大文字列	string.ascii_uppercase
濃いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='deep', color='r')
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
整数nがセットのどれかか調べる	n in aSet
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
タプルの合計値	sum(aTuple)
折れ線グラフのマーカーを右三角にする	plt.plot(データ列, データ列2, marker='>')
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
＜オプション＞グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
折れ線グラフに黄色い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
数式の変数に数式を代入する	e.subs(z, e2)
折れ線グラフを描画して、その色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
＜オプション＞グラフの色を耐火レンガに設定する	color = 'firebrick'
＜オプション＞グラフの色をカデットブルーに設定する	color = 'cadetblue'
二つのオブジェクトが同一参照か調べる	obj is obj2
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
nにn2をかけた値をnに代入する	n *= n2
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
自然数最小公倍数	math.lcm(n, n2)
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
暗いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
折れ線グラフを描画して、その色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
＜オプション＞グラフの色をモカシンに設定する	color = 'moccasin'
折れ線グラフを描画して、その色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
数式を変数について微分する	sympy.diff(e, z)
ヒストグラムを描画して、その色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
横棒グラフの幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
折れ線グラフを描画して、その色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
文字列の左側から空白を取り除く	s.lstrip(' ')
折れ線グラフに大きさnのバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
ヒストグラムを描画して、その色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
破線グラフの色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
８進数字を全部使う	string.octdigits
グラフの用途を画面に設定する	sns.set(context='notebook')
ヒストグラムを描画して、その色をブラックに設定する	plt.hist(データ列, color='black')
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
本日の日付時刻	datetime.datetime.today()
データ列の値が欠損値か調べる	ds.isna()
全ての空白文字	string.whitespace
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
ヒストグラムを描画して、その色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
標準入力から1文字だけ読む	sys.stdin.read(1)
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
リストとリストについての散布図を暗い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
＜オプション＞シアン色を使う	color = 'cyan'
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
チョコレート色の線グラフを描画する	plt.plot(データ列, データ列2, color='chocolate')
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
両端キューの要素をインプレースに反転する	deq.reverse()
イテラブルを集合に変換する	set(iterable)
ファイルのファイル名	os.path.basename(filepath)
データ列をカテゴリデータに変換する	ds.astype(object)
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
＜オプション＞アクアマリン色を使う	color = 'aquamarine'
ヒストグラムを描画して、その色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
ミディアムパープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumpurple')
横棒グラフを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
データフレームのカラムのどの値が頻出か見る	df[col].mode()
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
全要素を０で初期化された８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
データフレームに重複があるか見る	df.duplicated()
データ列を折れ線グラフに描画して、マーカーをダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
濃いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
折れ線グラフを描画して、その色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
＜オプション＞グラフの色をダークオレンジに設定する	color = 'darkorange'
ヒストグラムの色を黄色くする	plt.hist(データ列, color='y')
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
暗い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
リストとリストの青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
濃いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
カウンタをリストに変換する	list(aCounter)
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
リストとリストについて淡い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
実数の逆余弦	math.acos(x)
実数の整数部	math.modf(x)[1]
折れ線グラフを描画して、その色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
折れ線グラフの色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
カラーコードの下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
散布図にダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D')
1からNまでの配列	np.arange(1, N+1)
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
ファイルをクローズする	f.close()
折れ線グラフに緑色の星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
カデットブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='cadetblue')
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
折れ線グラフを描画して、その色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
リストを暗い色のヒストグラムで描画する	plt.hist(xdata, color='dark')
実数の正接の逆数	math.atan(x)
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
グラフの色を淡くする	sns.set(pallete='muted')
折れ線グラフを描画して、その色を赤に設定する	plt.plot(データ列, データ列2, color='red')
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
ヒストグラムを描画して、その色をライムに設定する	plt.hist(データ列, color='lime')
＜オプション＞欠損値を先頭にする	na_position = 'first'
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
真上位集合か調べる	aSet > aSet2
データフレームのカラムを100の位で丸める	df[col].round(-2)
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
リストを色差別ない色のヒストグラムで描画する	plt.hist(xdata, color='colorblind')
色差別ないグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
黒い下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='k')
折れ線グラフの色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
リストを引数として展開して表示する	print(*aList, sep=',')
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
両端キューをデキューする	deq.popleft()
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
データ列が何秒か見る	ds.dt.second
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
カラーバーを付ける	plt.colorbar()
＜オプション＞改行しない	end = ''
要素∈集合	element in aSet
折れ線グラフを描画して、その色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
nかつn2	n and n2
タプルをnからナンバリングする	enumerate(aTuple, start=n)
リストとリストについて散布図を描画して、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
ヒストグラムを描画して、その色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフを描画して、その色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
配列を2次元1列に変形する	aArray.reshape(-1, 1)
グリーンイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='greenyellow')
モジュールを検索するパス	sys.path
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
タプルをn倍する	aTuple * n
ヒストグラムを描画して、その色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
整数nの二進表現	bin(n)
データ列のユニークな値の個数	ds.nunique()
散布図のマーカーの大きさを指定する	plt.scatter(xdata, ydata, s=n)
タプルの中の最大値	max(aTuple)
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
青緑色の線グラフを描画する	plt.plot(データ列, データ列2, color='teal')
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
二変数の最大値	max(x, y)
集合が空でないか調べる	len(aSet) != 0
＜オプション＞グラフの色をシャルトリューズに設定する	color = 'chartreuse'
nが1、もしくは2か調べる	n == 1 or n == 2
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
全要素を０で初期化された複素数型の行列	np.zeros(行数, 列数, dtype=bool)
折れ線グラフを描画して、その色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
グラフの見栄えを良くする	import seaborn as sns
JSONを使う	import json
＜オプション＞グラフの色をオリベドラブに設定する	color = 'olivedrab'
等差数列から整数乱数を生成する	random.randrange(start, end, step)
行列の行ごとの分散	np.var(aArray, axis=1)
全ての十六進数字	string.hexdigits
＜オプション＞ダークグレー色を使う	color = 'darkgrey'
＜オプション＞ダークシアグリーン色を使う	color = 'darkseagreen'
全ての８進数字	string.octdigits
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
データ列の平均値	ds.mean()
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
イテラブルからサンプリングする	random.sample(iterable)
文字列がタプルの要素か調べる	element in aTuple
整数nを二進文字列に変換する	bin(n)[2:]
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
折れ線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
折れ線グラフを描画して、その色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
＜オプション＞線幅をnに設定する	linewidth = n
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
データフレームから列名を複数指定して選択する	df[columns]
濃いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
文字列を正規表現で分割する	re.split(pattern, s)
ヒストグラムを描画して、その色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
文字列をゼロ埋めする	s.zfill(文字列幅)
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
オブジェクトが関数か調べる	callable(obj)
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
折れ線グラフに線幅nの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
ヒストグラムを描画して、その色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
リストとリストについての散布図を大きさnで描画する	plt.scatter(xdata, ydata, s=n)
リストを展開してプリントする	print(*aList)
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
オプションで、標準出力に出力する	file = sys.stdout
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
折れ線グラフの色を黄色くする	plt.plot(データ列, データ列2, color='y')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
グラフのサイズを横width縦heightに設定する	plt.figure(figsize=(width, height))
データフレームのn行以降抽出する	df[n:]
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列, データ列2, marker='D')
折れ線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
データ列の曜日の名前	ds.dt.weekday_name
データ列をインポートする	import pandas as pd
＜オプション＞パープル色を使う	color = 'purple'
オリーブ色の線グラフを描画する	plt.plot(データ列, データ列2, color='olive')
スラグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slategrey')
xを整数に変換する	int(x)
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
文字コードに対応する文字	chr(unicode)
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ヒストグラムを描画して、その色をグレーに設定する	plt.hist(データ列, color='gray')
データフレームの欠損値をxで埋める	df.fillna(x)
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
＜オプション＞スラッシュをセパレータで使う	sep = '/'
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
十六進文字列を整数に変換する	int(s, 16)
nの各桁の総和	sum(map(int, str(n)))
＜オプション＞プラム色を使う	color = 'plum'
カラーコードのポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
ヒストグラムを描画して、その色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
実数の双曲線余弦	math.cosh(x)
nとn2の排他的論理和	n ^ n2
シャルトリューズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='chartreuse')
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
表データを使う	import pandas as pd
折れ線グラフの色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
エンコーディング	sys.getdefaultencoding()
リストの合計値	sum(aList)
ファイルからの入力ストリームを使う	open(filepath)
データフレームのリストカラムの歪度	df[aList].kurt()
＜オプション＞シエナ色を使う	color = 'sienna'
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ヒストグラムを描画して、その色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
三つの文字列を順にプリントする	print(value, value2, value3)
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
文字列の先頭から部分文字列を探す	s.find(sub)
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
集合をイミュータブルに変換する	frozenset(aSet)
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
nが偶数か調べる	n % 2 == 0
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
オプションで、標準エラーを使う	file = sys.stderr
実数の双曲線正接の逆数	math.atanh(x)
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
実数が整数か調べる	x.is_integer()
＜オプション＞スチールブルー色を使う	color = 'steelblue'
＜オプション＞小麦色色を使う	color = 'wheat'
方程式の解	sympy.solve(e)
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
ポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.')
綺麗なグラフを使う準備をする	import seaborn as sns
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
ライトサーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightsalmon')
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
データフレームを10の位で丸める	df.round(-1)
本日の曜日を整数で使う	datetime.datetime.today().weekday()
バイトオーダを知る	sys.byteorder
日付データが月曜日か調べる	aDate.weekday() == 0
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
折れ線グラフを描画して、その色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
グラフの色を明るくする	sns.set(pallete='bright')
＜オプション＞グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
データ列を折れ線グラフに描画して、マーカーを右三角印にする	plt.plot(データ列, データ列2, marker='>')
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
データフレームをJSONLファイルに保存する	df.to_excel(filename)
文字列の先頭から空白を取り除く	s.lstrip()
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
散布図に黒い下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='k')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
パープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='purple')
折れ線グラフを描画して、その色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
折れ線グラフの丸マーカーを青くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
整数nを十六進文字列に変換する	hex(n)[2:]
原点から(実数,y)の距離	math.hypot(x, y)
長さnのリスト	[0] * n
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
＜オプション＞ディムグレー色を使う	color = 'dimgray'
ロードされたモジュールの一覧	sys.modules
データフレームの行と列を入れ替える	df.T
文字列が全て大文字か調べる	s.isupper()
折れ線グラフの星マーカーを黄色くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
折れ線グラフを描画して、その色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
オブジェクトのバイトサイズ	sys.getsizeof(obj)
データ列を使う	import pandas as pd
リストとリストについての散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
nをn2で割る	n / n2
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
折れ線グラフを描画して、その色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
プログラムの実行を異常終了する	sys.exit(1)
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
二つのリストから辞書	dict(zip(aList, aList2))
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
ヒストグラムを描画して、その色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
標準入力から1行読み取る	input()
浮動小数点数の最小値	sys.float_info.min
データ列を丸めて、整数型にする	ds.round().astype(int)
データフレームを列によってまとめたグループ	df.groupby(column)
ヒストグラムを描画して、色を赤くする	plt.hist(データ列, color='r')
実数を百の位で丸める	round(x, -2)
濃い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightsteelblue')
実数の複素数	complex(x)
散布図にカラーコードの丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c=rgb)
nを切り捨てながらn2分の一にする	n //= n2
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
浮動小数点数の最大値	sys.float_info.max
データフレームをインデックスによってソートする	df.sort_index()
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
タプルを引数として展開して表示する	print(*aTuple, sep=',')
＜オプション＞ラベンダーブラッシュ色を使う	color = 'lavenderblush'
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
データフレームのカラムが何日か見る	df[col].dt.day
シエナ色の線グラフを描画する	plt.plot(データ列, データ列2, color='sienna')
日付データが何年か知る	aDate.year
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
配列の次元数	aArray.ndim
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
要素が集合のメンバーか調べる	element in aSet
文字列が文字列より辞書順で後か調べる	s > s2
ヒストグラムを描画して、その色をラベンダーに設定する	plt.hist(データ列, color='lavender')
乱数シードを初期化する	random.seed()
折れ線グラフのスタイルを一点鎖線に設定する	plt.plot(データ列, データ列2, linestyle='dashbot')
＜オプション＞コーンフラワーブルー色を使う	color = 'cornflowerblue'
＜オプション＞インディゴ色を使う	color = 'indigo'
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
パステル調のグラフの色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
＜オプション＞オレンジレッド色を使う	color = 'orangered'
リストとリストについて暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
折れ線グラフを描画して、その色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
折れ線グラフの色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
＜オプション＞グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
要素が辞書の値として含まれているか調べる	element in aDict.values()
＜オプション＞グラフの色をベージュに設定する	color = 'beige'
グラフの描画でパステル調のカラーパレットを使う	sns.set(pallete='pastel')
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
辞書の値の一覧	aDict.values()
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列, データ列2, color='papayawhip')
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
＜オプション＞モカシン色を使う	color = 'moccasin'
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
データフレームのカラムの曜日数	df[col].dt.dayofweek
ヒストグラムを描画して、その色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
イテラブルから重複を取り除く	set(iterable)
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
＜オプション＞ライトグリーン色を使う	color = 'lightseagreen'
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
＜オプション＞セパレータをカンマにする	sep = ','
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
＜オプション＞大バツマーカーを描画する	marker = 'X'
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
折れ線グラフの色を白くする	plt.plot(データ列, データ列2, color='w')
＜オプション＞スカイブルー色を使う	color = 'skyblue'
＜オプション＞エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
第二引数で指定されたファイルの名前	sys.argv[1]
ヒストグラムを描画して、その色を青に設定する	plt.hist(データ列, color='blue')
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgoldenrod')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
現在の秒数	datetime.date.today().second
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
全要素を0で初期化された配列	np.zeros(要素数)
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
＜オプション＞ダークシアン色を使う	color = 'darkcyan'
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
ヒストグラムを描画して、その色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
整数nを半分にする	n //= 2
＜オプション＞グラフの色をグリーンに設定する	color = 'green'
＜オプション＞ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
データ列を折れ線グラフに描画して、マーカーを大バツ印にする	plt.plot(データ列, データ列2, marker='X')
＜オプション＞青色を使う	color = 'blue'
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
文字列を積極的に小文字に変換する	s.casefold()
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
折れ線グラフの色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
ヒストグラムを描画して、その色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslateblue')
折れ線グラフを描画して、その色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
折れ線グラフの色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
ヒストグラムを描画して、その色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
明るいグラフの色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
ヒストグラムを描画して、その色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
タプルの要素をソートする	sorted(aTuple)
ヒストグラムを描画して、その色をスノーに設定する	plt.hist(データ列, color='snow')
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumorchid')
日付時刻データが何日か知る	aDatetime.day
実数の双曲線余弦の逆数	math.acosh(x)
折れ線グラフのスタイルを破線に設定する	plt.plot(データ列, データ列2, linestyle='dashed')
空白文字を全部使う	string.whitespace
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
データフレームのカラムの要約統計量	df[col].describe()
折れ線グラフを描画して、その色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
＜オプション＞線種を破線に設定する	linestyle = 'dashed'
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
プログラムの実行を正しく終了する	sys.exit(0)
折れ線グラフを描画して、その色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
辞書の値を列挙する	aDict.values()
オブジェクトは集合クラスか調べる	isinstance(obj, set)
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
折れ線グラフを描画して、その色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
＜オプション＞グラフの色をライトサーモンに設定する	color = 'lightsalmon'
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
＜オプション＞インデックスを自動的な連番に設定する	index_col = None
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
キーが辞書に存在するか調べる	key in aDict
ヒストグラムを描画して、半透明ににする	plt.hist(データ列, alpha=0.5)
折れ線グラフを一点鎖線で描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
＜オプション＞グラフの色をスチールブルーに設定する	color = 'steelblue'
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
折れ線グラフに線幅nのダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
＜オプション＞貝殻色を使う	color = 'seashell'
データフレームの列の名前を列挙する	df.columns
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
データ列のどの値が頻出か見る	ds.mode()
nとn2の和	n + n2
リストが空か調べる	len(aList) == 0
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
＜オプション＞暗い赤色を使う	color = 'darkred'
ヒストグラムを描画して、色を白くする	plt.hist(データ列, color='w')
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
＜オプション＞ペールグリーン色を使う	color = 'palegreen'
本日が何月か知る	datetime.datetime.today().month
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
ヒストグラムを描画して、その色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
＜オプション＞追加モードに設定する	mode = 'a'
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
タプルとタプルを連結する	aTuple + aTuple2
xを整数に変換する	int(x)
＜オプション＞カデットブルー色を使う	color = 'cadetblue'
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
space	' '
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightslategray')
インディゴ色の線グラフを描画する	plt.plot(データ列, データ列2, color='indigo')
マゼンタ色の線グラフを描画する	plt.plot(データ列, データ列2, color='magenta')
ヒストグラムを描画して、その色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
グラフを描画する準備をする	from sympy import N
カウンタを高頻出方から列挙する	aCounter.most_common()
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
リストを横軸と指定して、折れ線グラフを描画する	plt.plot(range(len(xdata)), xdata)
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
データ列が何時か見る	ds.dt.hour
ヒストグラムを描画して、その色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
実数の天井	math.ceil(x)
nとn2の積	n * n2
文字列をセンタリングにする	s.center(文字列幅)
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
三自然数の最大公約数	math.gcd(n, n2, n3)
折れ線グラフの色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
標準出力を得る	sys.stdout
文字列の右側から改行を取り除く	s.rstrip('\n')
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
折れ線グラフの色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
＜オプション＞グラフの色をダークサーモンに設定する	color = 'darksalmon'
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
nかけるn2	n * n2
ホットピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='hotpink')
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
配列が何次元か	aArray.ndim
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='goldenrod')
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
＜オプション＞ダークグリーン色を使う	color = 'darkgreen'
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
折れ線グラフのバツマーカーを緑色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
文字列の開始位置から部分文字列を探す	s.find(sub, start)
折れ線グラフを描画して、その色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
タプルの平均値	sum(aTuple)/len(aTuple)
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
リストを逆順にする	aList[::-1]
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
＜オプション＞ライトブルー色を使う	color = 'lightblue'
色差別ないグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
ヒストグラムを描画して、色を黄色くする	plt.hist(データ列, color='y')
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
＜オプション＞グラフの色をスプリンググリーンに設定する	color = 'springgreen'
n割るn2の切り上げ	(n + n2 - 1) // n2
散布図に赤い四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c='r')
逆順の両端キュー	reversed(deq)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
二変数の最小値	min(x, y)
実数を実数で割った剰余	math.remainder(x, x2)
システム時刻で乱数を初期化する	random.seed()
折れ線グラフを描画して、その色をミディアムシアグリーンに設定する	plt.plot(データ列, データ列2, color='mediumseagreen')
折れ線グラフのマーカーをポイントにする	plt.plot(データ列, データ列2, marker='.')
配列の累積積	np.cumprod(aArray)
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
二つのデータ列を並べてヒストグラムにする	plt.hist([データ列, データ列2], color=['b', 'r'])
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
空列	[]
ネイビー色の線グラフを描画する	plt.plot(データ列, データ列2, color='navy')
紺碧色の線グラフを描画する	plt.plot(データ列, データ列2, color='azure')
実数の三乗	x ** 3
nがn2と等しいか調べる	n == n2
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
最大長nの両端キューを作る	collections.deque(maxlen=n)
文字列の末尾から部分文字列を探す	s.rfind(sub)
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
＜オプション＞読み込みモードを使う	mode = 'r'
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
nをn2で割った余りをnに代入する	n %= n2
データフレームを'A'列によってソートする	df.sort_values(by='A')
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
ベージュ色の線グラフを描画する	plt.plot(データ列, データ列2, color='beige')
サンディーブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='sandybrown')
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
データフレームのインデックスがnの行を抽出する	df.loc[n]
折れ線グラフの色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
カラーコードの左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
データフレームの列をインデックスに設定する	df.set_index(column)
ラベンダー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lavender')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
ヒストグラムを描画して、その色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
散布図に四角マーカーを使う	plt.plot(xdata, ydata, marker='s')
乱数シードをnで初期化する	random.seed(n)
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
データフレームから最初の列を除く	df[df.columns[1:]]
nが-9以上、9以下か調べる	-9 <= n <= 9
両端キューから最初の要素を取り除く	deq.remove(element)
データフレームのリストカラムの要約統計量	df[aList].describe()
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
現在のミリ秒	int(time.time() * 1000)
ヒストグラムを描画して、その色をゴールドに設定する	plt.hist(データ列, color='gold')
折れ線グラフを描画して、その色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
全要素を1で初期化された配列	np.ones(要素数, dtype=np.int)
Pythonのバージョン	sys.version
エラーを出力する	sys.stderr
配列をヒストグラムで可視化する	plt.hist(aArray)
折れ線グラフを描画して、その色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
折れ線グラフを描画して、その色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
＜オプション＞グラフの色をスレートブルーに設定する	color = 'slateblue'
データフレームから列を二つ選択する	df[[column, column2]]
文字列がタプルに含まれるか調べる	element in aTuple
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
日付時刻データの秒数	aDatetime.second
日付データが木曜日か調べる	aDate.weekday() == 3
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
グラフの見栄えを綺麗にする	import seaborn as sns
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
＜オプション＞セパレータを改行にする	sep = '\n'
白色の線グラフを描画する	plt.plot(データ列, データ列2, color='white')
二点間のユークリッド距離	math.dist(point, point2)
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
実数の指数	math.frexp(x)[1]
＜オプション＞グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
xとyの商と余りを同時に求める	divmod(x, y)
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
分子割る分母	fractions.Fraction(分子, 分母)
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
グラフの描画で暗いカラーパレットを使う	sns.set(pallete='dark')
日付時刻データの時刻	aDatetime.time()
ヒストグラムを描画して、その色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
文字列がタプルに含まれないか調べる	element not in aTuple
ヒストグラムを描画して、その色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
カウンタ同士でユニオン	aCounter | aCounter2
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
＜オプション＞グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
文字列が部分文字列で終わるか調べる	s.endswith(sub)
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
文字列を空白で区切って、文字列リストに変換する	s.split()
散布図に黒い三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='k')
実数の小数部	math.modf(x)[0]
＜オプション＞データ型を指定する	dtype = np.int8
黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
リストとリストの青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
リストの要素を昇順にソートする	sorted(aList, reverse=True)
グレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='grey')
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
ヒストグラムを描画して、その色をターコイズに設定する	plt.hist(データ列, color='turquoise')
データ列をヒストグラムで可視化する	plt.hist(ds)
ふたつのリストの積集合	list(set(aList) & set(aList2))
集合をタプルに変換する	tuple(aSet)
ヒストグラムを描画して、その色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
xのハッシュ値	hash(x)
リストとリストの黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
折れ線グラフを描画して、その色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
二次元リストをフラット化する	sum(aList)
散布図に黒い大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='k')
データフレームの値が欠損値か調べる	df.isna()
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
＜オプション＞下三角マーカーを描画する	marker = 'v'
＜オプション＞グラフの色をマゼンタに設定する	color = 'magenta'
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
折れ線グラフの星マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
リストとリストの黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
データ列の分	ds.dt.minute
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
＜オプション＞ライムグリーン色を使う	color = 'limegreen'
行列の列ごとの分散	np.var(aArray, axis=0)
折れ線グラフを描画して、その色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
折れ線グラフの色を赤に設定する	plt.plot(データ列, データ列2, color='red')
折れ線グラフの色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
辞書のキーの値	aDict[key]
＜オプション＞ブラック色を使う	color = 'black'
データフレームの平均値	df.mean()
辞書のキーに対応した値	aDict.get(key)
書式をargsを引数としてフォーマットする	formatText.format(*args)
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
色差別ないグラフの色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
＜オプション＞オリベドラブ色を使う	color = 'olivedrab'
カーキ色の線グラフを描画する	plt.plot(データ列, データ列2, color='khaki')
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
＜オプション＞グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
棒グラフを描画して、グラフ幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
リストとリストの青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
日付時刻データの時間数	aDatetime.hour
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
整数nをn2分の一にする	n //= n2
文字列を最後の部分文字列で二分する	s.rpartition(sub)
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
ダークサーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darksalmon')
＜オプション＞ミッドナイトブルー色を使う	color = 'midnightblue'
データ列の中の欠損値の合計を数える	ds.isna().sum()
赤い右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='r')
折れ線グラフを描画して、その色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
散布図にパステル調の色のマーカーを使う	plt.plot(xdata, ydata, c='pastel')
＜オプション＞改行の代わりに文字列を用いる	end = s
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
二つのカウンタの共通する要素	aCounter & aCounter2
イテラブルをカウンタに変換する	collections.Counter(iterable)
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
折れ線グラフの四角マーカーを青くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
色差別ない色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列, データ列2, color='lavenderblush')
＜オプション＞バリーウッド色を使う	color = 'burlywood'
2を底とする実数の対数	math.log2(x)
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
データ列を10の位で丸める	ds.round(-1)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
グラフのカラーパレットをpalleteNameで指定する	sns.set(pallete=palleteName)
三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^')
折れ線グラフを描画して、その色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
ヒストグラムを描画して、その色をシアンに設定する	plt.hist(データ列, color='cyan')
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
青い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='b')
明るい色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
集合のイミュータブル版	frozenset(aSet)
リストをビン分割する	pd.cut(aList, aList)
折れ線グラフの色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
nの無限数列	itertools.repeat(n)
折れ線グラフのマーカーを三角にする	plt.plot(データ列, データ列2, marker='^')
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
折れ線グラフを描画して、その色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
整数nを十六進表現に変換する	hex(n)
データフレームのカラムの秒	df[col].dt.second
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
文字列をキャピタライズする	s.capitalize()
＜オプション＞グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
整数nの十六進表現	hex(n)
＜オプション＞グラフの色を青紫に設定する	color = 'violet'
ヒストグラムを描画して、その色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
第一引数で指定されたファイルの名前	sys.argv[1]
折れ線グラフのバツマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='x', markersize=n)
折れ線グラフを描画して、その色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
リストとリストについて散布図を描画して、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
配列の列ごとの平均値	np.mean(aArray, axis=0)
xが-9以上、9以下か調べる	-9 <= x <= 9
リストとリストの黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
データフレームのstart行目からend行目まで抽出する	df[start:end]
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
＜オプション＞グラフの色をホットピンクに設定する	color = 'hotpink'
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
折れ線グラフの大バツマーカーを緑色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='g')
データ列が何年か見る	ds.dt.year
リストとリストについて明るい色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
＜オプション＞耐火レンガ色を使う	color = 'firebrick'
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
散布図にポイントマーカーを使う	plt.plot(xdata, ydata, marker='.')
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
ダークグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgreen')
要素∉集合	element not in aSet
改行なしに二つの文字列をプリントする	print(value, value2, end='')
nをn2だけ右シフトする	n >> n2
両端キューのn番目に要素を挿入する	deq.insert(n, element)
商と余りを同時に計算する	divmod(x, y)
＜オプション＞紺碧色を使う	color = 'azure'
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
タプルを引数として展開して表示する	print(*aTuple)
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
データフレームのカラムの分	df[col].dt.minute
正規表現モジュールをインポートする	import re
文字列を青色にする	f'\033[34m{value}\033[0m'
ヒストグラムを描画して、その色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
散布図にカラーコードの三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c=rgb)
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
nまでの偶整数列	list(range(2, n, 2))
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
リストの中の最小値	min(aList)
nからn2の値を引いてnに代入する	n -= n2
＜オプション＞グラフの色をペルーに設定する	color = 'peru'
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
nの桁数	len(str(n))
データフレームの中の欠損値がある行を削除する	df.dropna()
両端キューをポップする	deq.pop()
暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
ダークバイオレット色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkviolet')
アルファベットの文字列	string.ascii_letters
折れ線グラフを描画して、その色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
リネン色の線グラフを描画する	plt.plot(データ列, データ列2, color='linen')
＜オプション＞ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
辞書に要素をキーとして加える	aDict[key] = element
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
nullに等しい値	None
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
＜オプション＞グラフの色をミスティローズに設定する	color = 'mistyrose'
＜オプション＞タブをセパレータで使う	sep = '\t'
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
データ列の要約統計量	ds.describe()
＜オプション＞パパイヤウィップ色を使う	color = 'papayawhip'
文字列を下線付きにする	f'\033[4m{value}\033[0m'
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
リストとリストについて破線グラフを描画して、その色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='k')
nからn2までの整数列	list(range(n, n2+1))
ヒストグラムを描画して、その色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
無限にカウントアップする	itertools.count()
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
コーンズシルク色の線グラフを描画する	plt.plot(データ列, データ列2, color='cornsilk')
辞書のキーの一覧	aDict.keys()
日付データと日付データの時間差	aDate - aDate2
＜オプション＞エンコーディングをEUCに設定する	encoding = 'euc_jp'
＜オプション＞ダークスラテグレー色を使う	color = 'darkslategray'
カウンタの上位を列挙する	aCounter.most_common(k)
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
リストの要素を昇順にソートする	sorted(aList, reverse=False)
データ列の月	ds.dt.month
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
ヒストグラムを描画して、その色をプラムに設定する	plt.hist(データ列, color='plum')
折れ線グラフの星マーカーを緑色にする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
実数の小数点以下を丸める	round(x)
nからn2までのstepごとによるスライス	slice(n, n2, step)
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
青紫色の線グラフを描画する	plt.plot(データ列, データ列2, color='violet')
散布図にカラーコードのバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c=rgb)
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
＜オプション＞グラフの色をミディアムブルーに設定する	color = 'mediumblue'
行列の行	aArray[行番号]
1からnまでの整数列	list(range(1, n+1))
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
実数のn乗して実数による余り	pow(x, n, y)
日付データの日数	aDate.day
散布図に黒い四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c='k')
＜オプション＞ミディアムスレートブルー色を使う	color = 'mediumslateblue'
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
＜オプション＞グラフの色をインディゴに設定する	color = 'indigo'
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
辞書のキーとその値をペアとして取り出す	aDict.items()
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
＜オプション＞シルバー色を使う	color = 'silver'
＜オプション＞グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
＜オプション＞ブランチドアーモンド色を使う	color = 'blanchedalmond'
配列を平坦化する	aArray.flatten()
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
リストとリストの折れ線グラフを描画して、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
実数の正接	math.tan(x)
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
データフレームのカラムの標本標準偏差	df[col].std()
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
折れ線グラフの色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
ブラック色の線グラフを描画する	plt.plot(データ列, データ列2, color='black')
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
ヒストグラムを描画して、その色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
データ列の最頻値	ds.mode()
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
＜オプション＞ドジャーブルー色を使う	color = 'dodgerblue'
正規表現を使う	import re
＜オプション＞グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
黒い星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c='k')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
データフレームから数値データの列を抽出する	df.select_dtypes('number')
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
折れ線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
リストをランダムにシャッフルする	random.shuffle(aList)
文字列が全て英数字か調べる	s.isalnum()
nまでの奇整数列	list(range(1, n, 2))
上位集合もしくは等しいか調べる	aSet > aSet2
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
ヒストグラムを描画して、その色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
ビン数nのヒストグラムを描画する	plt.hist(データ列, bins=n)
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
辞書にキーワード引数で更新する	aDict.update(**kwargs)
折れ線グラフを描画して、その色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
＜オプション＞グレー色を使う	color = 'grey'
nがn2より小さいか調べる	n < n2
リストから配列を作る	np.array(aList)
nをn2で整数除算する	n // n2
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
xが真か調べる	bool(x)
棒グラフを積み上げにする	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
パステル調のグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='pastel', color='r')
乱数シードをnで固定する	random.seed(n)
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
実数が正の数か調べる	x > 0
xを論理値に変換する	bool(x)
両端キューに要素をエンキューする	deq.appendleft(element)
文字列の長さ	len(s)
＜オプション＞EUCを使う	encoding = 'euc_jp'
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
タプルをひとつ置きに取り出す	aTuple[::2]
＜オプション＞レベッカパープル色を使う	color = 'rebeccapurple'
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
現在の時間数	datetime.date.today().hour
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
文字列の大文字と小文字を交換する	s.swapcase()
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
データフレームの末尾	df.tail()
＜オプション＞整数型を使う	dtype = np.int
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
リストとリストについての散布図にカラーコードの右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
折れ線グラフのポイントマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
折れ線グラフを描画して、その色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列, データ列2, color='whitesmoke')
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
耐火レンガ色の線グラフを描画する	plt.plot(データ列, データ列2, color='firebrick')
＜オプション＞白色を使う	color = 'white'
折れ線グラフを描画して、その色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
折れ線グラフを描画して、その色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
ユーザの入力を整数として受け取る	int(input())
ファイルに文字列を書き込む	f.write(s)
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
折れ線グラフの色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
リストとリストについての散布図にカラーコードのバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
ヒストグラムを半透明にする	plt.hist(データ列, alpha=0.5)
ファイルが存在しないか調べる	not os.path.exists(filepath)
ファイルを追加モードでオープンする]	open(filepath, mode='a')
ゼロ埋めされた配列	np.zeros(要素数)
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
xを浮動小数点数型に変換する	float(x)
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
ヒストグラムを描画して、その色をデピンクに設定する	plt.hist(データ列, color='deeppink')
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
＜オプション＞マーカーを左三角に変更する	marker = '<'
リストとリストについての散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
ガンマ関数の値	math.gamma(x)
＜オプション＞グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
＜オプション＞改行コードをWindowsに設定する	newline = '\r\n'
折れ線グラフを描画して、その色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
＜オプション＞８ビット整数型を使う	dtype = np.int8
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
実数が無限大か調べる	math.isinf(x)
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
nが一桁の数か調べる	0 <= n <= 9
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
＜オプション＞フクシア色を使う	color = 'fuchsia'
プログラムのファイルの名前	sys.argv[0]
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
文字列は全て数値か調べる	s.isnumeric()
要素ひとつのりスト	[element]
＜オプション＞グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
＜オプション＞ポイントマーカーを描画する	marker = '.'
ゲインズボロ色の線グラフを描画する	plt.plot(データ列, データ列2, color='gainsboro')
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
折れ線グラフの四角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
＜オプション＞グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
＜オプション＞アクア色を使う	color = 'aqua'
全要素を初期値で初期化された配列	np.full(要素数, 初期値, dtype=np.int)
＜オプション＞ラベンダー色を使う	color = 'lavender'
折れ線グラフを描画して、その色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
データフレームのカラムの歪度	df[col].kurt()
折れ線グラフに線幅nの丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
＜オプション＞グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
折れ線グラフの大バツマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
文字列の変数名を数式に変換する	sympy.Symbol(s)
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
未定値	None
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
二つの文字列は等しくないか調べる	s != s2
折れ線グラフの丸マーカーを緑色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='g')
点線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dotted')
＜オプション＞グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
オプションで、ファイルを使う	file = sys.open(filename, 'w')
下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v')
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
データ列の中央値	ds.median()
要素が集合に含まれるか調べる	element in aSet
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='cornflowerblue')
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
nを否定する	not n
データ列をヒストグラムにする	plt.hist(ds)
折れ線グラフに緑色のバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
カウンタの最頻出な項目	aCounter.most_common()[0]
折れ線グラフの色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
自然数の最大公約数	math.gcd(n, n2)
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
折れ線グラフに緑色の下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
データフレームの数値をまとめて丸める	df.round()
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
三変数の最大値	max(x, y, z)
＜オプション＞グラフの色をチョコレートに設定する	color = 'chocolate'
ダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D')
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
カウンタ同士でユニオン演算する	aCounter | aCounter2
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
データフレームを列によってソートする	df.sort_values(by=column)
ヒストグラムを描画して、その色をトマトに設定する	plt.hist(データ列, color='tomato')
データ列が何日か見る	ds.dt.day
ヒストグラムを描画して、その色をリネンに設定する	plt.hist(データ列, color='linen')
ファイル名がJSONファイルか調べる	filename.endswith('.json')
折れ線グラフを描画して、その色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
散布図に左三角マーカーを使う	plt.plot(xdata, ydata, marker='<')
実数のk進対数	math.log(x, k)
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
透明度alphaの折れ線グラフを描画する	plt.plot(xdata, ydata, alpha=alpha)
nが5で割り切れるか調べる	n % 5 == 0
データフレームを100の位で丸める	df.round(-2)
折れ線グラフの色を黒くする	plt.plot(データ列, データ列2, color='k')
ヒストグラムを描画して、その色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
＜オプション＞ローングリーン色を使う	color = 'lawngreen'
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
シルバー色の線グラフを描画する	plt.plot(データ列, データ列2, color='silver')
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
＜オプション＞グラフの色をライムグリーンに設定する	color = 'limegreen'
ヒストグラムを描画して、ビン数をnに設定する	plt.hist(データ列, bins=n)
折れ線グラフのダイアモンドマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
＜オプション＞ベージュ色を使う	color = 'beige'
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
nをn2倍にする	n *= n2
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
日付時刻データが何時か知る	aDatetime.hour
リストとリストのカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
本日の日付時刻	datetime.datetime.now()
データ列がどの程度、分散しているか見る	ds.var()
グラフの中の縦軸にuntitledというラベルを付ける	plt.ylabel(untitled)
＜オプション＞グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
散布図に暗い色のマーカーを使う	plt.plot(xdata, ydata, c='dark')
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
＜オプション＞スレートブルー色を使う	color = 'slateblue'
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
辞書のコピー	dict(aDict)
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
辞書の項目数	len(aDict)
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
集合の濃度	len(aSet)
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
ヒストグラムを描画して、その色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
散布図に淡い色のマーカーを使う	plt.plot(xdata, ydata, c='muted')
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
データ列の歪度	ds.kurt()
カウンタを多い順に列挙する	aCounter.most_common()
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
＜オプション＞グラフの色をシアンに設定する	color = 'cyan'
データフレームの列がxでない行をフィルタする	df[df[column] == x]
リストとリストについての散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='r')
＜オプション＞グラフの色を赤に設定する	color = 'red'
折れ線グラフのスタイルを点線に設定する	plt.plot(データ列, データ列2, linestyle='dotted')
スラグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slategray')
データフレームの第三四分位数	df.quantile(0.75)
散布図に赤い下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='r')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
青いヒストグラムを描画する	plt.hist(データ列, color='b')
レベッカパープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='rebeccapurple')
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
整数nの八進文字列	oct(n)[2:]
折れ線グラフを描画して、その色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
＜オプション＞グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
ヒストグラムを描画して、その色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
リストとリストの折れ線グラフを描画して、その色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
折れ線グラフを描画して、その色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
折れ線グラフの三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
折れ線グラフに線幅nの右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
オプションで、出力先を標準出力に設定する	file = sys.stdout
ファイルにxを文字列に変換して書き込む	f.write(str(x))
データフレームのインデックスの一覧	df.index
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
リストとリストの折れ線グラフをカラーコードで描画する	plt.plot(xdata, ydata, color=rgb)
＜オプション＞左三角マーカーを使う	marker = '<'
文字列を左寄せにする	s.ljust(文字列幅)
疑似乱数を生成する	random.random()
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
イテラブルのコンビネーション	itertools.combinations(iterable, n)
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
＜オプション＞グラフの色をダークシアンに設定する	color = 'darkcyan'
データフレームのリストカラムの標本標準偏差	df[aList].std()
データフレームから指定された列を抽出する	df[[column]]
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
データ列の文字列長を列として使う	ds.str.len()
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
＜オプション＞改行なし	end = ''
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
＜オプション＞三角マーカーを描画する	marker = '^'
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
データ列とラベル列を指定して、積み上げ横棒グラフを描画する	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
数式の因数分解を行う	sympy.factor(e)
リストをナンバリングする	enumerate(aList)
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
ヒストグラムを描画して、その色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
データフレームの列を削除する	df.drop(column, axis=1)
イテラブルを累加する	itertools.accumulate(iterable)
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
破線グラフの色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
折れ線グラフのスタイルを実線に設定する	plt.plot(データ列, データ列2, linestyle='solid')
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
折れ線グラフの色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
リストとリストについて散布図を描画して、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
数式を簡略にする	sympy.sympify(e)
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
辞書をカウンタに変換する	collections.Counter(aDict)
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
リストの先頭を取り除く	aList[1:]
リストとリストの色差別ないグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
0からnの範囲	range(n)
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
リストにリストを追加して拡張する	aList.extend(aList2)
折れ線グラフに緑色の左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
グラフの文字化けを防ぐ	sns.set(font='IPAexGothic')
実数の双曲線正弦	math.sinh(x)
折れ線グラフを描画して、その色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
行列の列ごとの最大値	np.max(aArray, axis=0)
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
辞書の全項目をクリアする	aDict.clear()
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
日付時刻データをタプルに変換する	aDatetime.timetuple()
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
リストとリストについて散布図を描画して、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
文字列は全て十進数字か調べる	s.isdecimal()
日付データが何曜日か知る	aDate.weekday()
折れ線グラフを描画して、その色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
日付時刻データの日数	aDatetime.day
実数を万の位で丸める	round(x, -4)
データフレームの中で何行、重複するか見る	df.duplicated().sum()
データ列の母標準偏差	ds.std(ddof=0)
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
リストのn番目に文字列を挿入する	aList.insert(n, element)
横棒グラフの色をカラーコードに設定する	plt.barh(ラベル列, データ列, color=rgb)
＜オプション＞セパレータを使わない	sep = ''
ヒストグラムを描画して、その色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
文字列をトリムする	s.strip()
タプルの先頭のn要素を取り除く	aTuple[n:]
データフレームのリスト列の相関行列	df[aList].corr()
両端キューの大きさ	len(deq)
棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
折れ線グラフの下三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
＜オプション＞グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
＜オプション＞ヘッダを自動的な連番に設定する	header = None
折れ線グラフを描画して、その色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
一点鎖線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
＜オプション＞バッファリングのサイズを設定する	buffering = 4096
＜オプション＞ダークグレー色を使う	color = 'darkgray'
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
サイコロ	random.randint(1, 6)
事前に正規表現をコンパイルする	re.compile(pattern)
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
淡いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
何回まで再帰ができるかを	sys.getrecursionlimit()
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
ヒストグラムを描画して、その色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
ヒストグラムを描画して、その色をコーラルに設定する	plt.hist(データ列, color='coral')
散布図にカラーコードのポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c=rgb)
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
リストの文字列が最初に見つかるインデックス	aList.index(element)
データフレームを'A'列の値によってグループ化する	df.groupby('A')
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
データフレームの列の一覧	df.info()
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
現在の作業ディレクトリ	os.getcwd()
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
淡いピンク色色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightpink')
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
＜オプション＞グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
＜オプション＞グラフの色をダークターコイズに設定する	color = 'darkturquoise'
辞書からカウンタを作る	collections.Counter(aDict)
折れ線グラフに黄色い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
色差別ないグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
集合の浅いコピー	aSet.copy()
データ列の欠損値をxに設定する	ds.fillna(x)
データフレームから列を一つ選択する	df[[column]]
濃い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
青色の線グラフを描画する	plt.plot(データ列, データ列2, color='blue')
0からnまでの整数列	list(range(n+1))
＜オプション＞欠損値も無視しない	dropna = True
ヒストグラムを描画して、その色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
リストから文字列を取り除く	aList.remove(element)
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
イテラブルのイミュータブルな集合	frozenset(iterable)
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
＜オプション＞グラフの色をアリスブルーに設定する	color = 'aliceblue'
n個の整数列	list(range(n))
文字列が全て小文字か調べる	s.islower()
ヒストグラムを描画して、その色をパープルに設定する	plt.hist(データ列, color='purple')
文字列中の文字を列挙する	list(s)
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
year年month月の日付	datetime.date(year=year, month=month, day=1)
ヒストグラムを描画して、その色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
＜オプション＞グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
文字列を置き換える	s.replace(sub, newsub)
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
＜オプション＞線種を実線に設定する	linestyle = 'solid'
折れ線グラフのマーカーを四角にする	plt.plot(データ列, データ列2, marker='s')
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
赤いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='r')
nがn2で割り切れないか調べる	n % n2 != 0
等差数列を配列に変換する	np.arange(開始値, 終端値, 等差)
ヒストグラムの線のスタイルを破線に設定する	plt.hist(データ列, linestyle='dashed')
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
データ列の各データが何回出現するか見る	ds.value_counts()
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
破線グラフの色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
イテラブルからカウンタを作る	collections.Counter(iterable)
ヒストグラムを描画して、その色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
＜オプション＞グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
日付データが日付データより後ろか調べる	aDate > aDate2
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
ヒストグラムを描画して、その色を茶色に設定する	plt.hist(データ列, color='brown')
リストとリストの淡いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
nにn2を足して代入する	n += n2
グラフで使うフォントをfontNameに指定する	sns.set(font=fontName)
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumturquoise')
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
日付データが火曜日か調べる	aDate.weekday() == 1
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
散布図にカラーコードのダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c=rgb)
棒グラフを描画する	plt.bar(ラベル列, データ列)
日付時刻データの分数	aDatetime.minute
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
nをn2乗に増やす	n **= n2
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
＜オプション＞ポイントマーカーを使う	marker = '.'
赤い左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c='r')
ユーザから入力される	input()
グリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='green')
両端キューをタプルに変換する	tuple(deq)
十六進数字を全部使う	string.hexdigits
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
＜オプション＞データ型を指定する	dtype = bool
淡い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='muted')
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
折れ線グラフの下三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
＜オプション＞グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
数値の符号をコピーにする	math.copysign(x, x2)
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
nがn2よりも小さいか調べる	n < n2
折れ線グラフに線幅nの四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
＜オプション＞グラフの色をパープルに設定する	color = 'purple'
赤色の線グラフを描画する	plt.plot(データ列, データ列2, color='red')
ヒストグラムを描画して、その色を青緑に設定する	plt.hist(データ列, color='teal')
文字列を白色にする	f'\033[37m{value}\033[0m'
＜オプション＞グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
＜オプション＞昇順にする	ascending = True
＜オプション＞スラグレー色を使う	color = 'slategray'
データフレームの欠損値をxに設定する	df.fillna(x)
リストとリストについて破線グラフを描画して、その色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
TypeError: __init__() got an unexpected keyword argument 'maxdeepth'<tab>model = DecisionTreeRegressor(maxdeepth=3)	maxdeepthはスペルミス<tab>max_depth=...に直す
TypeError: '(['week_num'], ['weather_num'], ['temperature'], ['kcal'])' is an invalid key<tab>X = df[['week_num'],['weather_num'],['temperature'],['kcal']]	複数列を指定する際の個々の[]は不要<tab>df[[列名1,列名2,...]]にする
AttributeError: 'list' object has no attribute 'sorted'<tab>b=a.sorted	sortedの使い方が違う<tab>sorted(a)のように書く
ValueError: invalid literal for int() with base 10: '3 4 5'<tab>A,B,C=map(int(input()))	'3 4 5'はint型に変換できない<tab>int(input())をmap(int,input().split())に直す
TypeError: '(['犯罪率'], ['犯罪率'], ['犯罪率'])' is an invalid key<tab>X = df[[column],[column],[column]]	複数列を指定する際の個々の[]は不要<tab>df[[列名1,列名2,...]]にする
NameError: name 'FecisionTreeRegressor' is not defined<tab>model = FecisionTreeRegressor()	FecisionTreeRegressorのスペルミス<tab>De
ValueError: too many values to unpack (expected 3)<tab>N, A, B = map(str, input().split())	入力した空白区切りの文字列の個数が3個ではない<tab>入力を見直すか、コードの変数の数を入力に対応した数に変更する
NameError: name 'train_test_split' is not defined<tab>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=0)	train_test_splitをimportしていない<tab>from sklearn.model_selection import train_test_split する
NameError: name '_pred' is not defined<tab>print(_pred)	変数_predが見つからない<tab>_pred=...のように定義する
ValueError: Expected 2D array, got 1D array instead:<nl>array=[404.40963855 404.40963855 404.40963855 404.40963855 404.40963855<nl> 404.40963855 404.40963855 404.40963855 404.40963855 404.40963855<nl> 404.40963855 404.40963855 404.40963855 404.40963855 404.40963855<nl> 404.40963855 404.40963855 404.40963855 404.40963855 404.40963855<nl> 404.40963855 404.40963855 404.40963855 404.40963855 404.40963855<nl> 404.40963855 404.40963855 404.40963855 404.         462.<nl> 435.         440.         376.         450.         415.<nl> 430.         375.         447.         426.         400.<nl> 418.         415.         445.         450.         448.<nl> 460.         445.         430.         420.         435.<nl> 425.         423.         415.         438.         432.<nl> 416.         426.         405.         426.         410.<nl> 408.         396.         384.         436.         428.<nl> 407.         413.         393.         409.         396.<nl> 385.         397.         370.         372.         360.<nl> 382.         400.         392.         372.         350.<nl> 407.         392.         315.         404.40963855 349.<nl> 377.         380.         390.         350.         387.<nl> 353.         376.         362.         404.40963855 340.<nl> 370.         330.         333.         325.         375.<nl> 382.         340.         360.         404.40963855 342.<nl> 368.         415.         420.         415.         405.<nl> 434.         400.         428.         430.         403.<nl> 404.40963855 406.         425.         430.         428.<nl> 400.         430.         423.         414.         438.<nl> 404.40963855 420.         418.         424.         405.<nl> 430.         417.         426.         413.         440.<nl> 404.40963855 440.         427.         426.         430.<nl> 407.         421.         430.         420.         414.<nl> 404.40963855 435.         362.         363.         412.<nl> 432.         354.         370.         388.         386.<nl> 404.40963855 418.         324.         434.         418.<nl> 401.         409.         355.         410.         404.40963855<nl> 432.         449.         441.         386.         380.<nl> 410.         400.         410.         415.         404.40963855<nl> 411.         400.         396.         385.         423.<nl> 405.         404.40963855 412.         400.         410.<nl> 396.         398.         380.         440.         408.<nl> 405.         380.         385.         460.         450.<nl> 385.         404.40963855 438.         430.         395.<nl> 400.         395.         408.         394.         404.40963855<nl> 404.         398.        ].<nl>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.<tab>model.fit(X, y)	sklearnのfit()では、DataFrame型やnumpyの行列形式（縦ベクトル）しか使用できない<tab>二重括弧をつけるか、reshape(-1,1)をつける
"KeyError: ""['curry'] not in index""<tab>X = df_train[['year', 'month', 'day', 'week', 'soldout', 'kcal', 'payday', 'weather', 'remarks','temperature',""curry""]]"	データフレームdf_trainに列'curry'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
"KeyError: ""None of [Index(['column'], dtype='object')] are in the [columns]""<tab>X = df[['column']]  # ひとつ選ぶ"	データフレームdfに列'column'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
NameError: name 'read_csv' is not defined<tab>df = pd,read_csv('boston.csv')	pd,read_csvの,が違う<tab>pd.read_csv(ファイル名)でファイルを読み込む
AttributeError: type object 'int' has no attribute 'replace'<tab>print(int.replace('1', '9').replace('9', '1'))	int関数の使い方が違う<tab>int型にする場合はint()にする
NameError: name 'pandas' is not defined<tab>pandas.Series.value_counts()	pandasをimportしていない<tab>import pandasする
ValueError: Expected 2D array, got scalar array instead:<nl>array=0.02729.<nl>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.<tab>model.fit(X[1][2], y)	sklearnのfit()では、DataFrame型やnumpyの行列形式（縦ベクトル）しか使用できない<tab>二重括弧をつけるか、reshape(-1,1)をつける
ValueError: invalid literal for int() with base 10: '100 80'<tab>A,B=map(int(input()))	'100 80'はint型に変換できない<tab>int(input())をmap(int,input().split())に直す
ValueError: too many values to unpack (expected 2)<tab>S,T=str(input())	入力した空白区切りの文字列の個数が2個ではない<tab>入力を見直すか、コードの変数の数を入力に対応した数に変更する
NameError: name 'figsize' is not defined<tab>plt.figure(figsize[7,7])	figsizeの使い方が違う<tab>figsize=(値,値)のようにする
NameError: name 'n' is not defined<tab>a=S[-int(n):]	変数nが見つからない<tab>n=...のように定義する
NameError: name 'ansgd' is not defined<tab>N=ansgd	変数ansgdが見つからない<tab>ansgd=...のように定義する
AttributeError: 'str' object has no attribute 'splirt'<tab>A,B,C=map(int,input().splirt())	splitのスペルが違う<tab>splitに直す
KeyError: ('kcal', 'temperature')<tab>X = df['kcal','temperature']  # 価格以外を全て説明変数に	カラム名は1つしか指定できない<tab>2つ以上のカラムを取り出したい時には、二重括弧を使う
TypeError: __init__() got an unexpected keyword argument 'figuresize'<tab>plt.figure(figuresize=(6,6))	figuresizeではグラフのサイズを指定できない<tab>plt.figure(figsize=...)に直す
NameError: name 'colomn' is not defined<tab>print(f'{colomn} 決定係数(R2):', r2)	変数colomnが見つからない<tab>colomnを定義するまたはcolumnに直す
"KeyError: ""None of [Index(['価格'], dtype='object')] are in the [columns]""<tab>X = df[['価格']]  # ひとつ選ぶ"	データフレームdfに列'価格'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
NameError: name 'ausum' is not defined<tab>print(ausum)	変数ausumが見つからない<tab>ausum=...のように定義する
AttributeError: 'list' object has no attribute 'indet'<tab>i=a.indet(max(a))	indexのスペルが違う<tab>indetをindexに直す
"TypeError: can only concatenate str (not ""float"") to str<tab>print(round(X+0.5))"	Xと0.5の型が異なるので演算不可<tab>文字列または数値に揃える
AttributeError: 'float' object has no attribute 'input'<tab>N = float().input()	float型の入力コードが違う<tab>N=float(input())に直す
ValueError: invalid literal for int() with base 10: '123,234'<tab>A,B=map(int,input().split())	区切り文字の設定が','になっていない<tab>map(int,input().split())をmap(int,input().split(','))に直す
TypeError: 'str' object cannot be interpreted as an integer<tab>range('a')	rangeの中に文字列が入っている<tab>rangeの中に数値データを指定する
ValueError: Length mismatch: Expected axis has 1601 elements, new values have 41 elements<tab>df_uid_all.columns = column_list	元のデータフレームは1601列だけど与えられた要素は41個しかない<tab>要素を1601個にしよう
AttributeError: 'str' object has no attribute 'j'<tab>k_l.append([i.j])	リスト.にできない<tab>リストの中身は,を区切る
FileNotFoundError: [Errno 2] No such file or directory: 'cancer.csv'<tab>df = pd.read_csv('cancer.csv')	cancer.csvが見つからない<tab>ファイルのダウンロードし、ファイル名やファイルパスを確認をする
AttributeError: 'LinearRegression' object has no attribute 'feature_importances_'<tab>model.feature_importances_	LinearRegressionではmodel.feature_importances_は使えない<tab>モデルをDecisionTreeRegressorに変える
KeyError: ('kcal', 'weather_num', 'week_num', 'temperature')<tab>columns = df['kcal', 'weather_num', 'week_num', 'temperature']	カラム名は1つしか指定できない<tab>2つ以上のカラムを取り出したい時には、二重括弧を使う
IndexError: list index out of range<tab>if s[y][i]=='.':	リストsの指定可能なindexの範囲を超えている<tab>リストsの指定index見直す
"KeyError: ""None of [Index(['低所得'], dtype='object')] are in the [columns]""<tab>X = df[['低所得']]"	データフレームdfに列'低所得'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
AttributeError: 'DataFrame' object has no attribute 'show'<tab>df.show()	dfを表示させるプログラムが間違っている<tab>display(df)に直す（1つならdfだけでも可）
TypeError: 'builtin_function_or_method' object is not iterable<tab>a,b=map(int,input().split)	()が不足している<tab>map(int,iunput().split())にする
KeyError: ('犯罪率', '犯罪率')<tab>rho = corr(df[column,column], df['住宅価格'])	カラム名は1つしか指定できない<tab>2つ以上のカラムを取り出したい時には、二重括弧を使う
NameError: name 'info' is not defined<tab>info()	info()のみでは使用できない<tab>データフレーム名.info()にする
ValueError: could not convert string to float: '月'<tab>model.fit(X, y)	文字列を数値に変えないと処理できない<tab>文字列を数値に変えるデータ前処理を行う
AttributeError: 'DataFrame' object has no attribute 'solumns'<tab>for column in df.solumns[:-1]:	データフレームには'solumns'という要素はない<tab>df.solumns[:-1]:をdf.columns[:-1]:に直す
"KeyError: ""['教育比'] not in index""<tab>X = df[['部屋数', '教育比', '資産税']]"	データフレームdfに列'教育比'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
NameError: name 'White' is not defined<tab>print(White)	変数Whiteが見つからない<tab>White=...のように定義する
NameError: name 'blue' is not defined<tab>sns.kdeplot(df.groupby('学習時間').get_group(1)['G3'], shade = True, color = blue)	変数blueは見つからない<tab>blue=...で定義するまたは'blue'にする
"KeyError: ""['tempreture'] not in index""<tab>df[['kcal','weather_num','tempreture']]"	データフレームdfに列'tempreture'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
NameError: name 'Nan' is not defined<tab>means = Nan	変数Nanが見つからない<tab>Nan=...のように定義する
"KeyError: ""[''] not found in axis""<tab>df.drop('', axis=1, inplace=True)"	dropする列が''になっている<tab>dropする列を決めて'削除したい列名'にする
AttributeError: 'int' object has no attribute 'columns'<tab>X = df[df.columns[:-1]]	dfがint型なためcolumnsがない<tab>dfの型を見直す
"FileNotFoundError: [Errno 2] No such file or directory: '/Users:/shion/Desktop/OJT/numa-chan/train_Numa_print.csv'<tab>X_train_numa_p = pd.read_csv(""/Users:/shion/Desktop/OJT/numa-chan/train_Numa_print.csv"")"	/Users:/shion/Desktop/OJT/numa-chan/train_Numa_print.csvが見つからない<tab>ファイルのダウンロードし、ファイル名やファイルパスを確認をする
NameError: name 'column1' is not defined<tab>rho = corr(df[column1,column2], df['住宅価格'])	変数column1が見つからない<tab>column1=...のように定義する
AttributeError: 'function' object has no attribute 'split'<tab>A,B,C=map(int,input.split())	inputの後ろに()がない<tab>map(型,input(),split())に直す
TypeError: 'DataFrame' object is not callable<tab>X = df(['通勤', '教員'])  # 説明変数	データフレームからのデータの抽出方法が違う<tab>丸かっこ () を角かっこ [] に直す
NotFittedError: This DecisionTreeRegressor instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.<tab>plot_tree(model, feature_names=X.columns, filled=True)	fit<tab>
AttributeError: 'DecisionTreeRegressor' object has no attribute 'feature_inportances_'<tab>model.feature_inportances_	importances_のスペルが違う<tab>inportances_をimportances_に直す
"KeyError: ""None of [Index(['犯罪数'], dtype='object')] are in the [columns]""<tab>X = df[['犯罪数']]"	データフレームdfに列'犯罪数'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
NameError: name 'y_train' is not defined<tab>pred_sub = y_train - pred	変数y_trainが見つからない<tab>y_train...のように定義する
NameError: name 'r' is not defined<tab>X = df[[r]]	変数rが見つからない<tab>変数rを定義する
ValueError: Expected 2D array, got 1D array instead:<nl>array=[0.         0.88888889 1.77777778 2.66666667 3.55555556 4.44444444<nl> 5.33333333 6.22222222 7.11111111 8.        ].<nl>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.<tab>y_pred = model.predict(x)	sklearnのfit()では、DataFrame型やnumpyの行列形式（縦ベクトル）しか使用できない<tab>二重括弧をつけるか、reshape(-1,1)をつける
NameError: name 'DecisionTreerRegression' is not defined<tab>model = DecisionTreerRegression()	DecisionTreerRegressionが見つからない<tab>from sklearn.tree import DecisionTreeRegressorしてDecisionTreeRegressorと書く
ValueError: invalid literal for int() with base 10: ''<tab>N=int(input())	入力データがない<tab>入力データを見直す
"FileNotFoundError: [Errno 2] No such file or directory: ':/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csv'<tab>X_train_numa_p = pd.read_csv("":/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csv"")"	:/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csvが見つからない<tab>ファイルのダウンロードし、ファイル名やファイルパスを確認をする
ValueError: invalid literal for int() with base 10: 'oder'<tab>s,t=map(int,input().split())	文字列'oder'はint型に変換できない<tab>map(int,input().split())をmap(input().split())に直す
ValueError: could not convert string to float: '快晴'<tab>model.fit(X, y)	文字列を数値に変えないと処理できない<tab>文字列を数値に変えるデータ前処理を行う
KeyError: '友人と遊ぶ頻度'<tab>sns.boxplot(x=df['友人と遊ぶ頻度'], y=df['G3'])	データフレームdfに列'友人と遊ぶ頻度'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
FileNotFoundError: [Errno 2] No such file or directory: 'train_Numa_print.csv'<tab>X_train_numa_p = pd.read_csv('train_Numa_print.csv')	train_Numa_print.csvが見つからない<tab>ファイルのダウンロードし、ファイル名やファイルパスを確認をする
TypeError: unsupported operand type(s) for /: 'str' and 'int'<tab>if X / 100 == 0:	Xが文字列型になっている<tab>Xの型を数値型にする
ValueError: x and y must be the same size<tab>plt.scatter(y, y_pred, c='red', alpha=0.3)	xとyが同じサイズでない<tab>xとyの大きさを確かめる
ValueError: Found input variables with inconsistent numbers of samples: [152, 354]<tab>print('R2(訓練):', r2_score(y_train, model.predict(X_train)))	y_trainとmodel.predict(X_train)のデータの個数が異なる<tab>len(データフレーム名[列名])でそれぞれのデータの個数を確認する
NameError: name 'sort' is not defined<tab>a=sort.a	sortメソッドの呼び出し方が違う<tab>対象のリスト.sort()の形式で書く
ValueError: not enough values to unpack (expected 3, got 1)<tab>N=a,b,c=map(int,input().split())	入力した値を入れる変数は3個あるけど、実際には1個しか入力されていない<tab>入力を3個に増やすか、変数を1個に減らそう
ValueError: Length mismatch: Expected axis has 1561 elements, new values have 1601 elements<tab>df_uid_all.columns = k_l_column	元のデータフレームは1561列だけど与えられた要素は1601個ある<tab>要素を1561個にしよう
"KeyError: ""None of [Index(['教員'], dtype='object')] are in the [columns]""<tab>X = df[['教員']]  # 説明変数"	データフレームdfに列'教員'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
ValueError: not enough values to unpack (expected 6, got 4)<tab>a,b,c,d,x,y = map(int, input().split())	入力した値を入れる変数は6個あるけど、実際には4個しか入力されていない<tab>入力を6個に増やすか、変数を4個に減らそう
NameError: name 'fit' is not defined<tab>model,fit(X_train,y_train)	fitの使い方が違う<tab>カンマ, をピリオド. に直す
"UsageError: Cell magic `%%atcoderhttps://atcoder.jp/contests/abc171/tasks/abc171_` not found.<tab>get_ipython().run_cell_magic('atcoderhttps://atcoder.jp/contests/abc171/tasks/abc171_', '', ""s = 'A'\n'A' <= s <= 'Z'"")"	問題番号がない<tab>URLを見直してURLを正しく書く
NameError: name 'n0' is not defined<tab>if X%100==0 and X==n0:	変数n0が見つからない<tab>n0=...のように定義する
TypeError: 'float' object is not callable<tab>a,b,c,d=map(float(),input().split())	floatの後の()が不要<tab>floatの後の()を削除する
TypeError: '(['week'], ['y'], ['kcal'])' is an invalid key<tab>X = df[['week'],['y'],['kcal']]	複数列を指定する際の個々の[]は不要<tab>df[[列名1,列名2,...]]にする
ValueError: Invalid RGBA argument: ['red', 'blue']<tab>sns.boxplot(x=df['性別'], y=df['G3'],color=['red','blue'])	一度に複数の色は指定できない<tab>colorを分けて指定する
AttributeError: 'str' object has no attribute 'endwith'<tab>if S.endwith('er'):	endswithのスペルが違う<tab>endwithをendswithに直す
NameError: name 'array' is not defined<tab>array([19.94203311])	arrayが見つからない<tab>np.arrayにしてnumpy配列にする
NameError: name 'a2' is not defined<tab>max(a2)	変数a2が見つからない<tab>a2=...のように定義する
KeyError: '通勤時間'<tab>X = df['通勤時間']	データフレームdfに列'通勤時間'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
TypeError: __init__() got an unexpected keyword argument 'fitsize'<tab>plt.figure(fitsize=(6,6))	figusizeではグラフのサイズを指定できない<tab>plt.figure(figsize=...)に直す
ValueError: invalid literal for int() with base 10: '1]'<tab>a,b,c,d=map(int,input().split())	'1]'はint型に変換できない<tab>入力データを見直す
"KeyError: ""None of [Index(['築年数'], dtype='object')] are in the [columns]""<tab>X = df[['築年数']]"	データフレームdfに列'築年数'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
KeyError: 'weel'<tab>df['weel'].map({	データフレームdfに列'weel'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
ValueError: Found array with dim 4. Estimator expected <= 2.<tab>model.fit(X, y)	2次元以下の入力を予想したが、4次元のデータが入力された<tab>次元を見直す
EOFError:<tab>N=int(input())	入力データがない<tab>入力データを作る
KeyError: 'weather'<tab>df['weather'].map({	データフレームdfに列'weather'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
NameError: name 'R2' is not defined<tab>print(f'{column} 決定係数(R2):', R2)	変数R2が見つからない<tab>R2=...のように定義する
ValueError: invalid literal for int() with base 10: 'nikoandsolstice'<tab>k=int(input())	文字列'nikoandsolstice'はint型に変換できない<tab>int(input())をinput()に直す
ValueError: Expected 2D array, got 1D array instead:<nl>array=[404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404<nl> 404 404 404 404 404 404 404 404 404 404 404 462 435 440 376 450 415 430<nl> 375 447 426 400 418 415 445 450 448 460 445 430 420 435 425 423 415 438<nl> 432 416 426 405 426 410 408 396 384 436 428 407 413 393 409 396 385 397<nl> 370 372 360 382 400 392 372 350 407 392 315 404 349 377 380 390 350 387<nl> 353 376 362 404 340 370 330 333 325 375 382 340 360 404 342 368 415 420<nl> 415 405 434 400 428 430 403 404 406 425 430 428 400 430 423 414 438 404<nl> 420 418 424 405 430 417 426 413 440 404 440 427 426 430 407 421 430 420<nl> 414 404 435 362 363 412 432 354 370 388 386 404 418 324 434 418 401 409<nl> 355 410 404 432 449 441 386 380 410 400 410 415 404 411 400 396 385 423<nl> 405 404 412 400 410 396 398 380 440 408 405 380 385 460 450 385 404 438<nl> 430 395 400 395 408 394 404 404 398].<nl>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.<tab>model.fit(X, y)	sklearnのfit()では、DataFrame型やnumpyの行列形式（縦ベクトル）しか使用できない<tab>二重括弧をつけるか、reshape(-1,1)をつける
ValueError: could not convert string to float: '2014-2-25'<tab>model.fit(X_train,y_train)	このデータはそのまま処理できない<tab>文字列を数値に変えるデータ前処理を行う
IndexError: string index out of range<tab>s[1]	指定したindexは文字列にない<tab>文字列またはindexの値を見直す
TypeError: '(['緑地'], ['犯罪率'])' is an invalid key<tab>X=df[[column],[b]]	複数列を指定する際の個々の[]は不要<tab>df[[列名1,列名2,...]]にする
NameError: name 'Y' is not defined<tab>print(Y)	変数Yが見つからない<tab>Y=...のように定義する
NameError: name 'ba' is not defined<tab>mi=[x for x in b if a[i]-ab<=ba[i]+ab]	変数baが見つからない<tab>ba=...のように定義する
"KeyError: ""['資産'] not in index""<tab>X = df[['資産','築年']]"	データフレームdfに列'資産'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
"KeyError: ""['低所得理'] not in index""<tab>X = df[['低所得理', '資産税']]"	データフレームdfに列'低所得理'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
AttributeError: 'list' object has no attribute 'sppend'<tab>SS[0].sppend(0)	appendのスペルが違う<tab>sppendをappendに直す
ValueError: invalid literal for int() with base 10: '123,345'<tab>A,B=map(int,input().split())	区切り文字の設定が','になっていない<tab>map(int,input().split())をmap(int,input().split(','))に直す
ValueError: invalid literal for int() with base 10: 'coder'<tab>a,b= map(int,input().split())	文字列'coder'はint型に変換できない<tab>map(int,input().split())をmap(input().split())に直す
NameError: name 'LinearRegression' is not defined<tab>model = LinearRegression()	LinearRegressionをimportしていない<tab>from sklearn.linear_model import LinearRegressionする
NameError: name 'soldout' is not defined<tab>X = df[df.columns[soldout,kcal,payday,temperature]]	変数soldoutが見つからない<tab>soldout=...のように定義する
ValueError: Expected 2D array, got 1D array instead:<nl>array=[6.575 6.421 7.185 6.998 7.147 6.43  6.012 6.172 5.631 6.004 6.377 6.009<nl> 5.889 5.949 6.096 5.834 5.935 5.99  5.456 5.727 5.57  5.965 6.142 5.813<nl> 5.924 5.599 5.813 6.047 6.495 6.674 5.713 6.072 5.95  5.701 6.096 5.933<nl> 5.841 5.85  5.966 6.595 7.024 6.77  6.169 6.211 6.069 5.682 5.786 6.03<nl> 5.399 5.602 5.963 6.115 6.511 5.998 5.888 7.249 6.383 6.816 6.145 5.927<nl> 5.741 5.966 6.456 6.762 7.104 6.29  5.787 5.878 5.594 5.885 6.417 5.961<nl> 6.065 6.245 6.273 6.286 6.279 6.14  6.232 5.874 6.727 6.619 6.302 6.167<nl> 6.389 6.63  6.015 6.121 7.007 7.079 6.417 6.405 6.442 6.211 6.249 6.625<nl> 6.163 8.069 7.82  7.416 6.727 6.781 6.405 6.137 6.167 5.851 5.836 6.127<nl> 6.474 6.229 6.195 6.715 5.913 6.092 6.254 5.928 6.176 6.021 5.872 5.731<nl> 5.87  6.004 5.961 5.856 5.879 5.986 5.613 5.693 6.431 5.637 6.458 6.326<nl> 6.372 5.822 5.757 6.335 5.942 6.454 5.857 6.151 6.174 5.019 5.403 5.468<nl> 4.903 6.13  5.628 4.926 5.186 5.597 6.122 5.404 5.012 5.709 6.129 6.152<nl> 5.272 6.943 6.066 6.51  6.25  7.489 7.802 8.375 5.854 6.101 7.929 5.877<nl> 6.319 6.402 5.875 5.88  5.572 6.416 5.859 6.546 6.02  6.315 6.86  6.98<nl> 7.765 6.144 7.155 6.563 5.604 6.153 7.831 6.782 6.556 7.185 6.951 6.739<nl> 7.178 6.8   6.604 7.875 7.287 7.107 7.274 6.975 7.135 6.162 7.61  7.853<nl> 8.034 5.891 6.326 5.783 6.064 5.344 5.96  5.404 5.807 6.375 5.412 6.182<nl> 5.888 6.642 5.951 6.373 6.951 6.164 6.879 6.618 8.266 8.725 8.04  7.163<nl> 7.686 6.552 5.981 7.412 8.337 8.247 6.726 6.086 6.631 7.358 6.481 6.606<nl> 6.897 6.095 6.358 6.393 5.593 5.605 6.108 6.226 6.433 6.718 6.487 6.438<nl> 6.957 8.259 6.108 5.876 7.454 8.704 7.333 6.842 7.203 7.52  8.398 7.327<nl> 7.206 5.56  7.014 8.297 7.47  5.92  5.856 6.24  6.538 7.691 6.758 6.854<nl> 7.267 6.826 6.482 6.812 7.82  6.968 7.645 7.923 7.088 6.453 6.23  6.209<nl> 6.315 6.565 6.861 7.148 6.63  6.127 6.009 6.678 6.549 5.79  6.345 7.041<nl> 6.871 6.59  6.495 6.982 7.236 6.616 7.42  6.849 6.635 5.972 4.973 6.122<nl> 6.023 6.266 6.567 5.705 5.914 5.782 6.382 6.113 6.426 6.376 6.041 5.708<nl> 6.415 6.431 6.312 6.083 5.868 6.333 6.144 5.706 6.031 6.316 6.31  6.037<nl> 5.869 5.895 6.059 5.985 5.968 7.241 6.54  6.696 6.874 6.014 5.898 6.516<nl> 6.635 6.939 6.49  6.579 5.884 6.728 5.663 5.936 6.212 6.395 6.127 6.112<nl> 6.398 6.251 5.362 5.803 8.78  3.561 4.963 3.863 4.97  6.683 7.016 6.216<nl> 5.875 4.906 4.138 7.313 6.649 6.794 6.38  6.223 6.968 6.545 5.536 5.52<nl> 4.368 5.277 4.652 5.    4.88  5.39  5.713 6.051 5.036 6.193 5.887 6.471<nl> 6.405 5.747 5.453 5.852 5.987 6.343 6.404 5.349 5.531 5.683 4.138 5.608<nl> 5.617 6.852 5.757 6.657 4.628 5.155 4.519 6.434 6.782 5.304 5.957 6.824<nl> 6.411 6.006 5.648 6.103 5.565 5.896 5.837 6.202 6.193 6.38  6.348 6.833<nl> 6.425 6.436 6.208 6.629 6.461 6.152 5.935 5.627 5.818 6.406 6.219 6.485<nl> 5.854 6.459 6.341 6.251 6.185 6.417 6.749 6.655 6.297 7.393 6.728 6.525<nl> 5.976 5.936 6.301 6.081 6.701 6.376 6.317 6.513 6.209 5.759 5.952 6.003<nl> 5.926 5.713 6.167 6.229 6.437 6.98  5.427 6.162 6.484 5.304 6.185 6.229<nl> 6.242 6.75  7.061 5.762 5.871 6.312 6.114 5.905 5.454 5.414 5.093 5.983<nl> 5.983 5.707 5.926 5.67  5.39  5.794 6.019 5.569 6.027 6.593 6.12  6.976<nl> 6.794 6.03 ].<nl>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.<tab>model.fit(X, y)	sklearnのfit()では、DataFrame型やnumpyの行列形式（縦ベクトル）しか使用できない<tab>二重括弧をつけるか、reshape(-1,1)をつける
AttributeError: 'DataFrame' object has no attribute 'colums'<tab>for colum in df.colums[:-1]:	データフレームには'colums'という要素はない<tab>df.colums[:-1]:をdf.columns[:-1]:に直す
NameError: name 'DecisionTreerRegressor' is not defined<tab>model = DecisionTreerRegressor()	DecisionTreerRegressorが見つからない<tab>from sklearn.tree import DecisionTreeRegressorしてDecisionTreeRegressorと書く
ValueError: invalid literal for int() with base 10: 'B'<tab>N=int(input())	文字列''B'はint型に変換できない<tab>int(input())をinput()に直す
"KeyError: ""['川辺'] not in index""<tab>X = df[['低所得率', '川辺']]"	データフレームdfに列'川辺'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
NameError: name 'g3' is not defined<tab>plt.hist(df['性別'],df[g3])	変数g3が見つからない<tab>g3=...のように定義する
NameError: name 'uid' is not defined<tab>k_l_column = uid + k_l_column	変数uidが見つからない<tab>uid=...のように定義する
KeyError: '成績'<tab>sns.boxplot(x=df['成績'], y=df['G3'], order=order_by)	データフレームdfに列'成績'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
ValueError: invalid literal for int() with base 10: 'p'<tab>Num_list.append(int(Data_list[i]))	文字列'p'はint型に変換できない<tab>(int(Data_list[i]))を(Data_list[i])に直す
KeyError: ('y', 'soldout')<tab>X = df['y','soldout']	カラム名は1つしか指定できない<tab>2つ以上のカラムを取り出したい時には、二重括弧を使う
"KeyError: ""None of [Index(['低所得理宇t'], dtype='object')] are in the [columns]""<tab>X = df[['低所得理宇t']]  # ひとつ選ぶ"	データフレームdfに列'低所得理宇t'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
TypeError: value_counts() missing 1 required positional argument: 'values'<tab>pd.value_counts()	value_countsは列を指定する必要がある<tab>df['列名'].value_counts()で要素数を数える
TypeError: __init__() got an unexpected keyword argument 'maxdepth'<tab>model = DecisionTreeRegressor(maxdepth=3)	maxdepthはスペルミス<tab>max_depth=...に直す
NameError: name '犯罪率' is not defined<tab>X = df[[犯罪率]]	"列名をダブルクォテーション（""""）で囲んでいない<tab>""犯罪""のようにダブルクォーテーションで列名を囲む"
"KeyError: ""['weather_num', 'temprature'] not in index""<tab>df[['week','weather_num','temprature']]"	データフレームdfに列'weather_num', 'temprature'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
TypeError: object of type 'int' has no len()<tab>if len(N)==4:	int型のオブジェクトにはlenを使えない<tab>str型に変換する
NameError: name 'm' is not defined<tab>SS.append(S[m])	変数mが見つからない<tab>m=...のように定義する
ValueError: invalid literal for int() with base 10: 'abc'<tab>S=int(input())	'abc'はint型に変換できない<tab>int(input())をinput()に直す
TypeError: __init__() got an unexpected keyword argument 'maxdeapth'<tab>model = DecisionTreeRegressor(maxdeapth=3)	maxdeapthはスペルミス<tab>max_depth=...に直す
ValueError: Found input variables with inconsistent numbers of samples: [85, 83]<tab>print('R2(テスト):', r2_score(y_test, y_pred))	y_testとy_predのデータの個数が異なる<tab>len(データフレーム名[列名])でそれぞれのデータの個数を確認する
TypeError: unsupported operand type(s) for *: 'range' and 'range'<tab>print(x*y)	x,yがrange型になっている<tab>x,yの型を数値型にする
NameError: name 'make_mean_list' is not defined<tab>mean_list_all = make_mean_list(sample_list, df_keys['keys'])	変数make_mean_listが見つからない<tab>make_mean_listのスペルの確認やmake_mean_list=...で定義する
NameError: name 'df' is not defined<tab>plt.scatter(df['部屋数'], df['住宅価格'])	データフレームdfが見つからない<tab>データフレーム名を確認して直すか、新たにデータフレームを作る
"KeyError: ""['soldo'] not in index""<tab>X = df[['soldo','kcal','payday','temperature', 'weather_num','week_num', 'precipitation_num','event_num','remarks_num']]"	データフレームdfに列'soldo'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
AttributeError: 'list' object has no attribute 'apend'<tab>ss.apend(chr(a)) #リストに追加	appendのスペルが違う<tab>apendをappendに直す
ImportError: cannot import name 'Pipeline' from 'sklearn.ensemble' (/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/__init__.py)<tab>from sklearn.ensemble import Pipeline	import元が異なる<tab>from sklearn.pipeline import Pipelineでimportする
NameError: name 'recall' is not defined<tab>print(f'再現率 {recall:.5f}')	変数recallが見つからない<tab>recall=...のように定義する
AttributeError: 'PathCollection' object has no property 'coloer'<tab>plt.scatter(y, y_pred, coloer = 'red', alpa = 0.3)	colorのスペルが違う<tab>coloerをcolorに直す
AttributeError: type object 'str' has no attribute 'input'<tab>a = str.input()	str型のinput方法が異なる<tab>str(input())に直す
NameError: name 'BaggingRegressor' is not defined<tab>model = BaggingRegressor(max_depth=3)	変数BaggingRegressorが見つからない<tab>BaggingRegressor=...のように定義する
NameError: name 'x_pred' is not defined<tab>plt.scatter(y, x_pred, c='red', alpha=0.3)	変数x_predが見つからない<tab>x_pred=...のように定義する
ValueError: invalid literal for int() with base 2: 'A'<tab>print(int('A',K))	文字列'A'はint型に変換できない<tab>print(int('A',K))をprint('A')に直す
TypeError: '(['犯罪率'], 0      0.00632<nl>1      0.02731<nl>2      0.02729<nl>3      0.03237<nl>4      0.06905<nl>        ...   <nl>501    0.06263<nl>502    0.04527<nl>503    0.06076<nl>504    0.10959<nl>505    0.04741<nl>Name: 犯罪率, Length: 506, dtype: float64)' is an invalid key<tab>X = df[[column], df[column]]	複数列を指定する際の個々の[]は不要<tab>df[[列名1,列名2,...]]にする
ValueError: Found array with dim 3. Estimator expected <= 2.<tab>model.fit(X, y)	2次元以下の入力を予想したが、3次元のデータが入力された<tab>次元を見直す
NameError: name 'DecisionTreeRegressior' is not defined<tab>model = DecisionTreeRegressior()	DecisionTreeRegressiorが見つからない<tab>from sklearn.tree import DecisionTreeRegressorしてDecisionTreeRegressorと書く
NameError: name 'sort' is not defined<tab>x,y = map(int,input()/split())	splitメソッドの呼び出し方が違う<tab>カンマを打つべきところがスラッシュになっている
NameError: name 'seq' is not defined<tab>if len(seq[i][0]) != len(set(seq[i+1][0])) and len(seq[i][1]) != len(set(seq[i+1][1])):	seqが見つからない<tab>seqを定義するまたはseqを関数として使用
FileNotFoundError: [Errno 2] No such file or directory: 'boston.csv'<tab>df = pd.read_csv('boston.csv')	boston.csvが見つからない<tab>ファイルのダウンロードし、ファイル名やファイルパスを確認をする
NameError: name 'sample' is not defined<tab>df=sample(150)	sample単体で使用できない<tab>df.sample()にする
AttributeError: 'list' object has no attribute 'max'<tab>print(r2.max())	リストに対するmaxの使い方が違う<tab>max(リスト名)にする
TypeError: __init__() got an unexpected keyword argument 'figusize'<tab>plt.figure(figusize=(6,6))	figusizeではグラフのサイズを指定できない<tab>plt.figure(figsize=...)に直す
AttributeError: 'LinearRegression' object has no attribute 'preddict'<tab>y_pred=model.preddict(X)	predictのスペルが違う<tab>preddictをpredictに直す
"UsageError: Cell magic `%%actcoder` not found.<tab>get_ipython().run_cell_magic('actcoder', 'https://atcoder.jp/contests/abc168/tasks/abc168_b', 'K=int(input())\nS=str(input())\np=S[0:K]\ns=len(S)\nif s<=K:\n  print(S)\nelse:\n  print(p,end="""",\'...\')')"	%%atcoderのスペルが違う<tab>%%actcoderを%%atcoderに直す
TypeError: list indices must be integers or slices, not tuple<tab>print(s[1,2,0])	インデックスを並べてかけない<tab>print(s[1],s[2],s[0]) に直す
TypeError: range expected 1 arguments, got 0<tab>for i in range():	for文の()の値が見つからない<tab>for i in range(iの範囲)にする
NameError: name 'SVR' is not defined<tab>model = SVR(max_depth=depth)  # None 制限なし	SVRがimportされていない<tab>from sklearn.svm import SVRのようにimportする
ValueError: invalid literal for int() with base 10: 'xox'<tab>N, X = map(int, input().split())	文字列'xox'はint型に変換できない<tab>map(int,input().split())をmap(input().split())に直す
NameError: name 'DecisionTreeRegression' is not defined<tab>model = DecisionTreeRegression()	DecisionTreeRegressionが見つからない<tab>from sklearn.tree import DecisionTreeRegressorしてDecisionTreeRegressorと書く
AttributeError: 'LinearRegression' object has no attribute 'fix'<tab>model.fix(X,y)	model.fitのスペルが違う<tab>model.fixをmodel.fitに直す
ValueError: invalid literal for int() with base 10: '123,122'<tab>A,B=map(int, input().split())	区切り文字の設定が','になっていない<tab>map(int,input().split())をmap(int,input().split(','))に直す
TypeError: __init__() got an unexpected keyword argument 'model'<tab>model = DecisionTreeRegressor(model = DecisionTreeRegressor(max_depth=3))	modelの中でmodelは定義できない<tab>model = DecisionTreeRegressor()に直す
"KeyError: ""None of [Index(['p', 'r', 'i', 'n', 't', 'Shift', '('], dtype='object')] are in the [columns]""<tab>X_train = X_train_c1_a_05[[ 'p', 'r', 'i', 'n', 't', 'Shift', '(' ]]"	データフレームX_train_c1_a_05に列'p', 'r', 'i', 'n', 't', 'Shift', '('が見つからない<tab>列名あるいはデータフレーム名を確認して直す
TypeError: float expected at most 1 arguments, got 2<tab>x=float(int,input().split())	1つの変数に対してsplit()は不要<tab>変数の個数に合わせて、split()の有無を判断
TypeError: Neither the `x` nor `y` variable appears to be numeric.<tab>sns.boxplot(x=df['父職業'],y=['G3'],order=order_by)	y の書き方が違う<tab>y=df['G3'] に直す
"KeyError: ""['weather_num'] not in index""<tab>df[['week','weather_num','temperature']]"	データフレームdfに列'weather_num'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
NameError: name 'colums3' is not defined<tab>X = df[[column, column2,colums3]] #1つ選ぶ	変数colums3が見つからない<tab>colums3=...のように定義する
KeyError: 'weather_num'<tab>df['weather_num']	データフレームdfに列'weather_num'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
TypeError: replace() argument 1 must be str, not int<tab>print(s.replace(1, 9).replace(9, 1))	replaceは文字列を置換するときしか使えない<tab>引数を数値から文字列型に変換する
ValueError: invalid literal for int() with base 10: '3.456'<tab>X=int(input())	'3.456'はint型に変換できない<tab>int(input())をfloat(input())に直す
TypeError: unsupported operand type(s) for -: 'int' and 'list'<tab>ans +=j *a[j]-sum_a	int型とlist型の加算はできない<tab>import numpy as npをし、sum_aをnp.array(sum_a)に変換する
NameError: name 'datetime' is not defined<tab>type(datetime)	変数datetimeが見つからない<tab>datetime=...のように定義する
ValueError: Expected 2D array, got 1D array instead:<nl>array=[396.         404.40963855 435.         408.         426.<nl> 370.         387.         404.40963855 418.         430.<nl> 432.         400.         423.         405.         398.<nl> 415.         426.         400.         415.         333.<nl> 412.         404.40963855 404.40963855 428.         380.<nl> 404.40963855 445.         421.         408.         420.<nl> 384.         404.40963855 410.         430.         394.<nl> 450.         404.40963855 404.40963855 372.         430.<nl> 400.         410.         398.         325.         404.40963855<nl> 404.40963855 414.         409.         438.         425.<nl> 430.         404.40963855 340.         440.         370.<nl> 428.         404.40963855 415.         396.         435.<nl> 420.         377.         404.40963855 404.40963855 386.<nl> 404.40963855 372.         382.         386.         404.<nl> 404.40963855 409.         349.         430.         434.<nl> 400.         418.         376.         396.         404.40963855<nl> 428.         360.         430.         405.         407.<nl> 404.40963855 400.         449.         445.         368.<nl> 426.         423.         404.40963855 426.         413.<nl> 438.         401.         424.         415.         404.<nl> 403.         410.         354.         440.         410.<nl> 418.         412.         376.         441.         430.<nl> 408.         362.         462.         375.         315.<nl> 411.         350.         404.40963855 363.         395.<nl> 370.         392.         404.40963855 432.         392.<nl> 450.         404.40963855 404.40963855 400.         426.<nl> 407.         350.         385.         390.         375.<nl> 404.40963855 404.40963855 404.40963855 385.         393.<nl> 385.         425.         430.         410.        ].<nl>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.<tab>model.fit(X_train, y_train)	sklearnのfit()では、DataFrame型やnumpyの行列形式（縦ベクトル）しか使用できない<tab>二重括弧をつけるか、reshape(-1,1)をつける
NameError: name 'a' is not defined<tab>print(a)	変数aが見つからない<tab>a=...のように定義する
NameError: name 'd' is not defined<tab>ykn=(d*1.01)	変数dが見つからない<tab>d=...のように定義する
ValueError: invalid literal for int() with base 10: '3 4 9 0'<tab>k = int(input())	複数の入力データを読み込めない<tab>int(input())をmap(int,input().split())に直す
NameError: name 'char' is not defined<tab>S, T = char(input())	関数charは定義されていない<tab>関数charを定義するまたはchrにする
NameError: name 'er' is not defined<tab>S.rfind(er)	erは文字列ではない<tab>er'と文字列にするか、er=...で定義する
NameError: name 'mode_L' is not defined<tab>y_train_pred= mode_L.predict(X)	mode_Lが見つからない<tab>mode_L=...のように定義する
FileNotFoundError: [Errno 2] No such file or directory: '/root/desktop/OJT/numa-chan/train_Numa_print.csv'<tab>X_train_numa_p = pd.read_csv('~/desktop/OJT/numa-chan/train_Numa_print.csv')	/root/desktop/OJT/numa-chan/train_Numa_print.csvが見つからない<tab>ファイルのダウンロードし、ファイル名やファイルパスを確認をする
AttributeError: 'int' object has no attribute 'info'<tab>df.info()	dfが整数型になっている<tab>pd.DataFrameやpd.read_csvを用いて、データフレーム型にする
NameError: name 'de' is not defined<tab>for column in de.columns[:-1]:	変数deが見つからない<tab>de=...のように定義する
NameError: name 'soeted' is not defined<tab>x = soeted(list)	sortedのスペルが違う<tab>sortedに直す
NameError: name 'df_columns' is not defined<tab>df_columns	データフレームdf_columnsが見つからない<tab>データフレーム名を確認して直すか、新たにデータフレームを作る
"KeyError: ""['precipation'] not found in axis""<tab>df.drop('precipation', axis=1, inplace=True)"	precipationはタイプミス<tab>precipitationに直す
KeyError: '教育内容'<tab>plt.boxplot([df['教育内容'], df['通いやすさ'], df['評判の良さ']])	データフレームdfに列'教育内容'は見つからない<tab>列名あるいはデータフレーム名を確認して直す
"KeyError: ""None of [Index(['通勤時間'], dtype='object')] are in the [columns]""<tab>X = df[['通勤時間']]"	データフレームdfに列'通勤時間'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
ValueError: invalid literal for int() with base 10: '2 3'<tab>N = int(input())	複数の入力が読み込めない<tab>map(int,input().split())を使う
ValueError: Found input variables with inconsistent numbers of samples: [104, 83]<tab>print('R2(テスト):', r2_score(y_test, y_pred))	y_testとy_predのデータの個数が異なる<tab>len(データフレーム名[列名])でそれぞれのデータの個数を確認する
AttributeError: 'NoneType' object has no attribute 'mean'<tab>print(np.array(scores)).mean(())	print文は平均値を求められない<tab>()の数に注意する
NameError: name 'pirnt' is not defined<tab>pirnt(C*a)	printのスペルが違う<tab>printに直す
"ValueError: Length mismatch: Expected axis has 11 elements, new values have 8 elements<tab>df_uid_pr.columns = [""uid"", ""p"", ""r"", ""i"", ""n"", ""t"", ""Shift"", ""(""]"	元のデータフレームは11列だけど与えられた要素は8個しかない<tab>要素を11個にしよう
FileNotFoundError: [Errno 2] No such file or directory: 'my-drive/nuna-chan/train_Numa_print.csv'<tab>X_train_numa_p = pd.read_csv('my-drive/nuna-chan/train_Numa_print.csv')	my-drive/nuna-chan/train_Numa_print.csvが見つからない<tab>ファイルのダウンロードし、ファイル名やファイルパスを確認をする
TypeError: '<=' not supported between instances of 'int' and 'NoneType'<tab>if int(A) <= i <= int(B):	int型とNoneType型で比較演算子は使えない<tab>型を揃えて比較する
TypeError: '<=' not supported between instances of 'str' and 'int'<tab>if X[-3]<=4:	str型とint型で比較演算子は使えない<tab>型を揃えて比較する
NameError: name 'X_train' is not defined<tab>model.fit(X_train,y_train)	変数X_trainが見つからない<tab>X_train=...のように定義する
AttributeError: 'DecisionTreeRegressor' object has no attribute 'feature_impotences_'<tab>model.feature_impotences_	importances_のスペルが違う<tab>impotences_をimportances_に直す
NameError: name 'RANSACRegressorr' is not defined<tab>model = RANSACRegressorr()	RANSACRegressorrはスペルミス<tab>RANSACRegressor()に直す
NameError: name 'X_train_name' is not defined<tab>print('name の訓練データ数：',len(X_train_name))	変数X_train_nameが見つからない<tab>X_train_name=...のように定義する
"ValueError: invalid literal for int() with base 10: '1 3'<tab>l=[int(input()).split("" "") for i in range(x)]"	複数の入力に対してmap関数が不足<tab>map(型,input().split())で複数の入力ができる
NameError: name 'lens' is not defined<tab>if lens(K)>lens(S):	lenのスペルが違う<tab>lenに直す
NameError: name 'df_train_pr_name' is not defined<tab>X_train_pr_name = pd.DataFrame(df_train_pr_name)	データフレームdf_train_pr_nameが見つからない<tab>データフレーム名を確認して直すか、新たにデータフレームを作る
TypeError: str() takes at most 3 arguments (4 given)<tab>S,T,U,V=str(s,t,u,v)	str関数は1つの値にしかできていません<tab>str(1つの値)またstr([複数の値])で文字列に変換する
"KeyError: ""None of [Index(['黒人'], dtype='object')] are in the [columns]""<tab>X = df[['黒人']]"	データフレームdfに列'黒人'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
ImportError: cannot import name 'datetime' from 'sklearn.metrics' (/usr/local/lib/python3.7/dist-packages/sklearn/metrics/__init__.py)<tab>from sklearn.metrics import datetime	datetimeはsklearn.metricsからimportできない<tab>import datetimeでimportする
KeyError: '年齢'<tab>plt.scatter(df['年齢'],df['G3'])	データフレームdfに列'年齢'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
AttributeError: 'int' object has no attribute 'replace'<tab>print(s.replace(1, 9).replace(9, 1))	int型ではreplaceは使えない<tab>print(s.replace('1', '9').replace('9', '1')) に直す
KeyError: '家族「'<tab>df.groupby('家族「')['G3'].describe()	データフレームdfに列'家族「'は見つからない<tab>列名あるいはデータフレーム名を確認して直す
"KeyError: ""['低所得者'] not in index""<tab>X = df[['低所得者','部屋数']]"	データフレームdfに列'低所得者'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
"KeyError: ""['部屋数宇'] not in index""<tab>X = df[['部屋数宇','築年']]"	データフレームdfに列'部屋数宇'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
AttributeError: 'DecisionTreeRegressor' object has no attribute 'future_importances_'<tab>model.future_importances_	feautureのスペルが違う<tab>futureをfeautureに直す
TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'<tab>t=t+int([st[1]])	intの中の書き方が違う<tab>t=t+int(st[1])
NameError: name 'y_predf' is not defined<tab>plt.scatter(y,y_predf, color='red',alpha=0.3)	変数y_predfが見つからない<tab>y_predf=...のように定義する
KeyError: 'ぞの他'<tab>sns.kdeplot(df.groupby('母職業').get_group('ぞの他')['G3'], shade = True, label = 'ぞの他')	データフレームdfに列'ぞの他'は見つからない<tab>列名あるいはデータフレーム名を確認して直す
ValueError: Expected 2D array, got 1D array instead:<nl>array=[0 1 0 1 1 1 0 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 1 1<nl> 1 1 0 1 1 0 1 1 1 1 1 1 1 1 0 0 0 1 1 0 0 1 0 1 0 0 1 0 0 1 1 0 1 0 0 0 1<nl> 1 0 1 1 1 0 0 0 1 0 0 1 0 1 1 0 1 1 0 1 0 0 0 0 1 0 1 0 1 0 0 1 0 0 1 0 1<nl> 0 1 1 1 0 1 0 1 1 0 1 0 1 1 0 0 0 0 1 0 1 0 1 1 0 1 0 1 0 0 0 0 1 0 0 0 0<nl> 1 0 0 1 0 1 0 0 1 0 1 1 1 0 1 1 0 1 0 0 0 0 1 1 1 0 0 0 1 0 1 0 0 1 0 0 0<nl> 0 0 1 1 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0].<nl>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.<tab>model.fit(X, y)	sklearnのfit()では、DataFrame型やnumpyの行列形式（縦ベクトル）しか使用できない<tab>二重括弧をつけるか、reshape(-1,1)をつける
"KeyError: ""['wether_num'] not in index""<tab>df[['kcal','wether_num','temperature']]"	データフレームdfに列'wether_num'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
NameError: name 'figuresize' is not defined<tab>plt.figure(figuresize(6,6))	figsizeの使い方が違う<tab>figsize=(値,値)のようにする
NameError: name 'model' is not defined<tab>y_train_pred= model.predict(X)	modelが見つからない<tab>model=...のように定義する
TypeError: '(['week_num'], ['weather_num'], ['temperature'])' is an invalid key<tab>X = df[['week_num'],['weather_num'],['temperature']]	複数列を指定する際の個々の[]は不要<tab>df[[列名1,列名2,...]]にする
TypeError: unsupported operand type(s) for ^: 'int' and 'float'<tab>x=a^2+b^2-2*a*b*e	累乗の演算子が^になっている<tab>^を**に直す
NameError: name 'wakachi' is not defined<tab>words.append(wakachi(name))	関数wakachiが見つからない<tab>関数名を確認して直すか、新たに関数を作る
NameError: name 'X_test_21_p' is not defined<tab>y_test = X_test_21_p['target']	データフレームX_test_21_pが見つからない<tab>データフレーム名を確認して直すか、新たにデータフレームを作る
ValueError: Found input variables with inconsistent numbers of samples: [506, 152]<tab>print('R2', r2_score(y, y_pred))	yとy_predのデータの個数が異なる<tab>len(データフレーム名[列名])でそれぞれのデータの個数を確認する
NameError: name 'intmax' is not defined<tab>print(b[b.index(intmax(c))])	intmax関数は使用できない<tab>int(x)やmax(x)のように使う
TypeError: argument of type 'int' is not iterable<tab>'9' in 99	inの後に数値データを指定している<tab>inのあとは文字列やリスト、dict、タプルなどの繰り返し処理が可能なイテラブルオブジェクトを入れる
ValueError: Expected 2D array, got 1D array instead:<nl>array=[4.].<nl>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.<tab>model.predict([(4.00)])	sklearnのfit()では、DataFrame型やnumpyの行列形式（縦ベクトル）しか使用できない<tab>二重括弧をつけるか、reshape(-1,1)をつける
AttributeError: 'float' object has no attribute 'quantize'<tab>y = x.quantize(Decimal('0'), rounding=ROUND_HALF_UP)	xは浮動小数点型のため、quantizeは使用できない<tab>Decimal(str('小数or整数')).quantize(Decimal('桁数'),rounding=引数)に直す
NameError: name 'X' is not defined<tab>plt.plot(X,Y)	変数Xが見つからない<tab>X=...のように定義する
NameError: name 'SD' is not defined<tab>S[0],S[2] = S[2],SD[0]	SDはスペルミス<tab>リスト名を確認し、Sに直す
ValueError: Expected 2D array, got 1D array instead:<nl>array=[ 1  2  2  3  3  3  5  5  5  5  5  5  5  4  4  4  4  4  4  4  4  4  4  4<nl>  4  4  4  4  4  4  4  4  4  4  4  5  5  5  5  3  3  3  3  3  3  3  3  3<nl>  3  3  4  4  4  4  3  5  2  5  8  8  8  8  8  8  3  4  4  4  4  4  4  4<nl>  4  4  5  5  5  5  5  5  4  4  4  4  3  3  3  3  2  2  2  2  4  4  4  2<nl>  2  2  2  2  5  5  5  5  5  5  5  5  5  5  5  6  6  6  6  6  6  6  6  6<nl>  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  5  5<nl>  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5<nl>  5  5  5  5  5  5  5  5  5  5  5  3  3  3  3  3  3  3  3  5  5  5  5  5<nl>  5  1  1  4  2  2  2  3  3  2  2  4  4  4  4  4  4  4  4  4  4  4  4  4<nl>  5  5  5  5  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  6  6<nl>  6  6  6  6  7  7  7  7  7  7  7  7  7  7  1  1  3  5  5  5  5  5  5  5<nl>  5  5  5  5  5  3  3  3  3  3  4  4  4  4  4  5  5  5  5  1  1  1  1  6<nl>  6  6  4  4  4  4  4  4  4  4  5  5  5  7  7  7  7  7  7  7  4  4  4  4<nl>  4  4  4  4  4  4  4  4  5  5  5  5  5  5  5  5  4  4  4  1  1  5  5  5<nl>  5  5  5  5  5  1  1  5  5  3  3  4  4  1  1  4  4  5  4  4 24 24 24 24<nl> 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24<nl> 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24<nl> 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24<nl> 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24<nl> 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24<nl> 24 24 24 24 24 24 24 24  4  4  4  4  4  6  6  6  6  6  6  6  6  1  1  1<nl>  1  1].<nl>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.<tab>model.fit(X,y)	sklearnのfit()では、DataFrame型やnumpyの行列形式（縦ベクトル）しか使用できない<tab>二重括弧をつけるか、reshape(-1,1)をつける
NameError: name 'num' is not defined<tab>Sx,Sy,Gx,Gy=map(int, input().split(),'{:10}'.format(num))	変数numが見つからない<tab>num=...のように定義する
TypeError: '(['犯罪率'], ['犯罪率'])' is an invalid key<tab>X = df[[column1], [column2]]  # 説明変数	複数列を指定する際の個々の[]は不要<tab>df[[列名1,列名2,...]]にする
NameError: name 'df_pr_name' is not defined<tab>X_train_pr_name, X_test_pr_name = train_test_split(df_pr_name,test_size = 0.3)	データフレームdf_pr_nameが見つからない<tab>データフレーム名を確認して直すか、新たにデータフレームを作る
ValueError: Expected 2D array, got 1D array instead:<nl>array=[296 242 242 222 222 222 311 311 311 311 311 311 311 307 307 307 307 307<nl> 307 307 307 307 307 307 307 307 307 307 307 307 307 307 307 307 307 279<nl> 279 279 279 252 252 233 233 233 233 233 233 233 233 233 243 243 243 243<nl> 469 226 313 256 284 284 284 284 284 284 216 337 337 345 345 345 305 305<nl> 305 305 398 398 398 398 398 398 281 281 281 281 247 247 247 247 270 270<nl> 270 270 270 270 270 276 276 276 276 276 384 384 384 384 384 384 384 384<nl> 384 384 384 432 432 432 432 432 432 432 432 432 188 188 188 188 188 188<nl> 188 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 403 403<nl> 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403<nl> 403 403 403 403 403 403 403 403 403 403 296 296 296 296 296 296 296 193<nl> 193 193 193 193 193 193 193 398 398 398 398 398 398 265 265 255 329 329<nl> 329 402 402 348 348 224 224 277 277 277 277 277 277 277 277 277 277 277<nl> 276 276 276 276 307 307 307 307 307 307 307 307 307 307 307 307 307 307<nl> 307 307 307 307 300 300 300 300 300 300 330 330 330 330 330 330 330 330<nl> 330 330 315 315 244 264 264 264 264 264 264 264 264 264 264 264 264 223<nl> 223 223 223 223 254 254 254 254 254 216 216 216 216 198 285 300 241 293<nl> 293 293 245 245 245 289 289 289 289 289 358 358 358 329 329 329 222 222<nl> 222 222 304 304 304 304 304 304 304 304 304 304 304 304 287 287 287 287<nl> 287 287 287 287 430 430 430 304 304 224 224 224 224 224 224 224 224 284<nl> 422 370 370 352 352 351 280 335 335 411 411 187 334 334 666 666 666 666<nl> 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666<nl> 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666<nl> 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666<nl> 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666<nl> 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666<nl> 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666<nl> 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666<nl> 666 666 711 711 711 711 711 391 391 391 391 391 391 391 391 273 273 273<nl> 273 273].<nl>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.<tab>model.fit(X, y)	sklearnのfit()では、DataFrame型やnumpyの行列形式（縦ベクトル）しか使用できない<tab>二重括弧をつけるか、reshape(-1,1)をつける
AttributeError: 'DataFrame' object has no attribute 'dtype'<tab>a.dtype	データフレーム型aにはdtypeを使用できない<tab>aを文字列にする
TypeError: remove() takes exactly one argument (2 given)<tab>r=s.remove(0,2)	remove()の引数は1つしか入れられないが2つ入ってしまっている<tab>1つずつ削除する
"KeyError: ""['datetie'] not found in axis""<tab>df.drop('datetie', axis=1, inplace=True)"	datetieはタイプミス<tab>datetimeに直す
NameError: name 'prunt' is not defined<tab>prunt(1+2)	printのスペルが違う<tab>printに直す
NameError: name 'RandomForestRegressor' is not defined<tab>model=RandomForestRegressor()	RandomForestRegressorが見つからない<tab>from sklearn.ensemble import RandomForestClassifierでimportする
FileNotFoundError: [Errno 2] No such file or directory: 'drive/MyDrive/nuna-chan/train_Numa_print.csv'<tab>X_train_numa_p = pd.read_csv('drive/MyDrive/nuna-chan/train_Numa_print.csv')	drive/MyDrive/nuna-chan/train_Numa_print.csvが見つからない<tab>ファイルのダウンロードし、ファイル名やファイルパスを確認をする
KeyError: 0<tab>keys_list(df_key['keys'][0])	indexが見つからない<tab>範囲を確認し、indexを調節する
TypeError: '<=' not supported between instances of 'int' and 'list'<tab>mi=[x for x in b if a[i]-ab<=b<=a[i]+ab]	int型とlist型で比較演算子は使えない<tab>型を揃えて比較する
ValueError: Expected 2D array, got 1D array instead:<nl>array=[ 4.09    4.9671  4.9671  6.0622  6.0622  6.0622  5.5605  5.9505  6.0821<nl>  6.5921  6.3467  6.2267  5.4509  4.7075  4.4619  4.4986  4.4986  4.2579<nl>  3.7965  3.7965  3.7979  4.0123  3.9769  4.0952  4.3996  4.4546  4.682<nl>  4.4534  4.4547  4.239   4.233   4.175   3.99    3.7872  3.7598  3.3603<nl>  3.3779  3.9342  3.8473  5.4011  5.4011  5.7209  5.7209  5.7209  5.7209<nl>  5.1004  5.1004  5.6894  5.87    6.0877  6.8147  6.8147  6.8147  6.8147<nl>  7.3197  8.6966  9.1876  8.3248  7.8148  6.932   7.2254  6.8185  7.2255<nl>  7.9809  9.2229  6.6115  6.6115  6.498   6.498   6.498   5.2873  5.2873<nl>  5.2873  5.2873  4.2515  4.5026  4.0522  4.0905  5.0141  4.5026  5.4007<nl>  5.4007  5.4007  5.4007  4.7794  4.4377  4.4272  3.7476  3.4217  3.4145<nl>  3.0923  3.0921  3.6659  3.6659  3.615   3.4952  3.4952  3.4952  3.4952<nl>  3.4952  2.7778  2.8561  2.7147  2.7147  2.421   2.1069  2.211   2.1224<nl>  2.4329  2.5451  2.7778  2.6775  2.3534  2.548   2.2565  2.4631  2.7301<nl>  2.7474  2.4775  2.7592  2.2577  2.1974  2.0869  1.9444  2.0063  1.9929<nl>  1.7572  1.7883  1.8125  1.9799  2.1185  2.271   2.3274  2.4699  2.346<nl>  2.1107  1.9669  1.8498  1.6686  1.6687  1.6119  1.4394  1.3216  1.4118<nl>  1.3459  1.4191  1.5166  1.4608  1.5296  1.5257  1.618   1.5916  1.6102<nl>  1.6232  1.7494  1.7455  1.7364  1.8773  1.7573  1.7659  1.7984  1.9709<nl>  2.0407  2.162   2.422   2.2834  2.0459  2.4259  2.1     2.2625  2.4259<nl>  2.3887  2.5961  2.6463  2.7019  3.1323  3.5549  3.3175  2.9153  2.829<nl>  2.741   2.5979  2.7006  2.847   2.9879  3.2797  3.1992  3.7886  4.5667<nl>  4.5667  6.4798  6.4798  6.4798  6.2196  6.2196  5.6484  7.309   7.309<nl>  7.309   7.6534  7.6534  6.27    6.27    5.118   5.118   3.9454  4.3549<nl>  4.3549  4.2392  3.875   3.8771  3.665   3.6526  3.9454  3.5875  3.9454<nl>  3.1121  3.4211  2.8893  3.3633  2.8617  3.048   3.2721  3.2721  2.8944<nl>  2.8944  3.2157  3.2157  3.3751  3.3751  3.6715  3.6715  3.8384  3.6519<nl>  3.6519  3.6519  4.148   4.148   6.1899  6.1899  6.3361  6.3361  7.0355<nl>  7.0355  7.9549  7.9549  8.0555  8.0555  7.8265  7.8265  7.3967  7.3967<nl>  8.9067  8.9067  9.2203  9.2203  6.3361  1.801   1.8946  2.0107  2.1121<nl>  2.1398  2.2885  2.0788  1.9301  1.9865  2.1329  2.4216  2.872   3.9175<nl>  4.429   4.429   3.9175  4.3665  4.0776  4.2673  4.7872  4.8628  4.1403<nl>  4.1007  4.6947  5.2447  5.2119  5.885   7.3073  7.3073  9.0892  7.3172<nl>  7.3172  7.3172  5.1167  5.1167  5.1167  5.5027  5.5027  5.9604  5.9604<nl>  6.32    7.8278  7.8278  7.8278  5.4917  5.4917  5.4917  4.022   3.37<nl>  3.0992  3.1827  3.3175  3.1025  2.5194  2.6403  2.834   3.2628  3.6023<nl>  3.945   3.9986  4.0317  3.5325  4.0019  4.5404  4.5404  4.7211  4.7211<nl>  4.7211  5.4159  5.4159  5.4159  5.2146  5.2146  5.8736  6.6407  6.6407<nl>  6.4584  6.4584  5.9853  5.2311  5.615   4.8122  4.8122  4.8122  7.0379<nl>  6.2669  5.7321  6.4654  8.0136  8.0136  8.5353  8.344   8.7921  8.7921<nl> 10.7103 10.7103 12.1265 10.5857 10.5857  2.1222  2.5052  2.7227  2.5091<nl>  2.5182  2.2955  2.1036  1.9047  1.9047  1.6132  1.7523  1.5106  1.3325<nl>  1.3567  1.2024  1.1691  1.1296  1.1742  1.137   1.3163  1.3449  1.358<nl>  1.3861  1.3861  1.4165  1.5192  1.5804  1.5331  1.4395  1.4261  1.4672<nl>  1.5184  1.5895  1.7281  1.9265  2.1678  1.77    1.7912  1.7821  1.7257<nl>  1.6768  1.6334  1.4896  1.5004  1.5888  1.5741  1.639   1.7028  1.6074<nl>  1.4254  1.1781  1.2852  1.4547  1.4655  1.413   1.5275  1.5539  1.5894<nl>  1.6582  1.8347  1.8195  1.6475  1.8026  1.794   1.8589  1.8746  1.9512<nl>  2.0218  2.0635  1.9096  1.9976  1.8629  1.9356  1.9682  2.0527  2.0882<nl>  2.2004  2.3158  2.2222  2.1247  2.0026  1.9142  1.8206  1.8172  1.8662<nl>  2.0651  2.0048  1.9784  1.8956  1.9879  2.072   2.198   2.2616  2.185<nl>  2.3236  2.3552  2.3682  2.4527  2.4961  2.4358  2.5806  2.7792  2.7831<nl>  2.7175  2.5975  2.5671  2.7344  2.8016  2.9634  3.0665  2.8715  2.5403<nl>  2.9084  2.8237  3.0334  3.0993  2.8965  2.5329  2.4298  2.206   2.3053<nl>  2.1007  2.1705  1.9512  3.4242  3.3317  3.4106  4.0983  3.724   3.9917<nl>  3.5459  3.1523  1.8209  1.7554  1.8226  1.8681  2.1099  2.3817  2.3817<nl>  2.7986  2.7986  2.8927  2.4091  2.3999  2.4982  2.4786  2.2875  2.1675<nl>  2.3889  2.505 ].<nl>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.<tab>model.fit(X, y)	"sklearnのfit()では、DataFrame型やnumpyの行列形式（縦ベクトル）しか使用できない
<tab>二重括弧をつけるか、reshape(-1,1)をつける"
ValueError: not enough values to unpack (expected 4, got 2)<tab>a,b,c,d=map(int,input().split())	入力した値を入れる変数は4個あるけど、、実際には2個しか入力されていない<tab>入力を4個に増やすか、変数を2個に減らそう
NameError: name 'PLSRegression' is not defined<tab>model = PLSRegression(max_depth=4)	PLSRegressionがimportしていない<tab>from sklearn.cross_decomposition import PLSRegressionでimportする
NameError: name 'sample_list' is not defined<tab>mean_lists = [mean_list(S[k]) for k in range(len(sample_list))]	sample_listが見つからない<tab>sample_listを定義する
ValueError: invalid literal for int() with base 10: 'dIfFiCuLt'<tab>X = int(input())	文字列'dIfFiCuLt'はint型に変換できない<tab>int(input())をinput()に直す
KeyError: ('部屋数', '低所得')<tab>X = df['部屋数','低所得']	カラム名は1つしか指定できない<tab>2つ以上のカラムを取り出したい時には、二重括弧を使う
AttributeError: 'list' object attribute 'append' is read-only<tab>k.append=S[1]	appendに=は不要<tab>リスト名.append(追加した要素)にする
"FileNotFoundError: [Errno 2] No such file or directory: 'shion:/Desktop/OJT/numa-chan/train_Numa_print.csv'<tab>X_train_numa_p = pd.read_csv(""shion:/Desktop/OJT/numa-chan/train_Numa_print.csv"")"	shion:/Desktop/OJT/numa-chan/train_Numa_print.csvが見つからない<tab>ファイルのダウンロードし、ファイル名やファイルパスを確認をする
NameError: name 'str_list' is not defined<tab>print(str_list)	変数str_listが見つからない<tab>str_list=...のように定義する
NameError: name 'mean_lists' is not defined<tab>mean_list_all.append(mean_lists)	mean_listsが見つからない<tab>mean_lists=...のように定義する
AttributeError: 'DecisionTreeRegressor' object has no attribute 'feature_importances'<tab>plt.barh(X_train.columns[::-1], model.feature_importances[::-1])	DecisionTreeRegressorにfeature_importancesはない<tab>RandomForestClassifierとRandomForestRegressorにfeature_importancesを使用できる
TypeError: '(['犯罪率'], '低所得率')' is an invalid key<tab>X = df[[column],'低所得率']  # ひとつ選ぶ	複数列を指定する際の個々の[]は不要<tab>df[[列名1,列名2,...]]にする
ValueError: could not convert string to float: '42.5-00'<tab>X=float(input())	このデータはそのまま処理できない<tab>文字列を数値に変えるデータ前処理を行う
ImportError: cannot import name 'MLPRegressor' from 'sklearn.ensemble' (/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/__init__.py)<tab>from sklearn.ensemble import MLPRegressor	import元が異なる<tab>from sklearn.neural_network import MLPRegressorでimportする
NameError: name 'No' is not defined<tab>print(No)	変数ansgdが見つからない<tab>ansgd=...のように定義する
AttributeError: 'list' object has no attribute 'replace'<tab>print(n.replace('1', 'X').replace('9', '1').replace('X', '9'))	リストXは置き変えられない<tab>Xをまだ使ってない文字に変える
NameError: name 'ans' is not defined<tab>(ans) == b	変数ansが見つからない<tab>ans=...のように定義する
AttributeError: module 'matplotlib.pyplot' has no attribute 'scater'<tab>plt.scater(df['部屋数'],df['住宅価格'], alpha=0.3)	<tab>
AttributeError: 'NoneType' object has no attribute 'replace'<tab>l=print(str(m.replace('1','9')))	一度に使用できません<tab>printとstr変換を変える
"NameError: name 'num1' is not defined<tab>round(""n"" ,num1)"	変数num1が見つからない<tab>num1=...のように定義する
TypeError: not all arguments converted during string formatting<tab>if N%10==2 and N%10==4 and N%10==5 and N%10==7 and N%10==9:	Nが文字列になっている<tab>N=int(N) のようにNを数値型に変換する
AttributeError: 'str' object has no attribute 'append'<tab>ss.append(chr(a))	ssは文字列のためappendできない<tab>ssをリスト型にするまたは、ss+追加したい文字列にする
NameError: name 'column' is not defined<tab>column	変数columnが見つからない<tab>column=...のように定義する
ValueError: Found input variables with inconsistent numbers of samples: [354, 152]<tab>print('R2(テスト):', r2_score(y_train, y_pred))	y_trainとy_predのデータの個数が異なる<tab>len(データフレーム名[列名])でそれぞれのデータの個数を確認する
ValueError: Found input variables with inconsistent numbers of samples: [2, 506]<tab>model.fit(X, y)	Xとyのデータの個数が異なる<tab>len(データフレーム名[列名])でそれぞれのデータの個数を確認する
ValueError: invalid literal for int() with base 10: '1t'<tab>A,B=map(int,input().split())	入力にint型ではなく、文字列が含まれている<tab>入力データ見直す
ValueError: invalid literal for int() with base 10: '123,456'<tab>A,B=map(int,input().split())	区切り文字の設定が','になっていない<tab>map(int,input().split())をmap(int,input().split(','))に直す
"KeyError: ""[''] not in index""<tab>X = df[['低所得率','','交通']]  # ひとつ選ぶ"	指定した列''が見つからない<tab>列名'に直す
NameError: name 'describe' is not defined<tab>describe(X_train_pr_name)	データフレームを忘れている<tab>データフレーム名.describe()にする
TypeError: unsupported operand type(s) for -: 'str' and 'int'<tab>df.columns -1	str型とint型の減算はできない<tab>df.columnの型を見直し数値型にする
AttributeError: type object 'str' has no attribute 'startsWith'<tab>if str.startsWith('er'):	str.startswithのスペルが違う<tab>str.startswithに直す
ValueError: num must be 1 <= num <= 16, not 17<tab>plt.subplot(4,4,i+1)	subplotで17は存在しない<tab>1から16になるようにする
TypeError: '>=' not supported between instances of 'str' and 'int'<tab>if X >=100:	str型とint型で比較演算子は使えない<tab>型を揃えて比較する
"KeyError: ""['precipiation_num'] not in index""<tab>X = df[['weather_num','precipiation_num']]"	データフレームdfに列'precipiation_num'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
ModuleNotFoundError: No module named 'slearn'<tab>from slearn.metrics import r2_score	slearnという名前のモジュールが見つからない<tab>モジュールの名前を確認する、もしくはモジュールをimportする
AttributeError: 'int' object has no attribute 'head'<tab>df.head()	dfが整数型になっている<tab>pd.DataFrameやpd.read_csvを用いて、データフレーム型にする
ValueError: could not convert string to float: '厚切りイカフライ'<tab>model.fit(X, y)	文字列を数値に変えないと処理できない<tab>文字列を数値に変えるデータ前処理を行う
"ValueError: Found input variables with inconsistent numbers of samples: [152, 506]<tab>print(""MSE: "", mean_squared_error(y_test, y_pred))"	y_testとy_predのデータの個数が異なる<tab>len(データフレーム名[列名])でそれぞれのデータの個数を確認する
AttributeError: 'PathCollection' object has no property 'alph'<tab>plt.scatter(df['部屋数'], df['住宅価格'],alph=0.5)	alphaのスペルが違う<tab>alphをalphaに直す
TypeError: '<' not supported between instances of 'str' and 'int'<tab>if N<10:	str型とint型で比較演算子は使えない<tab>型を揃えて比較する
TypeError: can't multiply sequence by non-int of type 'str'<tab>print(int(A * B))	str型変数は掛け算できない<tab>変数A,Bどちらも数値型にする
AttributeError: 'builtin_function_or_method' object has no attribute 'r2_score'<tab>r2 = max.r2_score(y, y_pred)	必要ないmaxが付いている<tab>max.r2_score(y,y_pred)をr2_score(y,y_pred)に直す
TypeError: 'float' object is not subscriptable<tab>if str(X[-3])<=4:	float型に添字は使えない<tab>それぞれの型を見直す
NameError: name 'c' is not defined<tab>a=ord(c)+N	変数cが見つからない<tab>c=...のように定義する
TypeError: list indices must be integers or slices, not str<tab>X = df[['week_num'],['weather_num'],['temperature']['kcal']]	列名を複数指定する書き方が違う<tab>X = df[['week_num','weather_num','temperature','kcal']] に直す
TypeError: '(['緑地'], ['緑地'])' is an invalid key<tab>X = df[[column],[column]]	複数列を指定する際の個々の[]は不要<tab>df[[列名1,列名2,...]]にする
ValueError: invalid literal for int() with base 10: '99.500'<tab>print(int(X)+1)	'99.500’はint型に変換できない<tab>int(X)をfloat(X)に直す
KeyError: 'precipitaion'<tab>df['precipitaion'].value_counts()	データフレームdfに列'precipitaion'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
TypeError: 'str' object is not callable<tab>if S(2)==S(3) or S(4)==S(5):	文字列のindexは()で指定できない<tab>文字列[指定したindex]にする
TypeError: __init__() got an unexpected keyword argument 'random_dtate'<tab>model = GradientBoostingRegressor(random_dtate=0)	random_dtateはスペルミス<tab>random_state=...に直す
NameError: name 'srt' is not defined<tab>s,t=map(srt,input().split())	strのスペルが違う<tab>strのように直す
TypeError: unsupported operand type(s) for -: 'int' and 'str'<tab>r=str(0*(4-N))	int型とstr型の減算はできない<tab>Nの型を数値型にする
NameError: name 's' is not defined<tab>s_zero = s.zfill(4)	変数sが見つからない<tab>s=...のように定義する
KeyError: ('通勤', '教員')<tab>X = df['通勤', '教員']  # 説明変数	カラム名は1つしか指定できない<tab>2つ以上のカラムを取り出したい時には、二重括弧を使う
TypeError: '<' not supported between instances of 'list' and 'int'<tab>while ma<w:	list型とint型で比較演算子は使えない<tab>型を揃えて比較する
NameError: name 'make_mean_list1' is not defined<tab>mean_list_all = make_mean_list1(sample_list, df_keys['keys'])	make_mean_list1が見つからない<tab>make_mean_list1のスペルの確認やmake_mean_list1=...で定義する
KeyError: 'Column not found: y'<tab>df.groupby('天気')['y'].median()	データフレームdfに列'y'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
NameError: name 'B' is not defined<tab>B=str(B)	変数Bが見つからない<tab>B=...のように定義する
KeyError: 'df_week'<tab>df['week'] = df['df_week']	データフレームdfに列'df_week'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
"ValueError: Length mismatch: Expected axis has 8 elements, new values have 11 elements<tab>df_uid_pr.columns = [""uid"", 'a', 'b', 'c', 'd', 'e', 'f', 'g','h','i','j']"	元のデータフレームは8列だけど与えられた要素は11個ある<tab>要素を11個にしよう
"KeyError: ""None of [Index(['川辺'], dtype='object')] are in the [columns]""<tab>X = df[['川辺']] #一つ選ぶ"	データフレームdfに列'川辺'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
"KeyError: ""None of [Index(['犯罪'], dtype='object')] are in the [columns]""<tab>X = df[['犯罪']]  # ひとつ選ぶ"	データフレームdfに列'犯罪'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
"FileNotFoundError: [Errno 2] No such file or directory: '/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csv'<tab>X_train_numa_p = pd.read_csv(""/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csv"")"	/Users/shion/Desktop/OJT/numa-chan/train_Numa_print.csvが見つからない<tab>ファイルのダウンロードし、ファイル名やファイルパスを確認をする
NameError: name 'ss' is not defined<tab>ss.append(chr(a))	リスト型の変数ssが見つからない<tab>ss=...のように定義する
"AttributeError: 'Series' object has no attribute 'strftime'<tab>df_2[""datetime""].strftime('%Y%m%d')"	Seriesではstrftimeは使えない<tab>形を見直す
TypeError: __init__() got an unexpected keyword argument 'figureSize'<tab>plt.figure(figureSize=(6,6))	figureSizeではグラフのサイズを指定できない<tab>plt.figure(figsize=...)に直す
TypeError: '<=' not supported between instances of 'int' and 'str'<tab>if 0<=N<10:	int型とstr型で比較演算子は使えない<tab>型を揃えて比較する
TypeError: drop() got multiple values for argument 'axis'<tab>df.drop('datetime','week', axis=1, inplace=True)	<tab>df.drop(['datetime','week'], axis=1, inplace=True) に直す
NameError: name 'coloumn' is not defined<tab>X = df[[coloumn]]  # 説明変数	変数coloumnが見つからない<tab>coloumnを定義するまたはcolumnに直す
NameError: name 'prrint' is not defined<tab>prrint(X.shape)	printのスペルが違う<tab>printに直す
ValueError: invalid literal for int() with base 10: '80,94'<tab>X,Y=map(int,input().split())	区切り文字の設定が','になっていない<tab>map(int,input().split())をmap(int,input().split(',')に直す
NameError: name 'df_train_pr_any' is not defined<tab>X_train_pr_any = pd.DataFrame(df_train_pr_any)	データフレームdf_train_pr_anyが見つからない<tab>データフレーム名を確認して直すか、新たにデータフレームを作る
"KeyError: ""['通年'] not in index""<tab>X=df[['低所得率','通年']]"	データフレームdfに列'通年'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
"KeyError: ""['教員費'] not in index""<tab>X = df[['通勤','教員費']]  # ひとつ選ぶ"	データフレームdfに列'教員費'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
NameError: name 'y' is not defined<tab>r2 = r2_score(y, y_pred)	変数yが見つからない<tab>y=...のように定義する
KeyError: ('犯罪率', '低所得率')<tab>X = df[column,'低所得率']  # ひとつ選ぶ	カラム名は1つしか指定できない<tab>2つ以上のカラムを取り出したい時には、二重括弧を使う
TypeError: '(['week'], ['weatherr'], ['kcal'])' is an invalid key<tab>X = df[['week'],['weatherr'],['kcal']]	複数列を指定する際の個々の[]は不要<tab>df[[列名1,列名2,...]]にする
ValueError: Expected 2D array, got 1D array instead:<nl>array=[19.8 17.  15.5 15.2 16.1 14.6 17.9 14.7 17.7 12.1 13.8 13.9 13.5 13.8<nl> 14.9  9.1  7.1 11.  12.3 13.9 11.3 10.8  7.8  6.8  8.4 11.5  8.   7.3<nl>  7.3  9.8 10.9  5.1  5.8  2.9  7.   7.8  6.5 10.4  7.4  8.5 10.1  5.1<nl> 12.6 10.3 15.3 14.1 15.9  3.8  3.   4.2  5.5  7.8  6.3  6.4  1.2 11.6<nl>  6.8  7.3  5.4  8.5  6.6 10.5 11.5  8.5 17.7  7.8  8.3  6.1  6.7  7.<nl>  7.6  8.7 14.8 15.2 11.5 14.  18.9 12.6  7.5 17.4 18.9 18.7 12.4 18.5<nl> 17.5 16.1 18.2 14.3 17.8 13.8 20.1 19.  21.3 16.5 16.4 19.7 21.5 20.1<nl> 11.4 16.4 18.8 19.4 19.9 20.8 22.7 17.5 24.  23.3 18.9 21.  23.4 22.7<nl> 18.6 26.  19.3 23.8 22.8 23.9 17.4 19.  19.8 23.9 23.7 25.7 26.  26.9<nl> 30.6 27.  27.5 21.5 19.9 25.  25.5 22.3 21.3 29.5 28.1 27.6 21.9 27.5<nl> 26.5 26.9 23.7 25.2 25.2 25.4 25.5 28.3 28.8 27.  22.1 24.  29.7 24.6<nl> 28.8 33.9 30.9 30.3 30.9 30.1 25.6 30.2 32.  32.5 33.6 28.9 30.4 30.6<nl> 32.5 32.7 32.7 34.3 34.6 32.1 31.1 32.4 29.4 32.2 33.3 33.3 33.  33.1<nl> 26.  26.2 21.  21.6 25.1 23.4 29.1 26.7 26.5 30.2 23.1 26.8 25.  21.9<nl> 27.3 28.8 25.  24.1 23.6 25.2 24.8 25.4 27.1 26.6 28.1].<nl>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.<tab>d	sklearnのfit()では、DataFrame型やnumpyの行列形式（縦ベクトル）しか使用できない<tab>二重括弧をつけるか、reshape(-1,1)をつける
"KeyError: ""['precipitstion_num'] not in index""<tab>X = df[['temperature','soldout','precipitstion_num']]"	データフレームdfに列'precipitstion_num'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
"KeyError: ""['h_l'] not in index""<tab>X = df_train[['year', 'month', 'day', 'week', 'soldout', 'kcal', 'event', 'payday', 'weather','h_l']]"	データフレームdf_trainに列'h_l'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
AttributeError: 'Series' object has no attribute 'info'<tab>df['precipitation'].info()	info() は列ではなくデータフレームに対して使う<tab>df.info() に直す
ValueError: Expected 2D array, got 1D array instead:<nl>array=[ 4.98  9.14  4.03  2.94  5.33  5.21 12.43 19.15 29.93 17.1  20.45 13.27<nl> 15.71  8.26 10.26  8.47  6.58 14.67 11.69 11.28 21.02 13.83 18.72 19.88<nl> 16.3  16.51 14.81 17.28 12.8  11.98 22.6  13.04 27.71 18.35 20.34  9.68<nl> 11.41  8.77 10.13  4.32  1.98  4.84  5.81  7.44  9.55 10.21 14.15 18.8<nl> 30.81 16.2  13.45  9.43  5.28  8.43 14.8   4.81  5.77  3.95  6.86  9.22<nl> 13.15 14.44  6.73  9.5   8.05  4.67 10.24  8.1  13.09  8.79  6.72  9.88<nl>  5.52  7.54  6.78  8.94 11.97 10.27 12.34  9.1   5.29  7.22  6.72  7.51<nl>  9.62  6.53 12.86  8.44  5.5   5.7   8.81  8.2   8.16  6.21 10.59  6.65<nl> 11.34  4.21  3.57  6.19  9.42  7.67 10.63 13.44 12.33 16.47 18.66 14.09<nl> 12.27 15.55 13.   10.16 16.21 17.09 10.45 15.76 12.04 10.3  15.37 13.61<nl> 14.37 14.27 17.93 25.41 17.58 14.81 27.26 17.19 15.39 18.34 12.6  12.26<nl> 11.12 15.03 17.31 16.96 16.9  14.59 21.32 18.46 24.16 34.41 26.82 26.42<nl> 29.29 27.8  16.65 29.53 28.32 21.45 14.1  13.28 12.12 15.79 15.12 15.02<nl> 16.14  4.59  6.43  7.39  5.5   1.73  1.92  3.32 11.64  9.81  3.7  12.14<nl> 11.1  11.32 14.43 12.03 14.69  9.04  9.64  5.33 10.11  6.29  6.92  5.04<nl>  7.56  9.45  4.82  5.68 13.98 13.15  4.45  6.68  4.56  5.39  5.1   4.69<nl>  2.87  5.03  4.38  2.97  4.08  8.61  6.62  4.56  4.45  7.43  3.11  3.81<nl>  2.88 10.87 10.97 18.06 14.66 23.09 17.27 23.98 16.03  9.38 29.55  9.47<nl> 13.51  9.69 17.92 10.5   9.71 21.46  9.93  7.6   4.14  4.63  3.13  6.36<nl>  3.92  3.76 11.65  5.25  2.47  3.95  8.05 10.88  9.54  4.73  6.36  7.37<nl> 11.38 12.4  11.22  5.19 12.5  18.46  9.16 10.15  9.52  6.56  5.9   3.59<nl>  3.53  3.54  6.57  9.25  3.11  5.12  7.79  6.9   9.59  7.26  5.91 11.25<nl>  8.1  10.45 14.79  7.44  3.16 13.65 13.    6.59  7.73  6.58  3.53  2.98<nl>  6.05  4.16  7.19  4.85  3.76  4.59  3.01  3.16  7.85  8.23 12.93  7.14<nl>  7.6   9.51  3.33  3.56  4.7   8.58 10.4   6.27  7.39 15.84  4.97  4.74<nl>  6.07  9.5   8.67  4.86  6.93  8.93  6.47  7.53  4.54  9.97 12.64  5.98<nl> 11.72  7.9   9.28 11.5  18.33 15.94 10.36 12.73  7.2   6.87  7.7  11.74<nl>  6.12  5.08  6.15 12.79  9.97  7.34  9.09 12.43  7.83  5.68  6.75  8.01<nl>  9.8  10.56  8.51  9.74  9.29  5.49  8.65  7.18  4.61 10.53 12.67  6.36<nl>  5.99  5.89  5.98  5.49  7.79  4.5   8.05  5.57 17.6  13.27 11.48 12.67<nl>  7.79 14.19 10.19 14.64  5.29  7.12 14.   13.33  3.26  3.73  2.96  9.53<nl>  8.88 34.77 37.97 13.44 23.24 21.24 23.69 21.78 17.21 21.08 23.6  24.56<nl> 30.63 30.81 28.28 31.99 30.62 20.85 17.11 18.76 25.68 15.17 16.35 17.12<nl> 19.37 19.92 30.59 29.97 26.77 20.32 20.31 19.77 27.38 22.98 23.34 12.13<nl> 26.4  19.78 10.11 21.22 34.37 20.08 36.98 29.05 25.79 26.64 20.62 22.74<nl> 15.02 15.7  14.1  23.29 17.16 24.39 15.69 14.52 21.52 24.08 17.64 19.69<nl> 12.03 16.22 15.17 23.27 18.05 26.45 34.02 22.88 22.11 19.52 16.59 18.85<nl> 23.79 23.98 17.79 16.44 18.13 19.31 17.44 17.73 17.27 16.74 18.71 18.13<nl> 19.01 16.94 16.23 14.7  16.42 14.65 13.99 10.29 13.22 14.13 17.15 21.32<nl> 18.13 14.76 16.29 12.87 14.36 11.66 18.14 24.1  18.68 24.91 18.03 13.11<nl> 10.74  7.74  7.01 10.42 13.34 10.58 14.98 11.45 18.06 23.97 29.68 18.07<nl> 13.35 12.01 13.59 17.6  21.14 14.1  12.92 15.1  14.33  9.67  9.08  5.64<nl>  6.48  7.88].<nl>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.<tab>model.fit(X, y)	sklearnのfit()では、DataFrame型やnumpyの行列形式（縦ベクトル）しか使用できない<tab>二重括弧をつけるか、reshape(-1,1)をつける
NameError: name 'N' is not defined<tab>print(N)	変数Nが見つからない<tab>N=...のように定義する
NameError: name 'X_test' is not defined<tab>print('正解率(test)', model.score(X_test, y_test_c1_p))	変数X_testが見つからない<tab>X_test=...のように定義する
NameError: name 'ceil' is not defined<tab>X=ceil(N/2)	mathモジュールを使っていない<tab>import mathして、math.ceil()と書く
ImportError: cannot import name 'GaussianProcessRegressor' from 'sklearn.ensemble' (/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/__init__.py)<tab>from sklearn.ensemble import GaussianProcessRegressor	import元が異なる<tab>from sklearn.gaussian_process import GaussianProcessRegressorでimportする
TypeError: unsupported operand type(s) for +=: 'function' and 'int'<tab>sum += n	sumは関数である<tab>変数名を変更する
KeyError: '曜日（月～金'<tab>df['曜日（月～金'].map({	データフレームdfに列'曜日（月～金'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
ValueError: Number of labels=152 does not match number of samples=354<tab>model.fit(X_train, y_train)	X_trainとy_trainのデータの個数が異なる<tab>X_trainとy_trainの個数を揃える
ValueError: invalid literal for int() with base 10: 'CSS'<tab>s,t =map(int,input().split())	文字列'CSS'はint型に変換できない<tab>map(int,input().split())をmap(input().split())に直す
ValueError: Length mismatch: Expected axis has 201 elements, new values have 41 elements<tab>df_uid_all.columns = column_list	元のデータフレームは201列だけど与えられた要素は41個しかない<tab>要素を201個にしよう
TypeError: dropna() got an unexpected keyword argument 'asix'<tab>df_uid_all = df_uid_all.dropna(asix=1)	axisのスペルが違う<tab>asixをaxisに直す
TypeError: 'int' object is not callable<tab>a,b,h,m=map(int(),input().split())	intの後ろは()がある<tab>map(int,input().split())にする
ImportError: cannot import name 'RandomForestRegressor' from 'sklearn.tree' (/usr/local/lib/python3.7/dist-packages/sklearn/tree/__init__.py)<tab>from sklearn.tree import RandomForestRegressor	import元が異なる<tab>from sklearn.tree import RandomForestRegressorでimportする
"FileNotFoundError: [Errno 2] No such file or directory: 'Users:/shion/Desktop/OJT/numa-chan/train_Numa_print.csv'<tab>X_train_numa_p = pd.read_csv(""Users:/shion/Desktop/OJT/numa-chan/train_Numa_print.csv"")"	Users:/shion/Desktop/OJT/numa-chan/train_Numa_print.csv'が見つからない<tab>ファイルのダウンロードし、ファイル名やファイルパスを確認をする
UsageError: Cell magic `%%atcder` not found.<tab>get_ipython().run_cell_magic('atcder', 'https://atcoder.jp/contests/abc111/tasks/abc111_a', 'n = int(input())\nprint(1110 - n)')	%%atcoderのスペルが違う<tab>%%atcderを%%atcoderに直す
NameError: name 'no' is not defined<tab>print(no.array(scores).mean())	noのスペルミス<tab>npに直す
KeyError: '販売数'<tab>y = df['販売数']	データフレームdfに列'販売数'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
TypeError: '(['築年'], ['通勤'])' is an invalid key<tab>X = df[['築年'],['通勤']]	複数列を指定する際の個々の[]は不要<tab>df[[列名1,列名2,...]]にする
NameError: name 'replace' is not defined<tab>print(replace((S[0],S[-1])(S[1],S[0])))	"replaceのコードが違う<tab>S.replace(""A"",""a"").replace(""B"",""b"")で置換する"
AttributeError: module 'matplotlib.pyplot' has no attribute 'fighre'<tab>plt.fighre(figsize=(6,6))	plt.figureのスペルが違う<tab>plt.figureに直す
TypeError: unsupported operand type(s) for +: 'int' and 'list'<tab>print(0+[n])	intとlistの加算はできない<tab>import numpy as npをし、[p]をnp.array(p)に変換する
ValueError: invalid literal for int() with base 10: '-13 3'<tab>A,B = int(input())	'-13 3'はint型に変換できない<tab>int(input())をmap(int,input().split())に直す
NameError: name 'X_c1_any_p' is not defined<tab>X_train_c1_any_p, X_test_c1_any_p= train_test_split(X_c1_any_p, test_size=0.3, random_state=0)	変数X_c1_any_pが見つからない<tab>X_c1_any_p=...のように定義する
NameError: name 'math' is not defined<tab>math.floor	mathモジュールをimportしていない<tab>import mathする
TypeError: '>' not supported between instances of 'str' and 'int'<tab>if N > 4:	str型とint型で比較演算子は使えない<tab>型を揃えて比較する
AttributeError: 'LinearRegression' object has no attribute 'tree_'<tab>plot_tree(model, feature_names=X.columns, filled=True)	LinearRegressionにplot_treeを使用できない<tab>modelを見直す
ValueError: could not convert string to float: '4 3'<tab>x=float(input())	このデータはそのまま処理できない<tab>文字列を数値に変えるデータ前処理を行う
AttributeError: 'PathCollection' object has no property 'alpa'<tab>plt.scatter(df['部屋数'], df['住宅価格'],alpa=0.5)	alphaのスペルが違う<tab>alpaをalphaに直す
TypeError: 'type' object is not iterable<tab>for S in range:	range関数の範囲が指定されていない<tab>range(繰り返したい数 - 1)のようにする
NameError: name 'コギーマジで嫌い' is not defined<tab>コギーマジで嫌い	日本語文を入力した<tab>日本語文を入力しない
NameError: name 'pd' is not defined<tab>df = pd.read_csv('boston.csv')	pandasをpdとしてimportしていない<tab>import pandas as pd する
ValueError: invalid literal for int() with base 10: '.'<tab>Y=int(X[X.find('')+1])	.'はint型に変換できない<tab>int関数の引数を見直す
AttributeError: 'str' object has no attribute 'r2'<tab>print(f'{column} 決定係数(R2):'.r2)	r2の前に.がある<tab>.r2をr2に直す
ValueError: invalid literal for int() with base 10: 'fg'<tab>z=int(input())	文字列'fg'はint型に変換できない<tab>int(input())をinput()に直す
"KeyError: ""['kacl'] not in index""<tab>X = df[['week','kacl']]"	データフレームdfに列'kacl'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
AttributeError: 'LinearRegression' object has no attribute 'future_importances_'<tab>model.future_importances_	feautureのスペルが違う<tab>futureをfeautureに直す
KeyError: ('部屋数', '低所得率')<tab>X = df['部屋数','低所得率']	カラム名は1つしか指定できない<tab>2つ以上のカラムを取り出したい時には、二重括弧を使う
ValueError: Expected 2D array, got 1D array instead:<nl>array=[104 134 129 129  99  56 107 111  65  93  86  54 137  54  40  64  66  73<nl>  63  57  53 134  80  70  65 160 139  72  59  64 104 118 113  56  50 121<nl> 151  83  80  49  45  62  39  56 120 128  74  53  56  91  64  90  92  76<nl>  82  69  74 126  73 111 126 125  45 171  48 151 100  78  60  56 145  77<nl>  84  77  53  40  53  88  56 153  54  56  85 113 131 101  65  52 120  97<nl>  56  56 157 126  50  84  55  47 107 131  58  62  82  87  75  59  55 129<nl>  58  61  53  54 128 109  55  45 102 126  50  46  68  72 122  65  51  54<nl> 129 115 107  85  57  90 123 100 126 145 116  80  53 110  68  71 121  58].<nl>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.<tab>model.fit(X_train, y_train)	sklearnのfit()では、DataFrame型やnumpyの行列形式（縦ベクトル）しか使用できない<tab>二重括弧をつけるか、reshape(-1,1)をつける
ValueError: invalid literal for int() with base 10: '80 60 40 0'<tab>if int(a[j]) < P:	a[j]には複数の値が存在する<tab>intの中にを1つの引数にする
"KeyError: ""['犯罪'] not in index""<tab>X = df[['犯罪', '工場']]  # 説明変数"	データフレームdfに列'犯罪'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
NameError: name 'i' is not defined<tab>for column in df.columns[i]:	変数iが見つからない<tab>iに値を代入する
NameError: name 'NN' is not defined<tab>N=NN % 10	変数NNが見つからない<tab>NN=...のように定義する
NameError: name 'raw' is not defined<tab>N=raw.translate(n)	rawが見つからない<tab>raw=...やスペルを確認する
TypeError: unsupported operand type(s) for %: 'range' and 'range'<tab>if B%A == 0:	A,Bがrange型になっている<tab>A, Bの型を数値型にする
"KeyError: ""['築年数'] not in index""<tab>X = df[['犯罪率','築年数']]"	データフレームdfに列'築年数'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
KeyError: ('資産税', '教員比')<tab>X = df['資産税','教員比']	カラム名は1つしか指定できない<tab>2つ以上のカラムを取り出したい時には、二重括弧を使う
KeyError: 'remark'<tab>df['remark'] = df['remark'].map({	データフレームdfに列'remark'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
ValueError: could not convert string to float: '特になし'<tab>model.fit(X, y)	文字列を数値に変えないと処理できない<tab>文字列を数値に変えるデータ前処理を行う
UsageError: Cell magic `%%atcoderhttps://atcoder.jp/contests/abc111/tasks/abc111_a` not found.<tab>get_ipython().run_cell_magic('atcoderhttps://atcoder.jp/contests/abc111/tasks/abc111_a', '', 'n=str(input())\nprint(n.replace(1,9))')	%%atcoderの使い方が違う<tab>%%atcoder<半角スペース><問題のURL> に直す
KeyError: '男性'<tab>sns.kdeplot(df.groupby('性別').get_group('男性')['G3'], shade = True, label = '男子学生')	データフレームdfに列'男性'が見つからない<tab>列名あるいはデータフレーム名を確認して直す
FileNotFoundError: [Errno 2] No such file or directory: 'boston.csv '<tab>pd.read_csv('boston.csv ')	boston.csvが見つからない<tab>ファイルのダウンロードし、ファイル名やファイルパスを確認をする
ValueError: not enough values to unpack (expected 4, got 1)<tab>a,b,c,d = map(int, input().split())	入力した値を入れる変数は4個あるけど、実際には1個しか入力されていない<tab>入力を4個に増やすか、変数を1個に減らそう
KeyError: ('soldout', 'kcal', 'payday', 'temperature')<tab>X = df['soldout','kcal','payday','temperature']	カラム名は1つしか指定できない<tab>2つ以上のカラムを取り出したい時には、二重括弧を使う
ImportError: cannot import name 'MLPRegressor' from 'sklearn.linear_model' (/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/__init__.py)<tab>from sklearn.linear_model import MLPRegressor	import元が異なる<tab>from sklearn.neural_network import MLPRegressorにimportする
ValueError: invalid literal for int() with base 10: '--1000000000'<tab>a,b,c,d=map(int,input().split())	map関数を用いているが入力データが1つしかない<tab>4つの値を入力する
NameError: name 'ts' is not defined<tab>print(ts)	変数tsが見つからない<tab>ts=...のように定義する
TypeError: Could not convert 厚切りイカフライ手作りヒレカツ白身魚唐揚げ野菜あん若鶏ピリ辛焼ビッグメンチカツ鶏の唐揚豚のスタミナ炒めボローニャ風カツハンバーグタルタルinソーセージカツマーボ豆腐厚揚げ豚生姜炒めクリームチーズ入りメンチ鶏のカッシュナッツ炒め手作りロースカツハンバーグデミソースやわらかロースのサムジョン五目御飯肉じゃがタンドリーチキンカキフライタルタル手作りヒレカツ回鍋肉ポーク味噌焼き鶏の唐揚げ甘酢あんさっくりメンチカツ手ごね風ハンバーグ酢豚カレー入りソーセージカツ豚肉の生姜焼鶏チリソース手作りロースカツ鶏の照り焼きマスタードさんま辛味焼カレイ唐揚げ野菜あんかけ回鍋肉ジューシーメンチカツサバ焼味噌掛け手作りひれかつとカレー酢豚鶏のレモンペッパー焼orカレーチンジャオロース海老フライタルタルチーズ入りメンチカツ鶏の唐揚げメダイ照り焼ハンバーグカレーソースさわら焼味噌掛け鶏のピリ辛焼き手作りロースカツホタテクリ―ムシチュー鶏の唐揚げおろしソースますのマスタードソース回鍋肉ロース甘味噌焼きチンジャオロース海老フライとホタテ串カツハンバーグ和風きのこソースタンドリーチキン酢豚orカレーポークハヤシマーボ豆腐鶏チリソース白身魚唐揚げ野菜あんかけ手作りひれかつハンバーグカレーソース回鍋肉メンチカツチキンクリームシチューボローニャ風カツ海老クリーミ―クノーデル肉じゃがビーフカレー手作りロースカツカレイ野菜あんかけ鶏の唐揚げおろしソースチーズ入りハンバーグ越冬キャベツのメンチカツ鶏の親子煮マーボ豆腐手作りひれかつ肉団子クリームシチューロース甘味噌焼きキーマカレー青椒肉絲メンチカツ肉じゃが酢豚和風ソースハンバーグ青梗菜牛肉炒め肉団子のシチュー青椒肉絲鶏の唐揚げおろしソースチキンカレービーフトマト煮ポーク生姜焼きカレイ唐揚げ野菜あんかけ牛丼風煮鶏の味噌漬け焼き牛肉筍煮マーボ豆腐手作りひれかつ鶏の照り焼きマヨ中華丼タンドリーチキン豚味噌メンチカツマーボ茄子鶏の天ぷら肉じゃがメンチカツ手作りチキンカツきのこソースハンバーグ白身魚唐揚げ野菜餡かけメンチカツタンドリーチキンポークカレー豚肉と茄子のピリ辛炒め鶏の味噌漬け焼きチーズハンバーグサーモンのムニエル2色ソース牛肉コロッケ鶏のカッシュナッツ炒め牛肉すき焼き風鶏の唐揚げおろしソースいか天ぷらチキンカレーハンバーグケッチャップソースゴーヤチャンプルーたっぷりベーコンフライ鶏の味噌漬け焼き手作りロースカツ牛肉ニンニクの芽炒めカレイ唐揚げ野菜餡かけチャプチェタンドリーチキンキーマカレー牛すき焼き風ポークソテー韓国ソースビーフストロガノフアジ唐揚げ南蛮ソース炊き込みご飯マーボ茄子鶏のトマトシチュー豚の冷しゃぶキスと野菜の天ぷら牛丼鶏の塩から揚げカレイ唐揚げ夏野菜あんタンドリーチキン白身魚ムニエル手作りトンカツ和風ハンバーグかじきの甘辛煮チキンのコーンクリーム焼きプルコギポークカレー鶏のから揚げねぎ塩炒めソース豚冷シャブ野菜添え白身魚フライ豚すき焼きエビフライチンジャオロース八宝菜ジャンボチキンカツひやしたぬきうどん・炊き込みご飯豚肉のマスタード焼きバーベキューチキンメンチカツ鶏のから揚げスイートチリソース豚肉の生姜焼きハンバーグ（デミきのこバター）鶏肉のカレー唐揚豚キムチ炒めチキン香草焼きマスタードソースチキンカレーサーモンフライ・タルタル厚切ハムカツ洋食屋さんのメンチカツ牛スキヤキ豚ロースのピザ風チーズ焼きチキン南蛮ロコモコ丼白身魚の南部焼きキーマカレーカレイの唐揚げ豚肉の胡麻シャブチキンの辛味噌焼きビーフシチュー名古屋味噌カツ親子煮チキンステーキ・きのこソースメンチカツ鶏肉の山賊焼きハンバーグデミソースぶりレモンペッパー焼き手作りチキンカツポークカレーチーズメンチカツチキンフリカッセカレイ唐揚げ 甘酢あん厚切イカフライ筑前煮白身魚のマスタード焼き牛カルビ焼き肉ランチビュッフェ豚肉と玉子の炒め鶏肉とカシューナッツ炒め to numeric<tab>df['name'].mean()	列nameはmeanを求められない<tab>列nameの型を見直し、値に直すj
"ValueError: Found input variables with inconsistent numbers of samples: [10, 152]<tab>print(""MSE: "", mean_squared_error(y, y_pred))"	yとy_predのデータの個数が異なる<tab>len(データフレーム名[列名])でそれぞれのデータの個数を確認する
FileNotFoundError: [Errno 2] No such file or directory: 'bento_train.csv'<tab>df = pd.read_csv('bento_train.csv')	bento_train.csvが見つからない<tab>ファイルのダウンロードし、ファイル名やファイルパスを確認をする
NameError: name 'printlen' is not defined<tab>printlen((data1_c2))	printのスペルが違う<tab>print()に直す
AttributeError: 'DecisionTreeRegressor' object has no attribute 'feature_importance_'<tab>model.feature_importance_	featureとimportances_のスペルが違う<tab>featrueをfeatureに、importance_をimportances_に直す
TypeError: '(['通勤'], ['教員比'])' is an invalid key<tab>X = df[['通勤'], ['教員比']]  # ひとつ選ぶ	複数列を指定する際の個々の[]は不要<tab>df[[列名1,列名2,...]]にする
NameError: name 'add' is not defined<tab>add	変数addが見つからない<tab>add=...のように定義する
